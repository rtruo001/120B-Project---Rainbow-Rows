
RainbowRows.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000f70  00001004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080013a  0080013a  0000103e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000294  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078b  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000538  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047d  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002db9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f1 02       	muls	r31, r17
  8e:	f5 02       	muls	r31, r21
  90:	04 03       	mulsu	r16, r20
  92:	18 03       	fmul	r17, r16
  94:	27 03       	mulsu	r18, r23
  96:	3b 03       	fmul	r19, r19
  98:	4a 03       	fmul	r20, r18
  9a:	5e 03       	fmul	r21, r22
  9c:	6d 03       	fmul	r22, r21
  9e:	81 03       	fmuls	r16, r17
  a0:	90 03       	fmuls	r17, r16
  a2:	a4 03       	fmuls	r18, r20
  a4:	b3 03       	fmuls	r19, r19
  a6:	c7 03       	fmuls	r20, r23
  a8:	d6 03       	fmuls	r21, r22
  aa:	ea 03       	fmulsu	r22, r18
  ac:	f9 03       	fmulsu	r23, r17

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e0 e7       	ldi	r30, 0x70	; 112
  c2:	ff e0       	ldi	r31, 0x0F	; 15
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	aa 33       	cpi	r26, 0x3A	; 58
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	aa e3       	ldi	r26, 0x3A	; 58
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	ad 34       	cpi	r26, 0x4D	; 77
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	4f d6       	rcall	.+3230   	; 0xd84 <main>
  e6:	42 c7       	rjmp	.+3716   	; 0xf6c <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <TimerOn>:
	
	PORTC = column_val; // PORTA displays column pattern
	PORTA = column_sel; // PORTB selects column to display pattern

	return state;
}
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25
  f8:	80 93 88 00 	sts	0x0088, r24
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24
 102:	10 92 85 00 	sts	0x0085, r1
 106:	10 92 84 00 	sts	0x0084, r1
 10a:	80 91 35 01 	lds	r24, 0x0135
 10e:	90 91 36 01 	lds	r25, 0x0136
 112:	a0 91 37 01 	lds	r26, 0x0137
 116:	b0 91 38 01 	lds	r27, 0x0138
 11a:	80 93 43 01 	sts	0x0143, r24
 11e:	90 93 44 01 	sts	0x0144, r25
 122:	a0 93 45 01 	sts	0x0145, r26
 126:	b0 93 46 01 	sts	0x0146, r27
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 43 01 	lds	r24, 0x0143
 148:	90 91 44 01 	lds	r25, 0x0144
 14c:	a0 91 45 01 	lds	r26, 0x0145
 150:	b0 91 46 01 	lds	r27, 0x0146
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 43 01 	sts	0x0143, r24
 15e:	90 93 44 01 	sts	0x0144, r25
 162:	a0 93 45 01 	sts	0x0145, r26
 166:	b0 93 46 01 	sts	0x0146, r27
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 47 01 	sts	0x0147, r24
 178:	80 91 35 01 	lds	r24, 0x0135
 17c:	90 91 36 01 	lds	r25, 0x0136
 180:	a0 91 37 01 	lds	r26, 0x0137
 184:	b0 91 38 01 	lds	r27, 0x0138
 188:	80 93 43 01 	sts	0x0143, r24
 18c:	90 93 44 01 	sts	0x0144, r25
 190:	a0 93 45 01 	sts	0x0145, r26
 194:	b0 93 46 01 	sts	0x0146, r27
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <transmit_data>:
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	f8 e0       	ldi	r31, 0x08	; 8
 1b8:	f5 b9       	out	0x05, r31	; 5
 1ba:	e5 b1       	in	r30, 0x05	; 5
 1bc:	6b 01       	movw	r12, r22
 1be:	7c 01       	movw	r14, r24
 1c0:	02 2e       	mov	r0, r18
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <transmit_data+0x22>
 1c4:	f5 94       	asr	r15
 1c6:	e7 94       	ror	r14
 1c8:	d7 94       	ror	r13
 1ca:	c7 94       	ror	r12
 1cc:	0a 94       	dec	r0
 1ce:	d2 f7       	brpl	.-12     	; 0x1c4 <transmit_data+0x1a>
 1d0:	4c 2d       	mov	r20, r12
 1d2:	41 70       	andi	r20, 0x01	; 1
 1d4:	4e 2b       	or	r20, r30
 1d6:	45 b9       	out	0x05, r20	; 5
 1d8:	29 9a       	sbi	0x05, 1	; 5
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	20 32       	cpi	r18, 0x20	; 32
 1e0:	31 05       	cpc	r19, r1
 1e2:	51 f7       	brne	.-44     	; 0x1b8 <transmit_data+0xe>
 1e4:	2a 9a       	sbi	0x05, 2	; 5
 1e6:	15 b8       	out	0x05, r1	; 5
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	08 95       	ret

000001f2 <NES_Controller>:
 1f2:	10 92 42 01 	sts	0x0142, r1
 1f6:	10 92 41 01 	sts	0x0141, r1
 1fa:	27 e0       	ldi	r18, 0x07	; 7
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <NES_Controller+0xe>
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	27 30       	cpi	r18, 0x07	; 7
 202:	c9 f4       	brne	.+50     	; 0x236 <NES_Controller+0x44>
 204:	59 9a       	sbi	0x0b, 1	; 11
 206:	48 9b       	sbis	0x09, 0	; 9
 208:	0a c0       	rjmp	.+20     	; 0x21e <NES_Controller+0x2c>
 20a:	80 91 41 01 	lds	r24, 0x0141
 20e:	90 91 42 01 	lds	r25, 0x0142
 212:	80 68       	ori	r24, 0x80	; 128
 214:	90 93 42 01 	sts	0x0142, r25
 218:	80 93 41 01 	sts	0x0141, r24
 21c:	0a c0       	rjmp	.+20     	; 0x232 <NES_Controller+0x40>
 21e:	80 91 41 01 	lds	r24, 0x0141
 222:	90 91 42 01 	lds	r25, 0x0142
 226:	8f 77       	andi	r24, 0x7F	; 127
 228:	99 27       	eor	r25, r25
 22a:	90 93 42 01 	sts	0x0142, r25
 22e:	80 93 41 01 	sts	0x0141, r24
 232:	1b b8       	out	0x0b, r1	; 11
 234:	e4 cf       	rjmp	.-56     	; 0x1fe <NES_Controller+0xc>
 236:	80 91 41 01 	lds	r24, 0x0141
 23a:	90 91 42 01 	lds	r25, 0x0142
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	90 93 42 01 	sts	0x0142, r25
 246:	80 93 41 01 	sts	0x0141, r24
 24a:	5a 9a       	sbi	0x0b, 2	; 11
 24c:	48 9b       	sbis	0x09, 0	; 9
 24e:	0a c0       	rjmp	.+20     	; 0x264 <NES_Controller+0x72>
 250:	80 91 41 01 	lds	r24, 0x0141
 254:	90 91 42 01 	lds	r25, 0x0142
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	90 93 42 01 	sts	0x0142, r25
 25e:	80 93 41 01 	sts	0x0141, r24
 262:	0a c0       	rjmp	.+20     	; 0x278 <NES_Controller+0x86>
 264:	80 91 41 01 	lds	r24, 0x0141
 268:	90 91 42 01 	lds	r25, 0x0142
 26c:	8f 77       	andi	r24, 0x7F	; 127
 26e:	99 27       	eor	r25, r25
 270:	90 93 42 01 	sts	0x0142, r25
 274:	80 93 41 01 	sts	0x0141, r24
 278:	1b b8       	out	0x0b, r1	; 11
 27a:	21 11       	cpse	r18, r1
 27c:	c0 cf       	rjmp	.-128    	; 0x1fe <NES_Controller+0xc>
 27e:	08 95       	ret

00000280 <Init_LED>:
const unsigned char GREEN_LIGHT = 0;
const unsigned char BLUE_LIGHT = 1;

signed long col_states[8] = {0x01FFFFFF, 0x02FFFFFF, 0x04FFFFFF, 0x08FFFFFF, 0x10FFFFFF, 0x20FFFFFF, 0x40FFFFFF, 0x80FFFFFF};
void Init_LED()
{
 280:	2f 92       	push	r2
 282:	3f 92       	push	r3
 284:	4f 92       	push	r4
 286:	5f 92       	push	r5
 288:	6f 92       	push	r6
 28a:	7f 92       	push	r7
 28c:	8f 92       	push	r8
 28e:	9f 92       	push	r9
 290:	af 92       	push	r10
 292:	bf 92       	push	r11
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	28 97       	sbiw	r28, 0x08	; 8
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
	//Restarts and initializes all the columns to their basic state.
	col_states[0] = 0x01FFFFFF;
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	9f ef       	ldi	r25, 0xFF	; 255
 2b8:	af ef       	ldi	r26, 0xFF	; 255
 2ba:	b1 e0       	ldi	r27, 0x01	; 1
 2bc:	80 93 13 01 	sts	0x0113, r24
 2c0:	90 93 14 01 	sts	0x0114, r25
 2c4:	a0 93 15 01 	sts	0x0115, r26
 2c8:	b0 93 16 01 	sts	0x0116, r27
	col_states[1] = 0x02FFFFFF;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	9f ef       	ldi	r25, 0xFF	; 255
 2d0:	af ef       	ldi	r26, 0xFF	; 255
 2d2:	b2 e0       	ldi	r27, 0x02	; 2
 2d4:	80 93 17 01 	sts	0x0117, r24
 2d8:	90 93 18 01 	sts	0x0118, r25
 2dc:	a0 93 19 01 	sts	0x0119, r26
 2e0:	b0 93 1a 01 	sts	0x011A, r27
	col_states[2] = 0x04FFFFFF;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	9f ef       	ldi	r25, 0xFF	; 255
 2e8:	af ef       	ldi	r26, 0xFF	; 255
 2ea:	b4 e0       	ldi	r27, 0x04	; 4
 2ec:	80 93 1b 01 	sts	0x011B, r24
 2f0:	90 93 1c 01 	sts	0x011C, r25
 2f4:	a0 93 1d 01 	sts	0x011D, r26
 2f8:	b0 93 1e 01 	sts	0x011E, r27
	col_states[3] = 0x08FFFFFF;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
 300:	af ef       	ldi	r26, 0xFF	; 255
 302:	b8 e0       	ldi	r27, 0x08	; 8
 304:	80 93 1f 01 	sts	0x011F, r24
 308:	90 93 20 01 	sts	0x0120, r25
 30c:	a0 93 21 01 	sts	0x0121, r26
 310:	b0 93 22 01 	sts	0x0122, r27
	col_states[4] = 0x10FFFFFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	9f ef       	ldi	r25, 0xFF	; 255
 318:	af ef       	ldi	r26, 0xFF	; 255
 31a:	b0 e1       	ldi	r27, 0x10	; 16
 31c:	80 93 23 01 	sts	0x0123, r24
 320:	90 93 24 01 	sts	0x0124, r25
 324:	a0 93 25 01 	sts	0x0125, r26
 328:	b0 93 26 01 	sts	0x0126, r27
	col_states[5] = 0x20FFFFFF;
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	9f ef       	ldi	r25, 0xFF	; 255
 330:	af ef       	ldi	r26, 0xFF	; 255
 332:	b0 e2       	ldi	r27, 0x20	; 32
 334:	80 93 27 01 	sts	0x0127, r24
 338:	90 93 28 01 	sts	0x0128, r25
 33c:	a0 93 29 01 	sts	0x0129, r26
 340:	b0 93 2a 01 	sts	0x012A, r27
	col_states[6] = 0x40FFFFFF;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	af ef       	ldi	r26, 0xFF	; 255
 34a:	b0 e4       	ldi	r27, 0x40	; 64
 34c:	80 93 2b 01 	sts	0x012B, r24
 350:	90 93 2c 01 	sts	0x012C, r25
 354:	a0 93 2d 01 	sts	0x012D, r26
 358:	b0 93 2e 01 	sts	0x012E, r27
	col_states[7] = 0x80FFFFFF;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	9f ef       	ldi	r25, 0xFF	; 255
 360:	af ef       	ldi	r26, 0xFF	; 255
 362:	b0 e8       	ldi	r27, 0x80	; 128
 364:	80 93 2f 01 	sts	0x012F, r24
 368:	90 93 30 01 	sts	0x0130, r25
 36c:	a0 93 31 01 	sts	0x0131, r26
 370:	b0 93 32 01 	sts	0x0132, r27
 374:	0f 2e       	mov	r0, r31
 376:	f3 e1       	ldi	r31, 0x13	; 19
 378:	2f 2e       	mov	r2, r31
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	3f 2e       	mov	r3, r31
 37e:	f0 2d       	mov	r31, r0
	//This variable is initialized as an LED with all columns and rows turned off except the first column.
	signed long var_init_LED = 0x01FFFFFF;
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	3f ef       	ldi	r19, 0xFF	; 255
 384:	4f ef       	ldi	r20, 0xFF	; 255
 386:	51 e0       	ldi	r21, 0x01	; 1
 388:	29 83       	std	Y+1, r18	; 0x01
 38a:	3a 83       	std	Y+2, r19	; 0x02
 38c:	4b 83       	std	Y+3, r20	; 0x03
 38e:	5c 83       	std	Y+4, r21	; 0x04
	//The following variables are initialized to which bits would be Red, Green, or Blue.
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
	signed long blue_mask = 0x01FFFEFF;
 390:	0f 2e       	mov	r0, r31
 392:	88 24       	eor	r8, r8
 394:	8a 94       	dec	r8
 396:	fe ef       	ldi	r31, 0xFE	; 254
 398:	9f 2e       	mov	r9, r31
 39a:	a8 2c       	mov	r10, r8
 39c:	bb 24       	eor	r11, r11
 39e:	b3 94       	inc	r11
 3a0:	f0 2d       	mov	r31, r0
	col_states[7] = 0x80FFFFFF;
	//This variable is initialized as an LED with all columns and rows turned off except the first column.
	signed long var_init_LED = 0x01FFFFFF;
	//The following variables are initialized to which bits would be Red, Green, or Blue.
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
 3a2:	0f 2e       	mov	r0, r31
 3a4:	cc 24       	eor	r12, r12
 3a6:	ca 94       	dec	r12
 3a8:	dc 2c       	mov	r13, r12
 3aa:	fe ef       	ldi	r31, 0xFE	; 254
 3ac:	ef 2e       	mov	r14, r31
 3ae:	ff 24       	eor	r15, r15
 3b0:	f3 94       	inc	r15
 3b2:	f0 2d       	mov	r31, r0
 3b4:	96 c0       	rjmp	.+300    	; 0x4e2 <Init_LED+0x262>
	for (unsigned char i = 0; i < 8; ++i)
	{
		for (unsigned char j = 0; j < 8; ++j)
		{
			//var_init_LED
			if (seed_randomize >= 10000)
 3b6:	80 91 33 01 	lds	r24, 0x0133
 3ba:	90 91 34 01 	lds	r25, 0x0134
 3be:	80 31       	cpi	r24, 0x10	; 16
 3c0:	37 e2       	ldi	r19, 0x27	; 39
 3c2:	93 07       	cpc	r25, r19
 3c4:	3c f0       	brlt	.+14     	; 0x3d4 <Init_LED+0x154>
			{
				seed_randomize = 1;
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	50 93 34 01 	sts	0x0134, r21
 3ce:	40 93 33 01 	sts	0x0133, r20
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <Init_LED+0x15e>
			}
			else
			{
				++seed_randomize;
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 34 01 	sts	0x0134, r25
 3da:	80 93 33 01 	sts	0x0133, r24
			//1 - blue.
			//If red was used, 0 1 and 2 would be generated. 
			//0 - red
			//1 - green
			//2 - blue
			rand_num = rand() % 2;
 3de:	5b d5       	rcall	.+2742   	; 0xe96 <rand>
 3e0:	81 70       	andi	r24, 0x01	; 1
 3e2:	90 78       	andi	r25, 0x80	; 128
 3e4:	99 23       	and	r25, r25
 3e6:	24 f4       	brge	.+8      	; 0x3f0 <Init_LED+0x170>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	8e 6f       	ori	r24, 0xFE	; 254
 3ec:	9f 6f       	ori	r25, 0xFF	; 255
 3ee:	01 96       	adiw	r24, 0x01	; 1
		//The Red mask would be used if the red color was used in the game.
		//	if (rand_num == RED_LIGHT)
		//	{
		//		col_states[i] = var_init_LED & (col_states[i] & red_mask);
		//	}
			if (rand_num == GREEN_LIGHT)
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	b9 f4       	brne	.+46     	; 0x422 <Init_LED+0x1a2>
			{
				col_states[i] = var_init_LED & (col_states[i] & green_mask);
 3f4:	ef 81       	ldd	r30, Y+7	; 0x07
 3f6:	f8 85       	ldd	r31, Y+8	; 0x08
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	a2 81       	ldd	r26, Z+2	; 0x02
 3fe:	b3 81       	ldd	r27, Z+3	; 0x03
 400:	29 81       	ldd	r18, Y+1	; 0x01
 402:	3a 81       	ldd	r19, Y+2	; 0x02
 404:	4b 81       	ldd	r20, Y+3	; 0x03
 406:	5c 81       	ldd	r21, Y+4	; 0x04
 408:	82 23       	and	r24, r18
 40a:	93 23       	and	r25, r19
 40c:	a4 23       	and	r26, r20
 40e:	b5 23       	and	r27, r21
 410:	8c 21       	and	r24, r12
 412:	9d 21       	and	r25, r13
 414:	ae 21       	and	r26, r14
 416:	bf 21       	and	r27, r15
 418:	80 83       	st	Z, r24
 41a:	91 83       	std	Z+1, r25	; 0x01
 41c:	a2 83       	std	Z+2, r26	; 0x02
 41e:	b3 83       	std	Z+3, r27	; 0x03
 420:	18 c0       	rjmp	.+48     	; 0x452 <Init_LED+0x1d2>
			}
			else if (rand_num == BLUE_LIGHT)
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	b1 f4       	brne	.+44     	; 0x452 <Init_LED+0x1d2>
			{
				col_states[i] = var_init_LED & (col_states[i] & blue_mask);
 426:	ef 81       	ldd	r30, Y+7	; 0x07
 428:	f8 85       	ldd	r31, Y+8	; 0x08
 42a:	80 81       	ld	r24, Z
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	a2 81       	ldd	r26, Z+2	; 0x02
 430:	b3 81       	ldd	r27, Z+3	; 0x03
 432:	29 81       	ldd	r18, Y+1	; 0x01
 434:	3a 81       	ldd	r19, Y+2	; 0x02
 436:	4b 81       	ldd	r20, Y+3	; 0x03
 438:	5c 81       	ldd	r21, Y+4	; 0x04
 43a:	82 23       	and	r24, r18
 43c:	93 23       	and	r25, r19
 43e:	a4 23       	and	r26, r20
 440:	b5 23       	and	r27, r21
 442:	88 21       	and	r24, r8
 444:	99 21       	and	r25, r9
 446:	aa 21       	and	r26, r10
 448:	bb 21       	and	r27, r11
 44a:	80 83       	st	Z, r24
 44c:	91 83       	std	Z+1, r25	; 0x01
 44e:	a2 83       	std	Z+2, r26	; 0x02
 450:	b3 83       	std	Z+3, r27	; 0x03
			}
			
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
 452:	8d 81       	ldd	r24, Y+5	; 0x05
 454:	90 2f       	mov	r25, r16
 456:	a1 2f       	mov	r26, r17
 458:	b2 2d       	mov	r27, r2
 45a:	cc 0c       	add	r12, r12
 45c:	dd 1c       	adc	r13, r13
 45e:	ee 1c       	adc	r14, r14
 460:	ff 1c       	adc	r15, r15
 462:	e8 94       	clt
 464:	c0 f8       	bld	r12, 0
 466:	ff 24       	eor	r15, r15
 468:	c4 28       	or	r12, r4
 46a:	d5 28       	or	r13, r5
 46c:	e6 28       	or	r14, r6
 46e:	f7 28       	or	r15, r7
			blue_mask = (var_init_LED & 0xFF000000) | (((blue_mask << 1) | 0x00000001) & 0x00FFFFFF);
 470:	88 0c       	add	r8, r8
 472:	99 1c       	adc	r9, r9
 474:	aa 1c       	adc	r10, r10
 476:	bb 1c       	adc	r11, r11
 478:	e8 94       	clt
 47a:	80 f8       	bld	r8, 0
 47c:	bb 24       	eor	r11, r11
 47e:	84 28       	or	r8, r4
 480:	95 28       	or	r9, r5
 482:	a6 28       	or	r10, r6
 484:	b7 28       	or	r11, r7
 486:	3a 94       	dec	r3
	signed long blue_mask = 0x01FFFEFF;
	signed short rand_num = 0;
	
	for (unsigned char i = 0; i < 8; ++i)
	{
		for (unsigned char j = 0; j < 8; ++j)
 488:	09 f0       	breq	.+2      	; 0x48c <Init_LED+0x20c>
 48a:	95 cf       	rjmp	.-214    	; 0x3b6 <Init_LED+0x136>
 48c:	2f 80       	ldd	r2, Y+7	; 0x07
 48e:	38 84       	ldd	r3, Y+8	; 0x08
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
			blue_mask = (var_init_LED & 0xFF000000) | (((blue_mask << 1) | 0x00000001) & 0x00FFFFFF);
		}
		var_init_LED = ((var_init_LED & 0xFF000000) << 1) | 0x00FFFFFF;
 490:	88 27       	eor	r24, r24
 492:	99 27       	eor	r25, r25
 494:	aa 27       	eor	r26, r26
 496:	4c 01       	movw	r8, r24
 498:	5d 01       	movw	r10, r26
 49a:	88 0c       	add	r8, r8
 49c:	99 1c       	adc	r9, r9
 49e:	aa 1c       	adc	r10, r10
 4a0:	bb 1c       	adc	r11, r11
 4a2:	a5 01       	movw	r20, r10
 4a4:	94 01       	movw	r18, r8
 4a6:	2f 6f       	ori	r18, 0xFF	; 255
 4a8:	3f 6f       	ori	r19, 0xFF	; 255
 4aa:	4f 6f       	ori	r20, 0xFF	; 255
 4ac:	29 83       	std	Y+1, r18	; 0x01
 4ae:	3a 83       	std	Y+2, r19	; 0x02
 4b0:	4b 83       	std	Y+3, r20	; 0x03
 4b2:	5c 83       	std	Y+4, r21	; 0x04
		
	//The Red mask would be used if the red color was used in the game.
	//	red_mask = (var_init_LED & 0xFF000000) | 0x00FFFFFE;
		green_mask = (var_init_LED & 0xFF000000) | 0x00FEFFFF;
 4b4:	88 24       	eor	r8, r8
 4b6:	99 24       	eor	r9, r9
 4b8:	aa 24       	eor	r10, r10
 4ba:	75 01       	movw	r14, r10
 4bc:	64 01       	movw	r12, r8
 4be:	cc 24       	eor	r12, r12
 4c0:	ca 94       	dec	r12
 4c2:	dc 2c       	mov	r13, r12
 4c4:	3e ef       	ldi	r19, 0xFE	; 254
 4c6:	e3 2a       	or	r14, r19
		blue_mask = (var_init_LED & 0xFF000000) | 0x00FFFEFF;
 4c8:	88 24       	eor	r8, r8
 4ca:	8a 94       	dec	r8
 4cc:	4e ef       	ldi	r20, 0xFE	; 254
 4ce:	94 2a       	or	r9, r20
 4d0:	a8 2c       	mov	r10, r8
 4d2:	54 e0       	ldi	r21, 0x04	; 4
 4d4:	25 0e       	add	r2, r21
 4d6:	31 1c       	adc	r3, r1
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
	signed long blue_mask = 0x01FFFEFF;
	signed short rand_num = 0;
	
	for (unsigned char i = 0; i < 8; ++i)
 4d8:	83 e3       	ldi	r24, 0x33	; 51
 4da:	28 16       	cp	r2, r24
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	38 06       	cpc	r3, r24
 4e0:	c1 f0       	breq	.+48     	; 0x512 <Init_LED+0x292>
const unsigned char GREEN_LIGHT = 0;
const unsigned char BLUE_LIGHT = 1;

signed long col_states[8] = {0x01FFFFFF, 0x02FFFFFF, 0x04FFFFFF, 0x08FFFFFF, 0x10FFFFFF, 0x20FFFFFF, 0x40FFFFFF, 0x80FFFFFF};
void Init_LED()
{
 4e2:	98 e0       	ldi	r25, 0x08	; 8
 4e4:	9e 83       	std	Y+6, r25	; 0x06
				col_states[i] = var_init_LED & (col_states[i] & blue_mask);
			}
			
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
 4e6:	a9 81       	ldd	r26, Y+1	; 0x01
 4e8:	ad 83       	std	Y+5, r26	; 0x05
 4ea:	0a 81       	ldd	r16, Y+2	; 0x02
 4ec:	1b 81       	ldd	r17, Y+3	; 0x03
 4ee:	bc 81       	ldd	r27, Y+4	; 0x04
 4f0:	49 80       	ldd	r4, Y+1	; 0x01
 4f2:	5a 80       	ldd	r5, Y+2	; 0x02
 4f4:	6b 80       	ldd	r6, Y+3	; 0x03
 4f6:	7c 80       	ldd	r7, Y+4	; 0x04
 4f8:	44 24       	eor	r4, r4
 4fa:	55 24       	eor	r5, r5
 4fc:	66 24       	eor	r6, r6
 4fe:	68 94       	set
 500:	40 f8       	bld	r4, 0
 502:	c1 01       	movw	r24, r2
 504:	68 94       	set
 506:	33 24       	eor	r3, r3
 508:	33 f8       	bld	r3, 3
 50a:	98 87       	std	Y+8, r25	; 0x08
 50c:	8f 83       	std	Y+7, r24	; 0x07
 50e:	2b 2e       	mov	r2, r27
 510:	52 cf       	rjmp	.-348    	; 0x3b6 <Init_LED+0x136>
	//The Red mask would be used if the red color was used in the game.
	//	red_mask = (var_init_LED & 0xFF000000) | 0x00FFFFFE;
		green_mask = (var_init_LED & 0xFF000000) | 0x00FEFFFF;
		blue_mask = (var_init_LED & 0xFF000000) | 0x00FFFEFF;
	}
}
 512:	28 96       	adiw	r28, 0x08	; 8
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	7f 90       	pop	r7
 538:	6f 90       	pop	r6
 53a:	5f 90       	pop	r5
 53c:	4f 90       	pop	r4
 53e:	3f 90       	pop	r3
 540:	2f 90       	pop	r2
 542:	08 95       	ret

00000544 <Starting_Game>:
//It will only change to 1 if the user pushes start at the beginning.
unsigned short state_of_game = 0;
void Starting_Game()
{
	//Transitions
	switch(Game_State)
 544:	80 91 4b 01 	lds	r24, 0x014B
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	41 f0       	breq	.+16     	; 0x55c <Starting_Game+0x18>
 54c:	18 f0       	brcs	.+6      	; 0x554 <Starting_Game+0x10>
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	89 f1       	breq	.+98     	; 0x5b4 <Starting_Game+0x70>
 552:	39 c0       	rjmp	.+114    	; 0x5c6 <Starting_Game+0x82>
	{
		case Game_Init:
			Game_State = Game_Wait;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	80 93 4b 01 	sts	0x014B, r24
			break;
 55a:	08 95       	ret
		case Game_Wait:
			if (seed_randomize >= 10000)
 55c:	80 91 33 01 	lds	r24, 0x0133
 560:	90 91 34 01 	lds	r25, 0x0134
 564:	80 31       	cpi	r24, 0x10	; 16
 566:	27 e2       	ldi	r18, 0x27	; 39
 568:	92 07       	cpc	r25, r18
 56a:	3c f0       	brlt	.+14     	; 0x57a <Starting_Game+0x36>
			{
				seed_randomize = 1;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	90 93 34 01 	sts	0x0134, r25
 574:	80 93 33 01 	sts	0x0133, r24
 578:	05 c0       	rjmp	.+10     	; 0x584 <Starting_Game+0x40>
			}
			else
			{
				++seed_randomize;
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	90 93 34 01 	sts	0x0134, r25
 580:	80 93 33 01 	sts	0x0133, r24
			}
			if ((button & Start_Button) == 0x00)
 584:	80 91 41 01 	lds	r24, 0x0141
 588:	84 fd       	sbrc	r24, 4
 58a:	10 c0       	rjmp	.+32     	; 0x5ac <Starting_Game+0x68>
			{
				//Here comes the exciting part
				state_of_game = 1;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	90 93 40 01 	sts	0x0140, r25
 594:	80 93 3f 01 	sts	0x013F, r24
				//Initializes the seed for the random.
				srand(seed_randomize);
 598:	80 91 33 01 	lds	r24, 0x0133
 59c:	90 91 34 01 	lds	r25, 0x0134
 5a0:	7d d4       	rcall	.+2298   	; 0xe9c <srand>
				Init_LED();
 5a2:	6e de       	rcall	.-804    	; 0x280 <Init_LED>
				Game_State = Game_Start;
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	80 93 4b 01 	sts	0x014B, r24
 5aa:	08 95       	ret
			}
			else
			{
				Game_State = Game_Wait;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 4b 01 	sts	0x014B, r24
 5b2:	08 95       	ret
			}
			break;
		case Game_Start:
			if (state_of_game == 0)
 5b4:	80 91 3f 01 	lds	r24, 0x013F
 5b8:	90 91 40 01 	lds	r25, 0x0140
 5bc:	89 2b       	or	r24, r25
 5be:	29 f4       	brne	.+10     	; 0x5ca <Starting_Game+0x86>
			{
				Game_State = Game_Init;
 5c0:	10 92 4b 01 	sts	0x014B, r1
 5c4:	08 95       	ret
			}
			break;
		default:
			Game_State = Game_Init;
 5c6:	10 92 4b 01 	sts	0x014B, r1
 5ca:	08 95       	ret

000005cc <LED_Matrix>:
	
void LED_Matrix()
{
	//Transitions
	//Goes from state column on, to column off, to the next column on. The cycle continues.
	switch(LED_State)
 5cc:	80 91 48 01 	lds	r24, 0x0148
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	81 31       	cpi	r24, 0x11	; 17
 5d4:	91 05       	cpc	r25, r1
 5d6:	08 f0       	brcs	.+2      	; 0x5da <LED_Matrix+0xe>
 5d8:	10 c1       	rjmp	.+544    	; 0x7fa <LED_Matrix+0x22e>
 5da:	fc 01       	movw	r30, r24
 5dc:	ea 5b       	subi	r30, 0xBA	; 186
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	0b c4       	rjmp	.+2070   	; 0xdf8 <__tablejump2__>
	{
		case LED_Init:
			LED_State = col0;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	80 93 48 01 	sts	0x0148, r24
			break;
 5e8:	0b c1       	rjmp	.+534    	; 0x800 <LED_Matrix+0x234>
		case col0:
			LED_State = col0_off;
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	80 93 48 01 	sts	0x0148, r24
			display_lights = col_states[7];
			break;
			
		//Turns column of the LED's off.
		case col0_off:
			display_lights = 0x00FFFFFFFF;
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	9f ef       	ldi	r25, 0xFF	; 255
 5f4:	dc 01       	movw	r26, r24
 5f6:	80 93 3b 01 	sts	0x013B, r24
 5fa:	90 93 3c 01 	sts	0x013C, r25
 5fe:	a0 93 3d 01 	sts	0x013D, r26
 602:	b0 93 3e 01 	sts	0x013E, r27
			break;
 606:	08 95       	ret
			break;
		case col0:
			LED_State = col0_off;
			break;
		case col0_off:
			LED_State = col1;
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	80 93 48 01 	sts	0x0148, r24
			break;
		case col0:
			display_lights = col_states[0];
			break;
		case col1:
			display_lights = col_states[1];
 60e:	80 91 17 01 	lds	r24, 0x0117
 612:	90 91 18 01 	lds	r25, 0x0118
 616:	a0 91 19 01 	lds	r26, 0x0119
 61a:	b0 91 1a 01 	lds	r27, 0x011A
 61e:	80 93 3b 01 	sts	0x013B, r24
 622:	90 93 3c 01 	sts	0x013C, r25
 626:	a0 93 3d 01 	sts	0x013D, r26
 62a:	b0 93 3e 01 	sts	0x013E, r27
			break;
 62e:	08 95       	ret
			break;
		case col0_off:
			LED_State = col1;
			break;
		case col1:
			LED_State = col1_off;
 630:	84 e0       	ldi	r24, 0x04	; 4
 632:	80 93 48 01 	sts	0x0148, r24
		//Turns column of the LED's off.
		case col0_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col1_off:
			display_lights = 0x00FFFFFFFF;
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	dc 01       	movw	r26, r24
 63c:	80 93 3b 01 	sts	0x013B, r24
 640:	90 93 3c 01 	sts	0x013C, r25
 644:	a0 93 3d 01 	sts	0x013D, r26
 648:	b0 93 3e 01 	sts	0x013E, r27
			break;
 64c:	08 95       	ret
			break;
		case col1:
			LED_State = col1_off;
			break;
		case col1_off:
			LED_State = col2;
 64e:	85 e0       	ldi	r24, 0x05	; 5
 650:	80 93 48 01 	sts	0x0148, r24
			break;
		case col1:
			display_lights = col_states[1];
			break;
		case col2:
			display_lights = col_states[2];
 654:	80 91 1b 01 	lds	r24, 0x011B
 658:	90 91 1c 01 	lds	r25, 0x011C
 65c:	a0 91 1d 01 	lds	r26, 0x011D
 660:	b0 91 1e 01 	lds	r27, 0x011E
 664:	80 93 3b 01 	sts	0x013B, r24
 668:	90 93 3c 01 	sts	0x013C, r25
 66c:	a0 93 3d 01 	sts	0x013D, r26
 670:	b0 93 3e 01 	sts	0x013E, r27
			break;
 674:	08 95       	ret
			break;
		case col1_off:
			LED_State = col2;
			break;
		case col2:
			LED_State = col2_off;
 676:	86 e0       	ldi	r24, 0x06	; 6
 678:	80 93 48 01 	sts	0x0148, r24
			break;
		case col1_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col2_off:
			display_lights = 0x00FFFFFFFF;
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	dc 01       	movw	r26, r24
 682:	80 93 3b 01 	sts	0x013B, r24
 686:	90 93 3c 01 	sts	0x013C, r25
 68a:	a0 93 3d 01 	sts	0x013D, r26
 68e:	b0 93 3e 01 	sts	0x013E, r27
			break;
 692:	08 95       	ret
			break;
		case col2:
			LED_State = col2_off;
			break;
		case col2_off:
			LED_State = col3;
 694:	87 e0       	ldi	r24, 0x07	; 7
 696:	80 93 48 01 	sts	0x0148, r24
			break;
		case col2:
			display_lights = col_states[2];
			break;
		case col3:
			display_lights = col_states[3];
 69a:	80 91 1f 01 	lds	r24, 0x011F
 69e:	90 91 20 01 	lds	r25, 0x0120
 6a2:	a0 91 21 01 	lds	r26, 0x0121
 6a6:	b0 91 22 01 	lds	r27, 0x0122
 6aa:	80 93 3b 01 	sts	0x013B, r24
 6ae:	90 93 3c 01 	sts	0x013C, r25
 6b2:	a0 93 3d 01 	sts	0x013D, r26
 6b6:	b0 93 3e 01 	sts	0x013E, r27
			break;
 6ba:	08 95       	ret
			break;
		case col2_off:
			LED_State = col3;
			break;
		case col3:
			LED_State = col3_off;
 6bc:	88 e0       	ldi	r24, 0x08	; 8
 6be:	80 93 48 01 	sts	0x0148, r24
			break;
		case col2_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col3_off:
			display_lights = 0x00FFFFFFFF;
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	dc 01       	movw	r26, r24
 6c8:	80 93 3b 01 	sts	0x013B, r24
 6cc:	90 93 3c 01 	sts	0x013C, r25
 6d0:	a0 93 3d 01 	sts	0x013D, r26
 6d4:	b0 93 3e 01 	sts	0x013E, r27
			break;
 6d8:	08 95       	ret
			break;
		case col3:
			LED_State = col3_off;
			break;
		case col3_off:
			LED_State = col4;
 6da:	89 e0       	ldi	r24, 0x09	; 9
 6dc:	80 93 48 01 	sts	0x0148, r24
			break;
		case col3:
			display_lights = col_states[3];
			break;
		case col4:
			display_lights = col_states[4];
 6e0:	80 91 23 01 	lds	r24, 0x0123
 6e4:	90 91 24 01 	lds	r25, 0x0124
 6e8:	a0 91 25 01 	lds	r26, 0x0125
 6ec:	b0 91 26 01 	lds	r27, 0x0126
 6f0:	80 93 3b 01 	sts	0x013B, r24
 6f4:	90 93 3c 01 	sts	0x013C, r25
 6f8:	a0 93 3d 01 	sts	0x013D, r26
 6fc:	b0 93 3e 01 	sts	0x013E, r27
			break;
 700:	08 95       	ret
			break;
		case col3_off:
			LED_State = col4;
			break;
		case col4:
			LED_State = col4_off;
 702:	8a e0       	ldi	r24, 0x0A	; 10
 704:	80 93 48 01 	sts	0x0148, r24
			break;
		case col3_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col4_off:
			display_lights = 0x00FFFFFFFF;
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	9f ef       	ldi	r25, 0xFF	; 255
 70c:	dc 01       	movw	r26, r24
 70e:	80 93 3b 01 	sts	0x013B, r24
 712:	90 93 3c 01 	sts	0x013C, r25
 716:	a0 93 3d 01 	sts	0x013D, r26
 71a:	b0 93 3e 01 	sts	0x013E, r27
			break;
 71e:	08 95       	ret
			break;
		case col4:
			LED_State = col4_off;
			break;
		case col4_off:
			LED_State = col5;
 720:	8b e0       	ldi	r24, 0x0B	; 11
 722:	80 93 48 01 	sts	0x0148, r24
			break;
		case col4:
			display_lights = col_states[4];
			break;
		case col5:
			display_lights = col_states[5];
 726:	80 91 27 01 	lds	r24, 0x0127
 72a:	90 91 28 01 	lds	r25, 0x0128
 72e:	a0 91 29 01 	lds	r26, 0x0129
 732:	b0 91 2a 01 	lds	r27, 0x012A
 736:	80 93 3b 01 	sts	0x013B, r24
 73a:	90 93 3c 01 	sts	0x013C, r25
 73e:	a0 93 3d 01 	sts	0x013D, r26
 742:	b0 93 3e 01 	sts	0x013E, r27
			break;
 746:	08 95       	ret
			break;
		case col4_off:
			LED_State = col5;
			break;
		case col5:
			LED_State = col5_off;
 748:	8c e0       	ldi	r24, 0x0C	; 12
 74a:	80 93 48 01 	sts	0x0148, r24
			break;
		case col4_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col5_off:
			display_lights = 0x00FFFFFFFF;
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	9f ef       	ldi	r25, 0xFF	; 255
 752:	dc 01       	movw	r26, r24
 754:	80 93 3b 01 	sts	0x013B, r24
 758:	90 93 3c 01 	sts	0x013C, r25
 75c:	a0 93 3d 01 	sts	0x013D, r26
 760:	b0 93 3e 01 	sts	0x013E, r27
			break;
 764:	08 95       	ret
			break;
		case col5:
			LED_State = col5_off;
			break;
		case col5_off:
			LED_State = col6;
 766:	8d e0       	ldi	r24, 0x0D	; 13
 768:	80 93 48 01 	sts	0x0148, r24
			break;
		case col5:
			display_lights = col_states[5];
			break;
		case col6:
			display_lights = col_states[6];
 76c:	80 91 2b 01 	lds	r24, 0x012B
 770:	90 91 2c 01 	lds	r25, 0x012C
 774:	a0 91 2d 01 	lds	r26, 0x012D
 778:	b0 91 2e 01 	lds	r27, 0x012E
 77c:	80 93 3b 01 	sts	0x013B, r24
 780:	90 93 3c 01 	sts	0x013C, r25
 784:	a0 93 3d 01 	sts	0x013D, r26
 788:	b0 93 3e 01 	sts	0x013E, r27
			break;
 78c:	08 95       	ret
			break;
		case col5_off:
			LED_State = col6;
			break;
		case col6:
			LED_State = col6_off;
 78e:	8e e0       	ldi	r24, 0x0E	; 14
 790:	80 93 48 01 	sts	0x0148, r24
			break;
		case col5_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col6_off:
			display_lights = 0x00FFFFFFFF;
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	dc 01       	movw	r26, r24
 79a:	80 93 3b 01 	sts	0x013B, r24
 79e:	90 93 3c 01 	sts	0x013C, r25
 7a2:	a0 93 3d 01 	sts	0x013D, r26
 7a6:	b0 93 3e 01 	sts	0x013E, r27
			break;
 7aa:	08 95       	ret
			break;
		case col6:
			LED_State = col6_off;
			break;
		case col6_off:
			LED_State = col7;
 7ac:	8f e0       	ldi	r24, 0x0F	; 15
 7ae:	80 93 48 01 	sts	0x0148, r24
			break;
		case col6:
			display_lights = col_states[6];
			break;
		case col7:
			display_lights = col_states[7];
 7b2:	80 91 2f 01 	lds	r24, 0x012F
 7b6:	90 91 30 01 	lds	r25, 0x0130
 7ba:	a0 91 31 01 	lds	r26, 0x0131
 7be:	b0 91 32 01 	lds	r27, 0x0132
 7c2:	80 93 3b 01 	sts	0x013B, r24
 7c6:	90 93 3c 01 	sts	0x013C, r25
 7ca:	a0 93 3d 01 	sts	0x013D, r26
 7ce:	b0 93 3e 01 	sts	0x013E, r27
			break;
 7d2:	08 95       	ret
			break;
		case col6_off:
			LED_State = col7;
			break;
		case col7:
			LED_State = col7_off;
 7d4:	80 e1       	ldi	r24, 0x10	; 16
 7d6:	80 93 48 01 	sts	0x0148, r24
			break;
		case col6_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col7_off:
			display_lights = 0x00FFFFFFFF;
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	dc 01       	movw	r26, r24
 7e0:	80 93 3b 01 	sts	0x013B, r24
 7e4:	90 93 3c 01 	sts	0x013C, r25
 7e8:	a0 93 3d 01 	sts	0x013D, r26
 7ec:	b0 93 3e 01 	sts	0x013E, r27
			break;
 7f0:	08 95       	ret
			break;
		case col7:
			LED_State = col7_off;
			break;
		case col7_off:
			LED_State = col0;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	80 93 48 01 	sts	0x0148, r24
			break;
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <LED_Matrix+0x234>
		default:
			LED_State = LED_Init;
 7fa:	10 92 48 01 	sts	0x0148, r1
 7fe:	08 95       	ret
	switch(LED_State)
	{
		case LED_Init:
			break;
		case col0:
			display_lights = col_states[0];
 800:	80 91 13 01 	lds	r24, 0x0113
 804:	90 91 14 01 	lds	r25, 0x0114
 808:	a0 91 15 01 	lds	r26, 0x0115
 80c:	b0 91 16 01 	lds	r27, 0x0116
 810:	80 93 3b 01 	sts	0x013B, r24
 814:	90 93 3c 01 	sts	0x013C, r25
 818:	a0 93 3d 01 	sts	0x013D, r26
 81c:	b0 93 3e 01 	sts	0x013E, r27
 820:	08 95       	ret

00000822 <Player_Cursor>:
signed long cursor_green_mask = 0x01010000;
signed long	cursor_blue_mask = 0x01000100;
unsigned char cursor_color = -1;
enum Cursor_States{Cursor_Init, Wait_For_Buttons, Up_State, Down_State, Left_State, Right_State} Cursor_State;
void Player_Cursor()
{
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
	//Transitions
	switch(Cursor_State)
 826:	80 91 49 01 	lds	r24, 0x0149
 82a:	82 30       	cpi	r24, 0x02	; 2
 82c:	09 f4       	brne	.+2      	; 0x830 <Player_Cursor+0xe>
 82e:	2e c1       	rjmp	.+604    	; 0xa8c <Player_Cursor+0x26a>
 830:	30 f4       	brcc	.+12     	; 0x83e <Player_Cursor+0x1c>
 832:	88 23       	and	r24, r24
 834:	69 f0       	breq	.+26     	; 0x850 <Player_Cursor+0x2e>
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	09 f4       	brne	.+2      	; 0x83c <Player_Cursor+0x1a>
 83a:	42 c0       	rjmp	.+132    	; 0x8c0 <Player_Cursor+0x9e>
 83c:	37 c1       	rjmp	.+622    	; 0xaac <Player_Cursor+0x28a>
 83e:	84 30       	cpi	r24, 0x04	; 4
 840:	09 f4       	brne	.+2      	; 0x844 <Player_Cursor+0x22>
 842:	14 c1       	rjmp	.+552    	; 0xa6c <Player_Cursor+0x24a>
 844:	08 f4       	brcc	.+2      	; 0x848 <Player_Cursor+0x26>
 846:	2a c1       	rjmp	.+596    	; 0xa9c <Player_Cursor+0x27a>
 848:	85 30       	cpi	r24, 0x05	; 5
 84a:	09 f4       	brne	.+2      	; 0x84e <Player_Cursor+0x2c>
 84c:	17 c1       	rjmp	.+558    	; 0xa7c <Player_Cursor+0x25a>
 84e:	2e c1       	rjmp	.+604    	; 0xaac <Player_Cursor+0x28a>
	{
		case Cursor_Init:
			if ((col_states[x] & cursor_green_mask) == 0x01000000)
 850:	e0 91 3a 01 	lds	r30, 0x013A
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31
 85e:	ed 5e       	subi	r30, 0xED	; 237
 860:	fe 4f       	sbci	r31, 0xFE	; 254
 862:	80 81       	ld	r24, Z
 864:	91 81       	ldd	r25, Z+1	; 0x01
 866:	a2 81       	ldd	r26, Z+2	; 0x02
 868:	b3 81       	ldd	r27, Z+3	; 0x03
 86a:	40 91 0d 01 	lds	r20, 0x010D
 86e:	50 91 0e 01 	lds	r21, 0x010E
 872:	60 91 0f 01 	lds	r22, 0x010F
 876:	70 91 10 01 	lds	r23, 0x0110
 87a:	48 23       	and	r20, r24
 87c:	59 23       	and	r21, r25
 87e:	6a 23       	and	r22, r26
 880:	7b 23       	and	r23, r27
 882:	41 15       	cp	r20, r1
 884:	51 05       	cpc	r21, r1
 886:	61 05       	cpc	r22, r1
 888:	71 40       	sbci	r23, 0x01	; 1
 88a:	19 f4       	brne	.+6      	; 0x892 <Player_Cursor+0x70>
			{
				cursor_color = GREEN_LIGHT;
 88c:	10 92 08 01 	sts	0x0108, r1
 890:	13 c0       	rjmp	.+38     	; 0x8b8 <Player_Cursor+0x96>
			}
			else if ((col_states[x] & cursor_blue_mask) == 0x01000000)
 892:	40 91 09 01 	lds	r20, 0x0109
 896:	50 91 0a 01 	lds	r21, 0x010A
 89a:	60 91 0b 01 	lds	r22, 0x010B
 89e:	70 91 0c 01 	lds	r23, 0x010C
 8a2:	84 23       	and	r24, r20
 8a4:	95 23       	and	r25, r21
 8a6:	a6 23       	and	r26, r22
 8a8:	b7 23       	and	r27, r23
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	a1 05       	cpc	r26, r1
 8ae:	b1 40       	sbci	r27, 0x01	; 1
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <Player_Cursor+0x96>
			{
				cursor_color = BLUE_LIGHT;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 93 08 01 	sts	0x0108, r24
			}
			Cursor_State = Wait_For_Buttons;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	80 93 49 01 	sts	0x0149, r24
			break;
 8be:	fd c0       	rjmp	.+506    	; 0xaba <Player_Cursor+0x298>
		case Wait_For_Buttons:
			if ((button & Left_Button) == 0x00)
 8c0:	80 91 41 01 	lds	r24, 0x0141
 8c4:	87 fd       	sbrc	r24, 7
 8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <Player_Cursor+0xbe>
			{
				if (x > 0)
 8c8:	80 91 3a 01 	lds	r24, 0x013A
 8cc:	88 23       	and	r24, r24
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <Player_Cursor+0xb0>
 8d0:	f4 c0       	rjmp	.+488    	; 0xaba <Player_Cursor+0x298>
				{
					Cursor_State = Left_State;
 8d2:	94 e0       	ldi	r25, 0x04	; 4
 8d4:	90 93 49 01 	sts	0x0149, r25
					--x;
 8d8:	81 50       	subi	r24, 0x01	; 1
 8da:	80 93 3a 01 	sts	0x013A, r24
 8de:	e9 c0       	rjmp	.+466    	; 0xab2 <Player_Cursor+0x290>
				}
			}
			else if ((button & Right_Button) == 0x00)
 8e0:	80 fd       	sbrc	r24, 0
 8e2:	0c c0       	rjmp	.+24     	; 0x8fc <Player_Cursor+0xda>
			{
				if (x < 7)
 8e4:	80 91 3a 01 	lds	r24, 0x013A
 8e8:	87 30       	cpi	r24, 0x07	; 7
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <Player_Cursor+0xcc>
 8ec:	e6 c0       	rjmp	.+460    	; 0xaba <Player_Cursor+0x298>
				{
					Cursor_State = Right_State;
 8ee:	95 e0       	ldi	r25, 0x05	; 5
 8f0:	90 93 49 01 	sts	0x0149, r25
					++x;
 8f4:	8f 5f       	subi	r24, 0xFF	; 255
 8f6:	80 93 3a 01 	sts	0x013A, r24
 8fa:	db c0       	rjmp	.+438    	; 0xab2 <Player_Cursor+0x290>
				}
			}
			else if ((button & Up_Button) == 0x00)
 8fc:	85 fd       	sbrc	r24, 5
 8fe:	58 c0       	rjmp	.+176    	; 0x9b0 <Player_Cursor+0x18e>
			{
				if (y < 0x80)
 900:	80 91 11 01 	lds	r24, 0x0111
 904:	90 91 12 01 	lds	r25, 0x0112
 908:	80 38       	cpi	r24, 0x80	; 128
 90a:	91 05       	cpc	r25, r1
 90c:	08 f0       	brcs	.+2      	; 0x910 <Player_Cursor+0xee>
 90e:	d5 c0       	rjmp	.+426    	; 0xaba <Player_Cursor+0x298>
				{
					y = y << 1;
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	90 93 12 01 	sts	0x0112, r25
 918:	80 93 11 01 	sts	0x0111, r24
					cursor_green_mask = ((cursor_green_mask & 0xFF00FFFF) | ((cursor_green_mask << 1) | 0x00010000)) | ((cursor_green_mask << 1) & 0xFF000000); 
 91c:	40 91 0d 01 	lds	r20, 0x010D
 920:	50 91 0e 01 	lds	r21, 0x010E
 924:	60 91 0f 01 	lds	r22, 0x010F
 928:	70 91 10 01 	lds	r23, 0x0110
 92c:	db 01       	movw	r26, r22
 92e:	ca 01       	movw	r24, r20
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	aa 1f       	adc	r26, r26
 936:	bb 1f       	adc	r27, r27
 938:	66 27       	eor	r22, r22
 93a:	48 2b       	or	r20, r24
 93c:	59 2b       	or	r21, r25
 93e:	6a 2b       	or	r22, r26
 940:	7b 2b       	or	r23, r27
 942:	61 60       	ori	r22, 0x01	; 1
 944:	88 27       	eor	r24, r24
 946:	99 27       	eor	r25, r25
 948:	aa 27       	eor	r26, r26
 94a:	84 2b       	or	r24, r20
 94c:	95 2b       	or	r25, r21
 94e:	a6 2b       	or	r26, r22
 950:	b7 2b       	or	r27, r23
 952:	80 93 0d 01 	sts	0x010D, r24
 956:	90 93 0e 01 	sts	0x010E, r25
 95a:	a0 93 0f 01 	sts	0x010F, r26
 95e:	b0 93 10 01 	sts	0x0110, r27
					cursor_blue_mask = ((cursor_blue_mask & 0xFFFF00FF) | ((cursor_blue_mask << 1) | 0x00000100)) | ((cursor_blue_mask << 1) & 0xFF000000); ;
 962:	40 91 09 01 	lds	r20, 0x0109
 966:	50 91 0a 01 	lds	r21, 0x010A
 96a:	60 91 0b 01 	lds	r22, 0x010B
 96e:	70 91 0c 01 	lds	r23, 0x010C
 972:	db 01       	movw	r26, r22
 974:	ca 01       	movw	r24, r20
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	aa 1f       	adc	r26, r26
 97c:	bb 1f       	adc	r27, r27
 97e:	55 27       	eor	r21, r21
 980:	48 2b       	or	r20, r24
 982:	59 2b       	or	r21, r25
 984:	6a 2b       	or	r22, r26
 986:	7b 2b       	or	r23, r27
 988:	51 60       	ori	r21, 0x01	; 1
 98a:	88 27       	eor	r24, r24
 98c:	99 27       	eor	r25, r25
 98e:	aa 27       	eor	r26, r26
 990:	84 2b       	or	r24, r20
 992:	95 2b       	or	r25, r21
 994:	a6 2b       	or	r26, r22
 996:	b7 2b       	or	r27, r23
 998:	80 93 09 01 	sts	0x0109, r24
 99c:	90 93 0a 01 	sts	0x010A, r25
 9a0:	a0 93 0b 01 	sts	0x010B, r26
 9a4:	b0 93 0c 01 	sts	0x010C, r27
					Cursor_State = Up_State;
 9a8:	82 e0       	ldi	r24, 0x02	; 2
 9aa:	80 93 49 01 	sts	0x0149, r24
 9ae:	99 c0       	rjmp	.+306    	; 0xae2 <Player_Cursor+0x2c0>
				}
			}
			else if ((button & Down_Button) == 0x00)
 9b0:	86 fd       	sbrc	r24, 6
 9b2:	83 c0       	rjmp	.+262    	; 0xaba <Player_Cursor+0x298>
			{
				if (y > 0x01)
 9b4:	80 91 11 01 	lds	r24, 0x0111
 9b8:	90 91 12 01 	lds	r25, 0x0112
 9bc:	82 30       	cpi	r24, 0x02	; 2
 9be:	91 05       	cpc	r25, r1
 9c0:	08 f4       	brcc	.+2      	; 0x9c4 <Player_Cursor+0x1a2>
 9c2:	7b c0       	rjmp	.+246    	; 0xaba <Player_Cursor+0x298>
				{
					Cursor_State = Down_State;
 9c4:	23 e0       	ldi	r18, 0x03	; 3
 9c6:	20 93 49 01 	sts	0x0149, r18
					y = y >> 1;
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	90 93 12 01 	sts	0x0112, r25
 9d2:	80 93 11 01 	sts	0x0111, r24
					cursor_green_mask = ((cursor_green_mask & 0xFF00FFFF) | ((cursor_green_mask >> 1) | 0x00800000)) | ((cursor_green_mask >> 1) & 0xFF000000);
 9d6:	80 91 0d 01 	lds	r24, 0x010D
 9da:	90 91 0e 01 	lds	r25, 0x010E
 9de:	a0 91 0f 01 	lds	r26, 0x010F
 9e2:	b0 91 10 01 	lds	r27, 0x0110
 9e6:	ac 01       	movw	r20, r24
 9e8:	bd 01       	movw	r22, r26
 9ea:	75 95       	asr	r23
 9ec:	67 95       	ror	r22
 9ee:	57 95       	ror	r21
 9f0:	47 95       	ror	r20
 9f2:	aa 27       	eor	r26, r26
 9f4:	84 2b       	or	r24, r20
 9f6:	95 2b       	or	r25, r21
 9f8:	a6 2b       	or	r26, r22
 9fa:	b7 2b       	or	r27, r23
 9fc:	a0 68       	ori	r26, 0x80	; 128
 9fe:	44 27       	eor	r20, r20
 a00:	55 27       	eor	r21, r21
 a02:	66 27       	eor	r22, r22
 a04:	84 2b       	or	r24, r20
 a06:	95 2b       	or	r25, r21
 a08:	a6 2b       	or	r26, r22
 a0a:	b7 2b       	or	r27, r23
 a0c:	80 93 0d 01 	sts	0x010D, r24
 a10:	90 93 0e 01 	sts	0x010E, r25
 a14:	a0 93 0f 01 	sts	0x010F, r26
 a18:	b0 93 10 01 	sts	0x0110, r27
					cursor_blue_mask = ((cursor_blue_mask & 0xFFFF00FF) | ((cursor_blue_mask >> 1) | 0x00008000)) | ((cursor_green_mask >> 1) & 0xFF000000);
 a1c:	40 91 09 01 	lds	r20, 0x0109
 a20:	50 91 0a 01 	lds	r21, 0x010A
 a24:	60 91 0b 01 	lds	r22, 0x010B
 a28:	70 91 0c 01 	lds	r23, 0x010C
 a2c:	8a 01       	movw	r16, r20
 a2e:	9b 01       	movw	r18, r22
 a30:	11 27       	eor	r17, r17
 a32:	75 95       	asr	r23
 a34:	67 95       	ror	r22
 a36:	57 95       	ror	r21
 a38:	47 95       	ror	r20
 a3a:	40 2b       	or	r20, r16
 a3c:	51 2b       	or	r21, r17
 a3e:	62 2b       	or	r22, r18
 a40:	73 2b       	or	r23, r19
 a42:	50 68       	ori	r21, 0x80	; 128
 a44:	b5 95       	asr	r27
 a46:	a7 95       	ror	r26
 a48:	97 95       	ror	r25
 a4a:	87 95       	ror	r24
 a4c:	88 27       	eor	r24, r24
 a4e:	99 27       	eor	r25, r25
 a50:	aa 27       	eor	r26, r26
 a52:	84 2b       	or	r24, r20
 a54:	95 2b       	or	r25, r21
 a56:	a6 2b       	or	r26, r22
 a58:	b7 2b       	or	r27, r23
 a5a:	80 93 09 01 	sts	0x0109, r24
 a5e:	90 93 0a 01 	sts	0x010A, r25
 a62:	a0 93 0b 01 	sts	0x010B, r26
 a66:	b0 93 0c 01 	sts	0x010C, r27
 a6a:	23 c0       	rjmp	.+70     	; 0xab2 <Player_Cursor+0x290>
			{
				Cursor_State = Wait_For_Buttons;
			}
			break;
		case Left_State:
			if ((button & Left_Button) != 0x00)
 a6c:	80 91 41 01 	lds	r24, 0x0141
 a70:	87 ff       	sbrs	r24, 7
 a72:	37 c0       	rjmp	.+110    	; 0xae2 <Player_Cursor+0x2c0>
			{
				Cursor_State = Wait_For_Buttons;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	80 93 49 01 	sts	0x0149, r24
 a7a:	1f c0       	rjmp	.+62     	; 0xaba <Player_Cursor+0x298>
			{
				Cursor_State = Left_State;
			}
			break;
		case Right_State:
			if ((button & Right_Button) == 0x00)
 a7c:	80 91 41 01 	lds	r24, 0x0141
 a80:	80 ff       	sbrs	r24, 0
 a82:	2f c0       	rjmp	.+94     	; 0xae2 <Player_Cursor+0x2c0>
			{
				Cursor_State = Right_State;
			}
			else
			{
				Cursor_State = Wait_For_Buttons;
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	80 93 49 01 	sts	0x0149, r24
 a8a:	17 c0       	rjmp	.+46     	; 0xaba <Player_Cursor+0x298>
			}
			break;
		case Up_State:
			if ((button & Up_Button) != 0x00)
 a8c:	80 91 41 01 	lds	r24, 0x0141
 a90:	85 ff       	sbrs	r24, 5
 a92:	27 c0       	rjmp	.+78     	; 0xae2 <Player_Cursor+0x2c0>
			{
				Cursor_State = Wait_For_Buttons;
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	80 93 49 01 	sts	0x0149, r24
 a9a:	0f c0       	rjmp	.+30     	; 0xaba <Player_Cursor+0x298>
			{
				Cursor_State = Up_State;
			}
			break;
		case Down_State:
			if ((button & Down_Button) != 0x00)
 a9c:	80 91 41 01 	lds	r24, 0x0141
 aa0:	86 ff       	sbrs	r24, 6
 aa2:	1f c0       	rjmp	.+62     	; 0xae2 <Player_Cursor+0x2c0>
			{
				Cursor_State = Wait_For_Buttons;
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	80 93 49 01 	sts	0x0149, r24
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <Player_Cursor+0x298>
			{
				Cursor_State = Down_State;
			}
			break;
		default:
			Cursor_State = Cursor_Init;
 aac:	10 92 49 01 	sts	0x0149, r1
			break;
 ab0:	18 c0       	rjmp	.+48     	; 0xae2 <Player_Cursor+0x2c0>
	}
	
	//Actions
	switch(Cursor_State)
 ab2:	80 91 49 01 	lds	r24, 0x0149
 ab6:	81 30       	cpi	r24, 0x01	; 1
 ab8:	a1 f4       	brne	.+40     	; 0xae2 <Player_Cursor+0x2c0>
	{
		case Cursor_Init:
			break;
		case Wait_For_Buttons:
			if (seed_randomize >= 10000)
 aba:	80 91 33 01 	lds	r24, 0x0133
 abe:	90 91 34 01 	lds	r25, 0x0134
 ac2:	80 31       	cpi	r24, 0x10	; 16
 ac4:	27 e2       	ldi	r18, 0x27	; 39
 ac6:	92 07       	cpc	r25, r18
 ac8:	3c f0       	brlt	.+14     	; 0xad8 <Player_Cursor+0x2b6>
			{
				//Restarts the seed to 1 for randomizing
				seed_randomize = 1;
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	90 93 34 01 	sts	0x0134, r25
 ad2:	80 93 33 01 	sts	0x0133, r24
 ad6:	05 c0       	rjmp	.+10     	; 0xae2 <Player_Cursor+0x2c0>
			}
			else
			{
				++seed_randomize;
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	90 93 34 01 	sts	0x0134, r25
 ade:	80 93 33 01 	sts	0x0133, r24
		case Down_State:
			break;
		default:
			break;
	}
}
 ae2:	1f 91       	pop	r17
 ae4:	0f 91       	pop	r16
 ae6:	08 95       	ret

00000ae8 <Cursor_blinking>:
unsigned short blink_count = 250;
enum Blink_States {Blink_Init, Light_On, Light_Off} Blink_State;
void Cursor_blinking()
{
	//Transitions
	switch(Blink_State)
 ae8:	80 91 4c 01 	lds	r24, 0x014C
 aec:	81 30       	cpi	r24, 0x01	; 1
 aee:	41 f0       	breq	.+16     	; 0xb00 <Cursor_blinking+0x18>
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <Cursor_blinking+0x10>
 af2:	82 30       	cpi	r24, 0x02	; 2
 af4:	01 f1       	breq	.+64     	; 0xb36 <Cursor_blinking+0x4e>
 af6:	3a c0       	rjmp	.+116    	; 0xb6c <Cursor_blinking+0x84>
	{
		case Blink_Init:
			Blink_State = Light_On;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	80 93 4c 01 	sts	0x014C, r24
			break;
 afe:	35 c1       	rjmp	.+618    	; 0xd6a <Cursor_blinking+0x282>
		case Light_On:
			if (blink_count <= 0)
 b00:	80 91 04 01 	lds	r24, 0x0104
 b04:	90 91 05 01 	lds	r25, 0x0105
 b08:	00 97       	sbiw	r24, 0x00	; 0
 b0a:	61 f4       	brne	.+24     	; 0xb24 <Cursor_blinking+0x3c>
			{
				blink_count = BLINK_TIME;
 b0c:	80 91 06 01 	lds	r24, 0x0106
 b10:	90 91 07 01 	lds	r25, 0x0107
 b14:	90 93 05 01 	sts	0x0105, r25
 b18:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_Off;
 b1c:	82 e0       	ldi	r24, 0x02	; 2
 b1e:	80 93 4c 01 	sts	0x014C, r24
 b22:	17 c1       	rjmp	.+558    	; 0xd52 <Cursor_blinking+0x26a>
			}
			else
			{
				--blink_count;
 b24:	01 97       	sbiw	r24, 0x01	; 1
 b26:	90 93 05 01 	sts	0x0105, r25
 b2a:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_On;
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	80 93 4c 01 	sts	0x014C, r24
 b34:	1a c1       	rjmp	.+564    	; 0xd6a <Cursor_blinking+0x282>
			}
			break;
		case Light_Off:
			if (blink_count <= 0)
 b36:	80 91 04 01 	lds	r24, 0x0104
 b3a:	90 91 05 01 	lds	r25, 0x0105
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	61 f4       	brne	.+24     	; 0xb5a <Cursor_blinking+0x72>
			{
				blink_count = BLINK_TIME;
 b42:	80 91 06 01 	lds	r24, 0x0106
 b46:	90 91 07 01 	lds	r25, 0x0107
 b4a:	90 93 05 01 	sts	0x0105, r25
 b4e:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_On;
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	80 93 4c 01 	sts	0x014C, r24
 b58:	08 c1       	rjmp	.+528    	; 0xd6a <Cursor_blinking+0x282>
			}
			else
			{
				--blink_count;
 b5a:	01 97       	sbiw	r24, 0x01	; 1
 b5c:	90 93 05 01 	sts	0x0105, r25
 b60:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_Off;
 b64:	82 e0       	ldi	r24, 0x02	; 2
 b66:	80 93 4c 01 	sts	0x014C, r24
 b6a:	f3 c0       	rjmp	.+486    	; 0xd52 <Cursor_blinking+0x26a>
			}
			break;
		default:
			Blink_State = Blink_Init;
 b6c:	10 92 4c 01 	sts	0x014C, r1
 b70:	08 95       	ret
		case Blink_Init:
			break;
		case Light_On:
			if (blink_count == BLINK_TIME)
			{
				if (cursor_color == GREEN_LIGHT)
 b72:	80 91 08 01 	lds	r24, 0x0108
 b76:	81 11       	cpse	r24, r1
 b78:	23 c0       	rjmp	.+70     	; 0xbc0 <Cursor_blinking+0xd8>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_green_mask & 0x00FFFFFF));
 b7a:	e0 91 3a 01 	lds	r30, 0x013A
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	ee 0f       	add	r30, r30
 b82:	ff 1f       	adc	r31, r31
 b84:	ee 0f       	add	r30, r30
 b86:	ff 1f       	adc	r31, r31
 b88:	ed 5e       	subi	r30, 0xED	; 237
 b8a:	fe 4f       	sbci	r31, 0xFE	; 254
 b8c:	40 81       	ld	r20, Z
 b8e:	51 81       	ldd	r21, Z+1	; 0x01
 b90:	62 81       	ldd	r22, Z+2	; 0x02
 b92:	73 81       	ldd	r23, Z+3	; 0x03
 b94:	80 91 0d 01 	lds	r24, 0x010D
 b98:	90 91 0e 01 	lds	r25, 0x010E
 b9c:	a0 91 0f 01 	lds	r26, 0x010F
 ba0:	b0 91 10 01 	lds	r27, 0x0110
 ba4:	80 95       	com	r24
 ba6:	90 95       	com	r25
 ba8:	a0 95       	com	r26
 baa:	b0 95       	com	r27
 bac:	bf 6f       	ori	r27, 0xFF	; 255
 bae:	84 23       	and	r24, r20
 bb0:	95 23       	and	r25, r21
 bb2:	a6 23       	and	r26, r22
 bb4:	b7 23       	and	r27, r23
 bb6:	80 83       	st	Z, r24
 bb8:	91 83       	std	Z+1, r25	; 0x01
 bba:	a2 83       	std	Z+2, r26	; 0x02
 bbc:	b3 83       	std	Z+3, r27	; 0x03
 bbe:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
 bc0:	81 30       	cpi	r24, 0x01	; 1
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <Cursor_blinking+0xde>
 bc4:	de c0       	rjmp	.+444    	; 0xd82 <Cursor_blinking+0x29a>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
 bc6:	e0 91 3a 01 	lds	r30, 0x013A
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	ed 5e       	subi	r30, 0xED	; 237
 bd6:	fe 4f       	sbci	r31, 0xFE	; 254
 bd8:	40 81       	ld	r20, Z
 bda:	51 81       	ldd	r21, Z+1	; 0x01
 bdc:	62 81       	ldd	r22, Z+2	; 0x02
 bde:	73 81       	ldd	r23, Z+3	; 0x03
 be0:	80 91 09 01 	lds	r24, 0x0109
 be4:	90 91 0a 01 	lds	r25, 0x010A
 be8:	a0 91 0b 01 	lds	r26, 0x010B
 bec:	b0 91 0c 01 	lds	r27, 0x010C
 bf0:	80 95       	com	r24
 bf2:	90 95       	com	r25
 bf4:	a0 95       	com	r26
 bf6:	b0 95       	com	r27
 bf8:	bf 6f       	ori	r27, 0xFF	; 255
 bfa:	84 23       	and	r24, r20
 bfc:	95 23       	and	r25, r21
 bfe:	a6 23       	and	r26, r22
 c00:	b7 23       	and	r27, r23
 c02:	80 83       	st	Z, r24
 c04:	91 83       	std	Z+1, r25	; 0x01
 c06:	a2 83       	std	Z+2, r26	; 0x02
 c08:	b3 83       	std	Z+3, r27	; 0x03
 c0a:	08 95       	ret
 c0c:	80 76       	andi	r24, 0x60	; 96
 c0e:	99 27       	eor	r25, r25
				}
			}
			break;
		case Light_Off:
			if ((button & Left_Button) == 0x00 || (button & Right_Button) == 0x00 || (button & Up_Button) == 0x00 || (button & Down_Button) == 0x00)
 c10:	80 36       	cpi	r24, 0x60	; 96
 c12:	91 05       	cpc	r25, r1
 c14:	09 f4       	brne	.+2      	; 0xc18 <Cursor_blinking+0x130>
 c16:	4d c0       	rjmp	.+154    	; 0xcb2 <Cursor_blinking+0x1ca>
			{
				if (cursor_color == GREEN_LIGHT)
 c18:	80 91 08 01 	lds	r24, 0x0108
 c1c:	81 11       	cpse	r24, r1
 c1e:	23 c0       	rjmp	.+70     	; 0xc66 <Cursor_blinking+0x17e>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_green_mask & 0x00FFFFFF));
 c20:	e0 91 3a 01 	lds	r30, 0x013A
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	ed 5e       	subi	r30, 0xED	; 237
 c30:	fe 4f       	sbci	r31, 0xFE	; 254
 c32:	40 81       	ld	r20, Z
 c34:	51 81       	ldd	r21, Z+1	; 0x01
 c36:	62 81       	ldd	r22, Z+2	; 0x02
 c38:	73 81       	ldd	r23, Z+3	; 0x03
 c3a:	80 91 0d 01 	lds	r24, 0x010D
 c3e:	90 91 0e 01 	lds	r25, 0x010E
 c42:	a0 91 0f 01 	lds	r26, 0x010F
 c46:	b0 91 10 01 	lds	r27, 0x0110
 c4a:	80 95       	com	r24
 c4c:	90 95       	com	r25
 c4e:	a0 95       	com	r26
 c50:	b0 95       	com	r27
 c52:	bf 6f       	ori	r27, 0xFF	; 255
 c54:	84 23       	and	r24, r20
 c56:	95 23       	and	r25, r21
 c58:	a6 23       	and	r26, r22
 c5a:	b7 23       	and	r27, r23
 c5c:	80 83       	st	Z, r24
 c5e:	91 83       	std	Z+1, r25	; 0x01
 c60:	a2 83       	std	Z+2, r26	; 0x02
 c62:	b3 83       	std	Z+3, r27	; 0x03
 c64:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
 c66:	81 30       	cpi	r24, 0x01	; 1
 c68:	09 f0       	breq	.+2      	; 0xc6c <Cursor_blinking+0x184>
 c6a:	8b c0       	rjmp	.+278    	; 0xd82 <Cursor_blinking+0x29a>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
 c6c:	e0 91 3a 01 	lds	r30, 0x013A
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	ee 0f       	add	r30, r30
 c74:	ff 1f       	adc	r31, r31
 c76:	ee 0f       	add	r30, r30
 c78:	ff 1f       	adc	r31, r31
 c7a:	ed 5e       	subi	r30, 0xED	; 237
 c7c:	fe 4f       	sbci	r31, 0xFE	; 254
 c7e:	40 81       	ld	r20, Z
 c80:	51 81       	ldd	r21, Z+1	; 0x01
 c82:	62 81       	ldd	r22, Z+2	; 0x02
 c84:	73 81       	ldd	r23, Z+3	; 0x03
 c86:	80 91 09 01 	lds	r24, 0x0109
 c8a:	90 91 0a 01 	lds	r25, 0x010A
 c8e:	a0 91 0b 01 	lds	r26, 0x010B
 c92:	b0 91 0c 01 	lds	r27, 0x010C
 c96:	80 95       	com	r24
 c98:	90 95       	com	r25
 c9a:	a0 95       	com	r26
 c9c:	b0 95       	com	r27
 c9e:	bf 6f       	ori	r27, 0xFF	; 255
 ca0:	84 23       	and	r24, r20
 ca2:	95 23       	and	r25, r21
 ca4:	a6 23       	and	r26, r22
 ca6:	b7 23       	and	r27, r23
 ca8:	80 83       	st	Z, r24
 caa:	91 83       	std	Z+1, r25	; 0x01
 cac:	a2 83       	std	Z+2, r26	; 0x02
 cae:	b3 83       	std	Z+3, r27	; 0x03
 cb0:	08 95       	ret
				}
			}
			else if (blink_count == BLINK_TIME)
 cb2:	20 91 04 01 	lds	r18, 0x0104
 cb6:	30 91 05 01 	lds	r19, 0x0105
 cba:	80 91 06 01 	lds	r24, 0x0106
 cbe:	90 91 07 01 	lds	r25, 0x0107
 cc2:	28 17       	cp	r18, r24
 cc4:	39 07       	cpc	r19, r25
 cc6:	09 f0       	breq	.+2      	; 0xcca <Cursor_blinking+0x1e2>
 cc8:	5c c0       	rjmp	.+184    	; 0xd82 <Cursor_blinking+0x29a>
			{
				if (cursor_color == GREEN_LIGHT)
 cca:	80 91 08 01 	lds	r24, 0x0108
 cce:	81 11       	cpse	r24, r1
 cd0:	1f c0       	rjmp	.+62     	; 0xd10 <Cursor_blinking+0x228>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] | (cursor_green_mask & 0x00FFFFFF));
 cd2:	e0 91 3a 01 	lds	r30, 0x013A
 cd6:	f0 e0       	ldi	r31, 0x00	; 0
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	ee 0f       	add	r30, r30
 cde:	ff 1f       	adc	r31, r31
 ce0:	ed 5e       	subi	r30, 0xED	; 237
 ce2:	fe 4f       	sbci	r31, 0xFE	; 254
 ce4:	40 81       	ld	r20, Z
 ce6:	51 81       	ldd	r21, Z+1	; 0x01
 ce8:	62 81       	ldd	r22, Z+2	; 0x02
 cea:	73 81       	ldd	r23, Z+3	; 0x03
 cec:	80 91 0d 01 	lds	r24, 0x010D
 cf0:	90 91 0e 01 	lds	r25, 0x010E
 cf4:	a0 91 0f 01 	lds	r26, 0x010F
 cf8:	b0 91 10 01 	lds	r27, 0x0110
 cfc:	bb 27       	eor	r27, r27
 cfe:	84 2b       	or	r24, r20
 d00:	95 2b       	or	r25, r21
 d02:	a6 2b       	or	r26, r22
 d04:	b7 2b       	or	r27, r23
 d06:	80 83       	st	Z, r24
 d08:	91 83       	std	Z+1, r25	; 0x01
 d0a:	a2 83       	std	Z+2, r26	; 0x02
 d0c:	b3 83       	std	Z+3, r27	; 0x03
 d0e:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
 d10:	81 30       	cpi	r24, 0x01	; 1
 d12:	b9 f5       	brne	.+110    	; 0xd82 <Cursor_blinking+0x29a>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] | (cursor_blue_mask & 0x00FFFFFF));
 d14:	e0 91 3a 01 	lds	r30, 0x013A
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	ee 0f       	add	r30, r30
 d1c:	ff 1f       	adc	r31, r31
 d1e:	ee 0f       	add	r30, r30
 d20:	ff 1f       	adc	r31, r31
 d22:	ed 5e       	subi	r30, 0xED	; 237
 d24:	fe 4f       	sbci	r31, 0xFE	; 254
 d26:	40 81       	ld	r20, Z
 d28:	51 81       	ldd	r21, Z+1	; 0x01
 d2a:	62 81       	ldd	r22, Z+2	; 0x02
 d2c:	73 81       	ldd	r23, Z+3	; 0x03
 d2e:	80 91 09 01 	lds	r24, 0x0109
 d32:	90 91 0a 01 	lds	r25, 0x010A
 d36:	a0 91 0b 01 	lds	r26, 0x010B
 d3a:	b0 91 0c 01 	lds	r27, 0x010C
 d3e:	bb 27       	eor	r27, r27
 d40:	84 2b       	or	r24, r20
 d42:	95 2b       	or	r25, r21
 d44:	a6 2b       	or	r26, r22
 d46:	b7 2b       	or	r27, r23
 d48:	80 83       	st	Z, r24
 d4a:	91 83       	std	Z+1, r25	; 0x01
 d4c:	a2 83       	std	Z+2, r26	; 0x02
 d4e:	b3 83       	std	Z+3, r27	; 0x03
 d50:	08 95       	ret
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
				}
			}
			break;
		case Light_Off:
			if ((button & Left_Button) == 0x00 || (button & Right_Button) == 0x00 || (button & Up_Button) == 0x00 || (button & Down_Button) == 0x00)
 d52:	80 91 41 01 	lds	r24, 0x0141
 d56:	90 91 42 01 	lds	r25, 0x0142
 d5a:	9c 01       	movw	r18, r24
 d5c:	21 78       	andi	r18, 0x81	; 129
 d5e:	33 27       	eor	r19, r19
 d60:	21 38       	cpi	r18, 0x81	; 129
 d62:	31 05       	cpc	r19, r1
 d64:	09 f0       	breq	.+2      	; 0xd68 <Cursor_blinking+0x280>
 d66:	58 cf       	rjmp	.-336    	; 0xc18 <Cursor_blinking+0x130>
 d68:	51 cf       	rjmp	.-350    	; 0xc0c <Cursor_blinking+0x124>
	switch(Blink_State)
	{
		case Blink_Init:
			break;
		case Light_On:
			if (blink_count == BLINK_TIME)
 d6a:	20 91 04 01 	lds	r18, 0x0104
 d6e:	30 91 05 01 	lds	r19, 0x0105
 d72:	80 91 06 01 	lds	r24, 0x0106
 d76:	90 91 07 01 	lds	r25, 0x0107
 d7a:	28 17       	cp	r18, r24
 d7c:	39 07       	cpc	r19, r25
 d7e:	09 f4       	brne	.+2      	; 0xd82 <Cursor_blinking+0x29a>
 d80:	f8 ce       	rjmp	.-528    	; 0xb72 <Cursor_blinking+0x8a>
 d82:	08 95       	ret

00000d84 <main>:
PS: Green mostly overpowers the other colors.
************************************************************************************/
int main(void)
{
	//DDRA = 0xFF; PORTA = 0x00;
	DDRB = 0xFF; PORTB = 0x00;
 d84:	8f ef       	ldi	r24, 0xFF	; 255
 d86:	84 b9       	out	0x04, r24	; 4
 d88:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xFE; PORTD = 0x01;
 d8a:	8e ef       	ldi	r24, 0xFE	; 254
 d8c:	8a b9       	out	0x0a, r24	; 10
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	8b b9       	out	0x0b, r24	; 11
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 d92:	81 e0       	ldi	r24, 0x01	; 1
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	a0 e0       	ldi	r26, 0x00	; 0
 d98:	b0 e0       	ldi	r27, 0x00	; 0
 d9a:	80 93 35 01 	sts	0x0135, r24
 d9e:	90 93 36 01 	sts	0x0136, r25
 da2:	a0 93 37 01 	sts	0x0137, r26
 da6:	b0 93 38 01 	sts	0x0138, r27
	_avr_timer_cntcurr = _avr_timer_M;
 daa:	80 93 43 01 	sts	0x0143, r24
 dae:	90 93 44 01 	sts	0x0144, r25
 db2:	a0 93 45 01 	sts	0x0145, r26
 db6:	b0 93 46 01 	sts	0x0146, r27
	//signed long lights = 0x0067BBDC;
	//unsigned char add = -1;
	//unsigned char LED = 0xFF;
	
	TimerSet(1);
	TimerOn();
 dba:	97 d9       	rcall	.-3282   	; 0xea <TimerOn>
	//int state = sm1_display;
	LED_State = LED_Init;
 dbc:	10 92 48 01 	sts	0x0148, r1
		
		IF GAME END
		state_of_game = 0;
		
		*/
		NES_Controller();
 dc0:	18 da       	rcall	.-3024   	; 0x1f2 <NES_Controller>
		if (state_of_game == 0)
 dc2:	80 91 3f 01 	lds	r24, 0x013F
 dc6:	90 91 40 01 	lds	r25, 0x0140
 dca:	89 2b       	or	r24, r25
 dcc:	11 f4       	brne	.+4      	; 0xdd2 <main+0x4e>
		{
			Starting_Game();
 dce:	ba db       	rcall	.-2188   	; 0x544 <Starting_Game>
 dd0:	0c c0       	rjmp	.+24     	; 0xdea <main+0x66>
		}
		else
		{
			LED_Matrix();
 dd2:	fc db       	rcall	.-2056   	; 0x5cc <LED_Matrix>
			Player_Cursor();
 dd4:	26 dd       	rcall	.-1460   	; 0x822 <Player_Cursor>
			Cursor_blinking();
 dd6:	88 de       	rcall	.-752    	; 0xae8 <Cursor_blinking>
			transmit_data(display_lights & 0xFFFFFFFF);
 dd8:	60 91 3b 01 	lds	r22, 0x013B
 ddc:	70 91 3c 01 	lds	r23, 0x013C
 de0:	80 91 3d 01 	lds	r24, 0x013D
 de4:	90 91 3e 01 	lds	r25, 0x013E
 de8:	e0 d9       	rcall	.-3136   	; 0x1aa <transmit_data>
		}
		while (!TimerFlag);
 dea:	80 91 47 01 	lds	r24, 0x0147
 dee:	88 23       	and	r24, r24
 df0:	e1 f3       	breq	.-8      	; 0xdea <main+0x66>
		TimerFlag = 0;
 df2:	10 92 47 01 	sts	0x0147, r1
		
	}
 df6:	e4 cf       	rjmp	.-56     	; 0xdc0 <main+0x3c>

00000df8 <__tablejump2__>:
 df8:	ee 0f       	add	r30, r30
 dfa:	ff 1f       	adc	r31, r31

00000dfc <__tablejump__>:
 dfc:	05 90       	lpm	r0, Z+
 dfe:	f4 91       	lpm	r31, Z
 e00:	e0 2d       	mov	r30, r0
 e02:	09 94       	ijmp

00000e04 <do_rand>:
 e04:	8f 92       	push	r8
 e06:	9f 92       	push	r9
 e08:	af 92       	push	r10
 e0a:	bf 92       	push	r11
 e0c:	cf 92       	push	r12
 e0e:	df 92       	push	r13
 e10:	ef 92       	push	r14
 e12:	ff 92       	push	r15
 e14:	cf 93       	push	r28
 e16:	df 93       	push	r29
 e18:	ec 01       	movw	r28, r24
 e1a:	68 81       	ld	r22, Y
 e1c:	79 81       	ldd	r23, Y+1	; 0x01
 e1e:	8a 81       	ldd	r24, Y+2	; 0x02
 e20:	9b 81       	ldd	r25, Y+3	; 0x03
 e22:	61 15       	cp	r22, r1
 e24:	71 05       	cpc	r23, r1
 e26:	81 05       	cpc	r24, r1
 e28:	91 05       	cpc	r25, r1
 e2a:	21 f4       	brne	.+8      	; 0xe34 <do_rand+0x30>
 e2c:	64 e2       	ldi	r22, 0x24	; 36
 e2e:	79 ed       	ldi	r23, 0xD9	; 217
 e30:	8b e5       	ldi	r24, 0x5B	; 91
 e32:	97 e0       	ldi	r25, 0x07	; 7
 e34:	2d e1       	ldi	r18, 0x1D	; 29
 e36:	33 ef       	ldi	r19, 0xF3	; 243
 e38:	41 e0       	ldi	r20, 0x01	; 1
 e3a:	50 e0       	ldi	r21, 0x00	; 0
 e3c:	3a d0       	rcall	.+116    	; 0xeb2 <__divmodsi4>
 e3e:	49 01       	movw	r8, r18
 e40:	5a 01       	movw	r10, r20
 e42:	9b 01       	movw	r18, r22
 e44:	ac 01       	movw	r20, r24
 e46:	a7 ea       	ldi	r26, 0xA7	; 167
 e48:	b1 e4       	ldi	r27, 0x41	; 65
 e4a:	4f d0       	rcall	.+158    	; 0xeea <__muluhisi3>
 e4c:	6b 01       	movw	r12, r22
 e4e:	7c 01       	movw	r14, r24
 e50:	ac ee       	ldi	r26, 0xEC	; 236
 e52:	b4 ef       	ldi	r27, 0xF4	; 244
 e54:	a5 01       	movw	r20, r10
 e56:	94 01       	movw	r18, r8
 e58:	54 d0       	rcall	.+168    	; 0xf02 <__mulohisi3>
 e5a:	c6 0e       	add	r12, r22
 e5c:	d7 1e       	adc	r13, r23
 e5e:	e8 1e       	adc	r14, r24
 e60:	f9 1e       	adc	r15, r25
 e62:	f7 fe       	sbrs	r15, 7
 e64:	06 c0       	rjmp	.+12     	; 0xe72 <do_rand+0x6e>
 e66:	81 e0       	ldi	r24, 0x01	; 1
 e68:	c8 1a       	sub	r12, r24
 e6a:	d1 08       	sbc	r13, r1
 e6c:	e1 08       	sbc	r14, r1
 e6e:	80 e8       	ldi	r24, 0x80	; 128
 e70:	f8 0a       	sbc	r15, r24
 e72:	c8 82       	st	Y, r12
 e74:	d9 82       	std	Y+1, r13	; 0x01
 e76:	ea 82       	std	Y+2, r14	; 0x02
 e78:	fb 82       	std	Y+3, r15	; 0x03
 e7a:	c6 01       	movw	r24, r12
 e7c:	9f 77       	andi	r25, 0x7F	; 127
 e7e:	df 91       	pop	r29
 e80:	cf 91       	pop	r28
 e82:	ff 90       	pop	r15
 e84:	ef 90       	pop	r14
 e86:	df 90       	pop	r13
 e88:	cf 90       	pop	r12
 e8a:	bf 90       	pop	r11
 e8c:	af 90       	pop	r10
 e8e:	9f 90       	pop	r9
 e90:	8f 90       	pop	r8
 e92:	08 95       	ret

00000e94 <rand_r>:
 e94:	b7 cf       	rjmp	.-146    	; 0xe04 <do_rand>

00000e96 <rand>:
 e96:	80 e0       	ldi	r24, 0x00	; 0
 e98:	91 e0       	ldi	r25, 0x01	; 1
 e9a:	b4 cf       	rjmp	.-152    	; 0xe04 <do_rand>

00000e9c <srand>:
 e9c:	a0 e0       	ldi	r26, 0x00	; 0
 e9e:	b0 e0       	ldi	r27, 0x00	; 0
 ea0:	80 93 00 01 	sts	0x0100, r24
 ea4:	90 93 01 01 	sts	0x0101, r25
 ea8:	a0 93 02 01 	sts	0x0102, r26
 eac:	b0 93 03 01 	sts	0x0103, r27
 eb0:	08 95       	ret

00000eb2 <__divmodsi4>:
 eb2:	05 2e       	mov	r0, r21
 eb4:	97 fb       	bst	r25, 7
 eb6:	16 f4       	brtc	.+4      	; 0xebc <__divmodsi4+0xa>
 eb8:	00 94       	com	r0
 eba:	0f d0       	rcall	.+30     	; 0xeda <__negsi2>
 ebc:	57 fd       	sbrc	r21, 7
 ebe:	05 d0       	rcall	.+10     	; 0xeca <__divmodsi4_neg2>
 ec0:	24 d0       	rcall	.+72     	; 0xf0a <__udivmodsi4>
 ec2:	07 fc       	sbrc	r0, 7
 ec4:	02 d0       	rcall	.+4      	; 0xeca <__divmodsi4_neg2>
 ec6:	46 f4       	brtc	.+16     	; 0xed8 <__divmodsi4_exit>
 ec8:	08 c0       	rjmp	.+16     	; 0xeda <__negsi2>

00000eca <__divmodsi4_neg2>:
 eca:	50 95       	com	r21
 ecc:	40 95       	com	r20
 ece:	30 95       	com	r19
 ed0:	21 95       	neg	r18
 ed2:	3f 4f       	sbci	r19, 0xFF	; 255
 ed4:	4f 4f       	sbci	r20, 0xFF	; 255
 ed6:	5f 4f       	sbci	r21, 0xFF	; 255

00000ed8 <__divmodsi4_exit>:
 ed8:	08 95       	ret

00000eda <__negsi2>:
 eda:	90 95       	com	r25
 edc:	80 95       	com	r24
 ede:	70 95       	com	r23
 ee0:	61 95       	neg	r22
 ee2:	7f 4f       	sbci	r23, 0xFF	; 255
 ee4:	8f 4f       	sbci	r24, 0xFF	; 255
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	08 95       	ret

00000eea <__muluhisi3>:
 eea:	31 d0       	rcall	.+98     	; 0xf4e <__umulhisi3>
 eec:	a5 9f       	mul	r26, r21
 eee:	90 0d       	add	r25, r0
 ef0:	b4 9f       	mul	r27, r20
 ef2:	90 0d       	add	r25, r0
 ef4:	a4 9f       	mul	r26, r20
 ef6:	80 0d       	add	r24, r0
 ef8:	91 1d       	adc	r25, r1
 efa:	11 24       	eor	r1, r1
 efc:	08 95       	ret

00000efe <__mulshisi3>:
 efe:	b7 ff       	sbrs	r27, 7
 f00:	f4 cf       	rjmp	.-24     	; 0xeea <__muluhisi3>

00000f02 <__mulohisi3>:
 f02:	f3 df       	rcall	.-26     	; 0xeea <__muluhisi3>
 f04:	82 1b       	sub	r24, r18
 f06:	93 0b       	sbc	r25, r19
 f08:	08 95       	ret

00000f0a <__udivmodsi4>:
 f0a:	a1 e2       	ldi	r26, 0x21	; 33
 f0c:	1a 2e       	mov	r1, r26
 f0e:	aa 1b       	sub	r26, r26
 f10:	bb 1b       	sub	r27, r27
 f12:	fd 01       	movw	r30, r26
 f14:	0d c0       	rjmp	.+26     	; 0xf30 <__udivmodsi4_ep>

00000f16 <__udivmodsi4_loop>:
 f16:	aa 1f       	adc	r26, r26
 f18:	bb 1f       	adc	r27, r27
 f1a:	ee 1f       	adc	r30, r30
 f1c:	ff 1f       	adc	r31, r31
 f1e:	a2 17       	cp	r26, r18
 f20:	b3 07       	cpc	r27, r19
 f22:	e4 07       	cpc	r30, r20
 f24:	f5 07       	cpc	r31, r21
 f26:	20 f0       	brcs	.+8      	; 0xf30 <__udivmodsi4_ep>
 f28:	a2 1b       	sub	r26, r18
 f2a:	b3 0b       	sbc	r27, r19
 f2c:	e4 0b       	sbc	r30, r20
 f2e:	f5 0b       	sbc	r31, r21

00000f30 <__udivmodsi4_ep>:
 f30:	66 1f       	adc	r22, r22
 f32:	77 1f       	adc	r23, r23
 f34:	88 1f       	adc	r24, r24
 f36:	99 1f       	adc	r25, r25
 f38:	1a 94       	dec	r1
 f3a:	69 f7       	brne	.-38     	; 0xf16 <__udivmodsi4_loop>
 f3c:	60 95       	com	r22
 f3e:	70 95       	com	r23
 f40:	80 95       	com	r24
 f42:	90 95       	com	r25
 f44:	9b 01       	movw	r18, r22
 f46:	ac 01       	movw	r20, r24
 f48:	bd 01       	movw	r22, r26
 f4a:	cf 01       	movw	r24, r30
 f4c:	08 95       	ret

00000f4e <__umulhisi3>:
 f4e:	a2 9f       	mul	r26, r18
 f50:	b0 01       	movw	r22, r0
 f52:	b3 9f       	mul	r27, r19
 f54:	c0 01       	movw	r24, r0
 f56:	a3 9f       	mul	r26, r19
 f58:	70 0d       	add	r23, r0
 f5a:	81 1d       	adc	r24, r1
 f5c:	11 24       	eor	r1, r1
 f5e:	91 1d       	adc	r25, r1
 f60:	b2 9f       	mul	r27, r18
 f62:	70 0d       	add	r23, r0
 f64:	81 1d       	adc	r24, r1
 f66:	11 24       	eor	r1, r1
 f68:	91 1d       	adc	r25, r1
 f6a:	08 95       	ret

00000f6c <_exit>:
 f6c:	f8 94       	cli

00000f6e <__stop_program>:
 f6e:	ff cf       	rjmp	.-2      	; 0xf6e <__stop_program>
