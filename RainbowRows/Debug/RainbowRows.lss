
RainbowRows.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001598  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080014e  0080014e  0000167a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b8  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000294  00000000  00000000  00001eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000872  00000000  00000000  0000217e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000589  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ff  00000000  00000000  0000313d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
       2:	00 00       	nop
       4:	73 c0       	rjmp	.+230    	; 0xec <__bad_interrupt>
       6:	00 00       	nop
       8:	71 c0       	rjmp	.+226    	; 0xec <__bad_interrupt>
       a:	00 00       	nop
       c:	6f c0       	rjmp	.+222    	; 0xec <__bad_interrupt>
       e:	00 00       	nop
      10:	6d c0       	rjmp	.+218    	; 0xec <__bad_interrupt>
      12:	00 00       	nop
      14:	6b c0       	rjmp	.+214    	; 0xec <__bad_interrupt>
      16:	00 00       	nop
      18:	69 c0       	rjmp	.+210    	; 0xec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	67 c0       	rjmp	.+206    	; 0xec <__bad_interrupt>
      1e:	00 00       	nop
      20:	65 c0       	rjmp	.+202    	; 0xec <__bad_interrupt>
      22:	00 00       	nop
      24:	63 c0       	rjmp	.+198    	; 0xec <__bad_interrupt>
      26:	00 00       	nop
      28:	61 c0       	rjmp	.+194    	; 0xec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5f c0       	rjmp	.+190    	; 0xec <__bad_interrupt>
      2e:	00 00       	nop
      30:	5d c0       	rjmp	.+186    	; 0xec <__bad_interrupt>
      32:	00 00       	nop
      34:	80 c0       	rjmp	.+256    	; 0x136 <__vector_13>
      36:	00 00       	nop
      38:	59 c0       	rjmp	.+178    	; 0xec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	57 c0       	rjmp	.+174    	; 0xec <__bad_interrupt>
      3e:	00 00       	nop
      40:	55 c0       	rjmp	.+170    	; 0xec <__bad_interrupt>
      42:	00 00       	nop
      44:	53 c0       	rjmp	.+166    	; 0xec <__bad_interrupt>
      46:	00 00       	nop
      48:	51 c0       	rjmp	.+162    	; 0xec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4f c0       	rjmp	.+158    	; 0xec <__bad_interrupt>
      4e:	00 00       	nop
      50:	4d c0       	rjmp	.+154    	; 0xec <__bad_interrupt>
      52:	00 00       	nop
      54:	4b c0       	rjmp	.+150    	; 0xec <__bad_interrupt>
      56:	00 00       	nop
      58:	49 c0       	rjmp	.+146    	; 0xec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	47 c0       	rjmp	.+142    	; 0xec <__bad_interrupt>
      5e:	00 00       	nop
      60:	45 c0       	rjmp	.+138    	; 0xec <__bad_interrupt>
      62:	00 00       	nop
      64:	43 c0       	rjmp	.+134    	; 0xec <__bad_interrupt>
      66:	00 00       	nop
      68:	41 c0       	rjmp	.+130    	; 0xec <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3f c0       	rjmp	.+126    	; 0xec <__bad_interrupt>
      6e:	00 00       	nop
      70:	3d c0       	rjmp	.+122    	; 0xec <__bad_interrupt>
      72:	00 00       	nop
      74:	3b c0       	rjmp	.+118    	; 0xec <__bad_interrupt>
      76:	00 00       	nop
      78:	39 c0       	rjmp	.+114    	; 0xec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	37 c0       	rjmp	.+110    	; 0xec <__bad_interrupt>
      7e:	00 00       	nop
      80:	35 c0       	rjmp	.+106    	; 0xec <__bad_interrupt>
      82:	00 00       	nop
      84:	33 c0       	rjmp	.+102    	; 0xec <__bad_interrupt>
      86:	00 00       	nop
      88:	31 c0       	rjmp	.+98     	; 0xec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 02       	muls	r31, r20
      8e:	f8 02       	muls	r31, r24
      90:	07 03       	mulsu	r16, r23
      92:	1b 03       	fmul	r17, r19
      94:	2a 03       	fmul	r18, r18
      96:	3e 03       	fmul	r19, r22
      98:	4d 03       	fmul	r20, r21
      9a:	61 03       	mulsu	r22, r17
      9c:	70 03       	mulsu	r23, r16
      9e:	84 03       	fmuls	r16, r20
      a0:	93 03       	fmuls	r17, r19
      a2:	a7 03       	fmuls	r18, r23
      a4:	b6 03       	fmuls	r19, r22
      a6:	ca 03       	fmulsu	r20, r18
      a8:	d9 03       	fmulsu	r21, r17
      aa:	ed 03       	fmulsu	r22, r21
      ac:	fc 03       	fmulsu	r23, r20

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d0 e4       	ldi	r29, 0x40	; 64
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e8 e9       	ldi	r30, 0x98	; 152
      c2:	f5 e1       	ldi	r31, 0x15	; 21
      c4:	00 e0       	ldi	r16, 0x00	; 0
      c6:	0b bf       	out	0x3b, r16	; 59
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
      ca:	07 90       	elpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	ae 34       	cpi	r26, 0x4E	; 78
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	ae e4       	ldi	r26, 0x4E	; 78
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a1 36       	cpi	r26, 0x61	; 97
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <main>
      e8:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_exit>

000000ec <__bad_interrupt>:
      ec:	89 cf       	rjmp	.-238    	; 0x0 <__vectors>

000000ee <TimerOn>:
	
	PORTC = column_val; // PORTA displays column pattern
	PORTA = column_sel; // PORTB selects column to display pattern

	return state;
}
      ee:	8b e0       	ldi	r24, 0x0B	; 11
      f0:	80 93 81 00 	sts	0x0081, r24
      f4:	8d e7       	ldi	r24, 0x7D	; 125
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 89 00 	sts	0x0089, r25
      fc:	80 93 88 00 	sts	0x0088, r24
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	80 93 6f 00 	sts	0x006F, r24
     106:	10 92 85 00 	sts	0x0085, r1
     10a:	10 92 84 00 	sts	0x0084, r1
     10e:	80 91 49 01 	lds	r24, 0x0149
     112:	90 91 4a 01 	lds	r25, 0x014A
     116:	a0 91 4b 01 	lds	r26, 0x014B
     11a:	b0 91 4c 01 	lds	r27, 0x014C
     11e:	80 93 57 01 	sts	0x0157, r24
     122:	90 93 58 01 	sts	0x0158, r25
     126:	a0 93 59 01 	sts	0x0159, r26
     12a:	b0 93 5a 01 	sts	0x015A, r27
     12e:	8f b7       	in	r24, 0x3f	; 63
     130:	80 68       	ori	r24, 0x80	; 128
     132:	8f bf       	out	0x3f, r24	; 63
     134:	08 95       	ret

00000136 <__vector_13>:
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
     144:	af 93       	push	r26
     146:	bf 93       	push	r27
     148:	80 91 57 01 	lds	r24, 0x0157
     14c:	90 91 58 01 	lds	r25, 0x0158
     150:	a0 91 59 01 	lds	r26, 0x0159
     154:	b0 91 5a 01 	lds	r27, 0x015A
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	a1 09       	sbc	r26, r1
     15c:	b1 09       	sbc	r27, r1
     15e:	80 93 57 01 	sts	0x0157, r24
     162:	90 93 58 01 	sts	0x0158, r25
     166:	a0 93 59 01 	sts	0x0159, r26
     16a:	b0 93 5a 01 	sts	0x015A, r27
     16e:	89 2b       	or	r24, r25
     170:	8a 2b       	or	r24, r26
     172:	8b 2b       	or	r24, r27
     174:	99 f4       	brne	.+38     	; 0x19c <__vector_13+0x66>
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 5b 01 	sts	0x015B, r24
     17c:	80 91 49 01 	lds	r24, 0x0149
     180:	90 91 4a 01 	lds	r25, 0x014A
     184:	a0 91 4b 01 	lds	r26, 0x014B
     188:	b0 91 4c 01 	lds	r27, 0x014C
     18c:	80 93 57 01 	sts	0x0157, r24
     190:	90 93 58 01 	sts	0x0158, r25
     194:	a0 93 59 01 	sts	0x0159, r26
     198:	b0 93 5a 01 	sts	0x015A, r27
     19c:	bf 91       	pop	r27
     19e:	af 91       	pop	r26
     1a0:	9f 91       	pop	r25
     1a2:	8f 91       	pop	r24
     1a4:	0f 90       	pop	r0
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	0f 90       	pop	r0
     1aa:	1f 90       	pop	r1
     1ac:	18 95       	reti

000001ae <NES_Controller>:
     1ae:	10 92 56 01 	sts	0x0156, r1
     1b2:	10 92 55 01 	sts	0x0155, r1
     1b6:	27 e0       	ldi	r18, 0x07	; 7
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <NES_Controller+0xe>
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	27 30       	cpi	r18, 0x07	; 7
     1be:	c9 f4       	brne	.+50     	; 0x1f2 <NES_Controller+0x44>
     1c0:	59 9a       	sbi	0x0b, 1	; 11
     1c2:	48 9b       	sbis	0x09, 0	; 9
     1c4:	0a c0       	rjmp	.+20     	; 0x1da <NES_Controller+0x2c>
     1c6:	80 91 55 01 	lds	r24, 0x0155
     1ca:	90 91 56 01 	lds	r25, 0x0156
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	90 93 56 01 	sts	0x0156, r25
     1d4:	80 93 55 01 	sts	0x0155, r24
     1d8:	0a c0       	rjmp	.+20     	; 0x1ee <NES_Controller+0x40>
     1da:	80 91 55 01 	lds	r24, 0x0155
     1de:	90 91 56 01 	lds	r25, 0x0156
     1e2:	8f 77       	andi	r24, 0x7F	; 127
     1e4:	99 27       	eor	r25, r25
     1e6:	90 93 56 01 	sts	0x0156, r25
     1ea:	80 93 55 01 	sts	0x0155, r24
     1ee:	1b b8       	out	0x0b, r1	; 11
     1f0:	e4 cf       	rjmp	.-56     	; 0x1ba <NES_Controller+0xc>
     1f2:	80 91 55 01 	lds	r24, 0x0155
     1f6:	90 91 56 01 	lds	r25, 0x0156
     1fa:	96 95       	lsr	r25
     1fc:	87 95       	ror	r24
     1fe:	90 93 56 01 	sts	0x0156, r25
     202:	80 93 55 01 	sts	0x0155, r24
     206:	5a 9a       	sbi	0x0b, 2	; 11
     208:	48 9b       	sbis	0x09, 0	; 9
     20a:	0a c0       	rjmp	.+20     	; 0x220 <NES_Controller+0x72>
     20c:	80 91 55 01 	lds	r24, 0x0155
     210:	90 91 56 01 	lds	r25, 0x0156
     214:	80 68       	ori	r24, 0x80	; 128
     216:	90 93 56 01 	sts	0x0156, r25
     21a:	80 93 55 01 	sts	0x0155, r24
     21e:	0a c0       	rjmp	.+20     	; 0x234 <NES_Controller+0x86>
     220:	80 91 55 01 	lds	r24, 0x0155
     224:	90 91 56 01 	lds	r25, 0x0156
     228:	8f 77       	andi	r24, 0x7F	; 127
     22a:	99 27       	eor	r25, r25
     22c:	90 93 56 01 	sts	0x0156, r25
     230:	80 93 55 01 	sts	0x0155, r24
     234:	1b b8       	out	0x0b, r1	; 11
     236:	21 11       	cpse	r18, r1
     238:	c0 cf       	rjmp	.-128    	; 0x1ba <NES_Controller+0xc>
     23a:	08 95       	ret

0000023c <transmit_data>:
     23c:	cf 92       	push	r12
     23e:	df 92       	push	r13
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	f5 b9       	out	0x05, r31	; 5
     24c:	e5 b1       	in	r30, 0x05	; 5
     24e:	6b 01       	movw	r12, r22
     250:	7c 01       	movw	r14, r24
     252:	02 2e       	mov	r0, r18
     254:	04 c0       	rjmp	.+8      	; 0x25e <transmit_data+0x22>
     256:	f5 94       	asr	r15
     258:	e7 94       	ror	r14
     25a:	d7 94       	ror	r13
     25c:	c7 94       	ror	r12
     25e:	0a 94       	dec	r0
     260:	d2 f7       	brpl	.-12     	; 0x256 <transmit_data+0x1a>
     262:	4c 2d       	mov	r20, r12
     264:	41 70       	andi	r20, 0x01	; 1
     266:	4e 2b       	or	r20, r30
     268:	45 b9       	out	0x05, r20	; 5
     26a:	29 9a       	sbi	0x05, 1	; 5
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	20 32       	cpi	r18, 0x20	; 32
     272:	31 05       	cpc	r19, r1
     274:	51 f7       	brne	.-44     	; 0x24a <transmit_data+0xe>
     276:	2a 9a       	sbi	0x05, 2	; 5
     278:	15 b8       	out	0x05, r1	; 5
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	08 95       	ret

00000284 <Init_LED>:
const unsigned char GREEN_LIGHT = 0;
const unsigned char BLUE_LIGHT = 1;

signed long col_states[8] = {0x01FFFFFF, 0x02FFFFFF, 0x04FFFFFF, 0x08FFFFFF, 0x10FFFFFF, 0x20FFFFFF, 0x40FFFFFF, 0x80FFFFFF};
void Init_LED()
{
     284:	2f 92       	push	r2
     286:	3f 92       	push	r3
     288:	4f 92       	push	r4
     28a:	5f 92       	push	r5
     28c:	6f 92       	push	r6
     28e:	7f 92       	push	r7
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	28 97       	sbiw	r28, 0x08	; 8
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
	//Restarts and initializes all the columns to their basic state.
	col_states[0] = 0x01FFFFFF;
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	9f ef       	ldi	r25, 0xFF	; 255
     2bc:	af ef       	ldi	r26, 0xFF	; 255
     2be:	b1 e0       	ldi	r27, 0x01	; 1
     2c0:	80 93 27 01 	sts	0x0127, r24
     2c4:	90 93 28 01 	sts	0x0128, r25
     2c8:	a0 93 29 01 	sts	0x0129, r26
     2cc:	b0 93 2a 01 	sts	0x012A, r27
	col_states[1] = 0x02FFFFFF;
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	9f ef       	ldi	r25, 0xFF	; 255
     2d4:	af ef       	ldi	r26, 0xFF	; 255
     2d6:	b2 e0       	ldi	r27, 0x02	; 2
     2d8:	80 93 2b 01 	sts	0x012B, r24
     2dc:	90 93 2c 01 	sts	0x012C, r25
     2e0:	a0 93 2d 01 	sts	0x012D, r26
     2e4:	b0 93 2e 01 	sts	0x012E, r27
	col_states[2] = 0x04FFFFFF;
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	9f ef       	ldi	r25, 0xFF	; 255
     2ec:	af ef       	ldi	r26, 0xFF	; 255
     2ee:	b4 e0       	ldi	r27, 0x04	; 4
     2f0:	80 93 2f 01 	sts	0x012F, r24
     2f4:	90 93 30 01 	sts	0x0130, r25
     2f8:	a0 93 31 01 	sts	0x0131, r26
     2fc:	b0 93 32 01 	sts	0x0132, r27
	col_states[3] = 0x08FFFFFF;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	9f ef       	ldi	r25, 0xFF	; 255
     304:	af ef       	ldi	r26, 0xFF	; 255
     306:	b8 e0       	ldi	r27, 0x08	; 8
     308:	80 93 33 01 	sts	0x0133, r24
     30c:	90 93 34 01 	sts	0x0134, r25
     310:	a0 93 35 01 	sts	0x0135, r26
     314:	b0 93 36 01 	sts	0x0136, r27
	col_states[4] = 0x10FFFFFF;
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	9f ef       	ldi	r25, 0xFF	; 255
     31c:	af ef       	ldi	r26, 0xFF	; 255
     31e:	b0 e1       	ldi	r27, 0x10	; 16
     320:	80 93 37 01 	sts	0x0137, r24
     324:	90 93 38 01 	sts	0x0138, r25
     328:	a0 93 39 01 	sts	0x0139, r26
     32c:	b0 93 3a 01 	sts	0x013A, r27
	col_states[5] = 0x20FFFFFF;
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	9f ef       	ldi	r25, 0xFF	; 255
     334:	af ef       	ldi	r26, 0xFF	; 255
     336:	b0 e2       	ldi	r27, 0x20	; 32
     338:	80 93 3b 01 	sts	0x013B, r24
     33c:	90 93 3c 01 	sts	0x013C, r25
     340:	a0 93 3d 01 	sts	0x013D, r26
     344:	b0 93 3e 01 	sts	0x013E, r27
	col_states[6] = 0x40FFFFFF;
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	9f ef       	ldi	r25, 0xFF	; 255
     34c:	af ef       	ldi	r26, 0xFF	; 255
     34e:	b0 e4       	ldi	r27, 0x40	; 64
     350:	80 93 3f 01 	sts	0x013F, r24
     354:	90 93 40 01 	sts	0x0140, r25
     358:	a0 93 41 01 	sts	0x0141, r26
     35c:	b0 93 42 01 	sts	0x0142, r27
	col_states[7] = 0x80FFFFFF;
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f ef       	ldi	r25, 0xFF	; 255
     364:	af ef       	ldi	r26, 0xFF	; 255
     366:	b0 e8       	ldi	r27, 0x80	; 128
     368:	80 93 43 01 	sts	0x0143, r24
     36c:	90 93 44 01 	sts	0x0144, r25
     370:	a0 93 45 01 	sts	0x0145, r26
     374:	b0 93 46 01 	sts	0x0146, r27
     378:	0f 2e       	mov	r0, r31
     37a:	f7 e2       	ldi	r31, 0x27	; 39
     37c:	2f 2e       	mov	r2, r31
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	3f 2e       	mov	r3, r31
     382:	f0 2d       	mov	r31, r0
	//This variable is initialized as an LED with all columns and rows turned off except the first column.
	signed long var_init_LED = 0x01FFFFFF;
     384:	2f ef       	ldi	r18, 0xFF	; 255
     386:	3f ef       	ldi	r19, 0xFF	; 255
     388:	4f ef       	ldi	r20, 0xFF	; 255
     38a:	51 e0       	ldi	r21, 0x01	; 1
     38c:	29 83       	std	Y+1, r18	; 0x01
     38e:	3a 83       	std	Y+2, r19	; 0x02
     390:	4b 83       	std	Y+3, r20	; 0x03
     392:	5c 83       	std	Y+4, r21	; 0x04
	//The following variables are initialized to which bits would be Red, Green, or Blue.
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
	signed long blue_mask = 0x01FFFEFF;
     394:	0f 2e       	mov	r0, r31
     396:	88 24       	eor	r8, r8
     398:	8a 94       	dec	r8
     39a:	fe ef       	ldi	r31, 0xFE	; 254
     39c:	9f 2e       	mov	r9, r31
     39e:	a8 2c       	mov	r10, r8
     3a0:	bb 24       	eor	r11, r11
     3a2:	b3 94       	inc	r11
     3a4:	f0 2d       	mov	r31, r0
	col_states[7] = 0x80FFFFFF;
	//This variable is initialized as an LED with all columns and rows turned off except the first column.
	signed long var_init_LED = 0x01FFFFFF;
	//The following variables are initialized to which bits would be Red, Green, or Blue.
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
     3a6:	0f 2e       	mov	r0, r31
     3a8:	cc 24       	eor	r12, r12
     3aa:	ca 94       	dec	r12
     3ac:	dc 2c       	mov	r13, r12
     3ae:	fe ef       	ldi	r31, 0xFE	; 254
     3b0:	ef 2e       	mov	r14, r31
     3b2:	ff 24       	eor	r15, r15
     3b4:	f3 94       	inc	r15
     3b6:	f0 2d       	mov	r31, r0
     3b8:	97 c0       	rjmp	.+302    	; 0x4e8 <Init_LED+0x264>
	for (unsigned char i = 0; i < 8; ++i)
	{
		for (unsigned char j = 0; j < 8; ++j)
		{
			//var_init_LED
			if (seed_randomize >= 10000)
     3ba:	80 91 47 01 	lds	r24, 0x0147
     3be:	90 91 48 01 	lds	r25, 0x0148
     3c2:	80 31       	cpi	r24, 0x10	; 16
     3c4:	37 e2       	ldi	r19, 0x27	; 39
     3c6:	93 07       	cpc	r25, r19
     3c8:	3c f0       	brlt	.+14     	; 0x3d8 <Init_LED+0x154>
			{
				seed_randomize = 1;
     3ca:	41 e0       	ldi	r20, 0x01	; 1
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	50 93 48 01 	sts	0x0148, r21
     3d2:	40 93 47 01 	sts	0x0147, r20
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <Init_LED+0x15e>
			}
			else
			{
				++seed_randomize;
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	90 93 48 01 	sts	0x0148, r25
     3de:	80 93 47 01 	sts	0x0147, r24
			//1 - blue.
			//If red was used, 0 1 and 2 would be generated. 
			//0 - red
			//1 - green
			//2 - blue
			rand_num = rand() % 2;
     3e2:	0e 94 5f 0a 	call	0x14be	; 0x14be <rand>
     3e6:	81 70       	andi	r24, 0x01	; 1
     3e8:	90 78       	andi	r25, 0x80	; 128
     3ea:	99 23       	and	r25, r25
     3ec:	24 f4       	brge	.+8      	; 0x3f6 <Init_LED+0x172>
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	8e 6f       	ori	r24, 0xFE	; 254
     3f2:	9f 6f       	ori	r25, 0xFF	; 255
     3f4:	01 96       	adiw	r24, 0x01	; 1
		//The Red mask would be used if the red color was used in the game.
		//	if (rand_num == RED_LIGHT)
		//	{
		//		col_states[i] = var_init_LED & (col_states[i] & red_mask);
		//	}
			if (rand_num == GREEN_LIGHT)
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	b9 f4       	brne	.+46     	; 0x428 <Init_LED+0x1a4>
			{
				col_states[i] = var_init_LED & (col_states[i] & green_mask);
     3fa:	ef 81       	ldd	r30, Y+7	; 0x07
     3fc:	f8 85       	ldd	r31, Y+8	; 0x08
     3fe:	80 81       	ld	r24, Z
     400:	91 81       	ldd	r25, Z+1	; 0x01
     402:	a2 81       	ldd	r26, Z+2	; 0x02
     404:	b3 81       	ldd	r27, Z+3	; 0x03
     406:	29 81       	ldd	r18, Y+1	; 0x01
     408:	3a 81       	ldd	r19, Y+2	; 0x02
     40a:	4b 81       	ldd	r20, Y+3	; 0x03
     40c:	5c 81       	ldd	r21, Y+4	; 0x04
     40e:	82 23       	and	r24, r18
     410:	93 23       	and	r25, r19
     412:	a4 23       	and	r26, r20
     414:	b5 23       	and	r27, r21
     416:	8c 21       	and	r24, r12
     418:	9d 21       	and	r25, r13
     41a:	ae 21       	and	r26, r14
     41c:	bf 21       	and	r27, r15
     41e:	80 83       	st	Z, r24
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	a2 83       	std	Z+2, r26	; 0x02
     424:	b3 83       	std	Z+3, r27	; 0x03
     426:	18 c0       	rjmp	.+48     	; 0x458 <Init_LED+0x1d4>
			}
			else if (rand_num == BLUE_LIGHT)
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	b1 f4       	brne	.+44     	; 0x458 <Init_LED+0x1d4>
			{
				col_states[i] = var_init_LED & (col_states[i] & blue_mask);
     42c:	ef 81       	ldd	r30, Y+7	; 0x07
     42e:	f8 85       	ldd	r31, Y+8	; 0x08
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	a2 81       	ldd	r26, Z+2	; 0x02
     436:	b3 81       	ldd	r27, Z+3	; 0x03
     438:	29 81       	ldd	r18, Y+1	; 0x01
     43a:	3a 81       	ldd	r19, Y+2	; 0x02
     43c:	4b 81       	ldd	r20, Y+3	; 0x03
     43e:	5c 81       	ldd	r21, Y+4	; 0x04
     440:	82 23       	and	r24, r18
     442:	93 23       	and	r25, r19
     444:	a4 23       	and	r26, r20
     446:	b5 23       	and	r27, r21
     448:	88 21       	and	r24, r8
     44a:	99 21       	and	r25, r9
     44c:	aa 21       	and	r26, r10
     44e:	bb 21       	and	r27, r11
     450:	80 83       	st	Z, r24
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	a2 83       	std	Z+2, r26	; 0x02
     456:	b3 83       	std	Z+3, r27	; 0x03
			}
			
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
     458:	8d 81       	ldd	r24, Y+5	; 0x05
     45a:	90 2f       	mov	r25, r16
     45c:	a1 2f       	mov	r26, r17
     45e:	b2 2d       	mov	r27, r2
     460:	cc 0c       	add	r12, r12
     462:	dd 1c       	adc	r13, r13
     464:	ee 1c       	adc	r14, r14
     466:	ff 1c       	adc	r15, r15
     468:	e8 94       	clt
     46a:	c0 f8       	bld	r12, 0
     46c:	ff 24       	eor	r15, r15
     46e:	c4 28       	or	r12, r4
     470:	d5 28       	or	r13, r5
     472:	e6 28       	or	r14, r6
     474:	f7 28       	or	r15, r7
			blue_mask = (var_init_LED & 0xFF000000) | (((blue_mask << 1) | 0x00000001) & 0x00FFFFFF);
     476:	88 0c       	add	r8, r8
     478:	99 1c       	adc	r9, r9
     47a:	aa 1c       	adc	r10, r10
     47c:	bb 1c       	adc	r11, r11
     47e:	e8 94       	clt
     480:	80 f8       	bld	r8, 0
     482:	bb 24       	eor	r11, r11
     484:	84 28       	or	r8, r4
     486:	95 28       	or	r9, r5
     488:	a6 28       	or	r10, r6
     48a:	b7 28       	or	r11, r7
     48c:	3a 94       	dec	r3
	signed long blue_mask = 0x01FFFEFF;
	signed short rand_num = 0;
	
	for (unsigned char i = 0; i < 8; ++i)
	{
		for (unsigned char j = 0; j < 8; ++j)
     48e:	09 f0       	breq	.+2      	; 0x492 <Init_LED+0x20e>
     490:	94 cf       	rjmp	.-216    	; 0x3ba <Init_LED+0x136>
     492:	2f 80       	ldd	r2, Y+7	; 0x07
     494:	38 84       	ldd	r3, Y+8	; 0x08
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
			blue_mask = (var_init_LED & 0xFF000000) | (((blue_mask << 1) | 0x00000001) & 0x00FFFFFF);
		}
		var_init_LED = ((var_init_LED & 0xFF000000) << 1) | 0x00FFFFFF;
     496:	88 27       	eor	r24, r24
     498:	99 27       	eor	r25, r25
     49a:	aa 27       	eor	r26, r26
     49c:	4c 01       	movw	r8, r24
     49e:	5d 01       	movw	r10, r26
     4a0:	88 0c       	add	r8, r8
     4a2:	99 1c       	adc	r9, r9
     4a4:	aa 1c       	adc	r10, r10
     4a6:	bb 1c       	adc	r11, r11
     4a8:	a5 01       	movw	r20, r10
     4aa:	94 01       	movw	r18, r8
     4ac:	2f 6f       	ori	r18, 0xFF	; 255
     4ae:	3f 6f       	ori	r19, 0xFF	; 255
     4b0:	4f 6f       	ori	r20, 0xFF	; 255
     4b2:	29 83       	std	Y+1, r18	; 0x01
     4b4:	3a 83       	std	Y+2, r19	; 0x02
     4b6:	4b 83       	std	Y+3, r20	; 0x03
     4b8:	5c 83       	std	Y+4, r21	; 0x04
		
	//The Red mask would be used if the red color was used in the game.
	//	red_mask = (var_init_LED & 0xFF000000) | 0x00FFFFFE;
		green_mask = (var_init_LED & 0xFF000000) | 0x00FEFFFF;
     4ba:	88 24       	eor	r8, r8
     4bc:	99 24       	eor	r9, r9
     4be:	aa 24       	eor	r10, r10
     4c0:	75 01       	movw	r14, r10
     4c2:	64 01       	movw	r12, r8
     4c4:	cc 24       	eor	r12, r12
     4c6:	ca 94       	dec	r12
     4c8:	dc 2c       	mov	r13, r12
     4ca:	3e ef       	ldi	r19, 0xFE	; 254
     4cc:	e3 2a       	or	r14, r19
		blue_mask = (var_init_LED & 0xFF000000) | 0x00FFFEFF;
     4ce:	88 24       	eor	r8, r8
     4d0:	8a 94       	dec	r8
     4d2:	4e ef       	ldi	r20, 0xFE	; 254
     4d4:	94 2a       	or	r9, r20
     4d6:	a8 2c       	mov	r10, r8
     4d8:	54 e0       	ldi	r21, 0x04	; 4
     4da:	25 0e       	add	r2, r21
     4dc:	31 1c       	adc	r3, r1
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
	signed long blue_mask = 0x01FFFEFF;
	signed short rand_num = 0;
	
	for (unsigned char i = 0; i < 8; ++i)
     4de:	87 e4       	ldi	r24, 0x47	; 71
     4e0:	28 16       	cp	r2, r24
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	38 06       	cpc	r3, r24
     4e6:	c1 f0       	breq	.+48     	; 0x518 <Init_LED+0x294>
const unsigned char GREEN_LIGHT = 0;
const unsigned char BLUE_LIGHT = 1;

signed long col_states[8] = {0x01FFFFFF, 0x02FFFFFF, 0x04FFFFFF, 0x08FFFFFF, 0x10FFFFFF, 0x20FFFFFF, 0x40FFFFFF, 0x80FFFFFF};
void Init_LED()
{
     4e8:	98 e0       	ldi	r25, 0x08	; 8
     4ea:	9e 83       	std	Y+6, r25	; 0x06
				col_states[i] = var_init_LED & (col_states[i] & blue_mask);
			}
			
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
     4ec:	a9 81       	ldd	r26, Y+1	; 0x01
     4ee:	ad 83       	std	Y+5, r26	; 0x05
     4f0:	0a 81       	ldd	r16, Y+2	; 0x02
     4f2:	1b 81       	ldd	r17, Y+3	; 0x03
     4f4:	bc 81       	ldd	r27, Y+4	; 0x04
     4f6:	49 80       	ldd	r4, Y+1	; 0x01
     4f8:	5a 80       	ldd	r5, Y+2	; 0x02
     4fa:	6b 80       	ldd	r6, Y+3	; 0x03
     4fc:	7c 80       	ldd	r7, Y+4	; 0x04
     4fe:	44 24       	eor	r4, r4
     500:	55 24       	eor	r5, r5
     502:	66 24       	eor	r6, r6
     504:	68 94       	set
     506:	40 f8       	bld	r4, 0
     508:	c1 01       	movw	r24, r2
     50a:	68 94       	set
     50c:	33 24       	eor	r3, r3
     50e:	33 f8       	bld	r3, 3
     510:	98 87       	std	Y+8, r25	; 0x08
     512:	8f 83       	std	Y+7, r24	; 0x07
     514:	2b 2e       	mov	r2, r27
     516:	51 cf       	rjmp	.-350    	; 0x3ba <Init_LED+0x136>
	//The Red mask would be used if the red color was used in the game.
	//	red_mask = (var_init_LED & 0xFF000000) | 0x00FFFFFE;
		green_mask = (var_init_LED & 0xFF000000) | 0x00FEFFFF;
		blue_mask = (var_init_LED & 0xFF000000) | 0x00FFFEFF;
	}
}
     518:	28 96       	adiw	r28, 0x08	; 8
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	bf 90       	pop	r11
     536:	af 90       	pop	r10
     538:	9f 90       	pop	r9
     53a:	8f 90       	pop	r8
     53c:	7f 90       	pop	r7
     53e:	6f 90       	pop	r6
     540:	5f 90       	pop	r5
     542:	4f 90       	pop	r4
     544:	3f 90       	pop	r3
     546:	2f 90       	pop	r2
     548:	08 95       	ret

0000054a <Starting_Game>:
//It will only change to 1 if the user pushes start at the beginning.
unsigned short state_of_game = 0;
void Starting_Game()
{
	//Transitions
	switch(Game_State)
     54a:	80 91 5f 01 	lds	r24, 0x015F
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	41 f0       	breq	.+16     	; 0x562 <Starting_Game+0x18>
     552:	18 f0       	brcs	.+6      	; 0x55a <Starting_Game+0x10>
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	89 f1       	breq	.+98     	; 0x5ba <Starting_Game+0x70>
     558:	39 c0       	rjmp	.+114    	; 0x5cc <Starting_Game+0x82>
	{
		case Game_Init:
			Game_State = Game_Wait;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 5f 01 	sts	0x015F, r24
			break;
     560:	08 95       	ret
		case Game_Wait:
			if (seed_randomize >= 10000)
     562:	80 91 47 01 	lds	r24, 0x0147
     566:	90 91 48 01 	lds	r25, 0x0148
     56a:	80 31       	cpi	r24, 0x10	; 16
     56c:	27 e2       	ldi	r18, 0x27	; 39
     56e:	92 07       	cpc	r25, r18
     570:	3c f0       	brlt	.+14     	; 0x580 <Starting_Game+0x36>
			{
				seed_randomize = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	90 93 48 01 	sts	0x0148, r25
     57a:	80 93 47 01 	sts	0x0147, r24
     57e:	05 c0       	rjmp	.+10     	; 0x58a <Starting_Game+0x40>
			}
			else
			{
				++seed_randomize;
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	90 93 48 01 	sts	0x0148, r25
     586:	80 93 47 01 	sts	0x0147, r24
			}
			if ((button & Start_Button) == 0x00)
     58a:	80 91 55 01 	lds	r24, 0x0155
     58e:	84 fd       	sbrc	r24, 4
     590:	10 c0       	rjmp	.+32     	; 0x5b2 <Starting_Game+0x68>
			{
				//Here comes the exciting part
				state_of_game = 1;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 54 01 	sts	0x0154, r25
     59a:	80 93 53 01 	sts	0x0153, r24
				//Initializes the seed for the random.
				srand(seed_randomize);
     59e:	80 91 47 01 	lds	r24, 0x0147
     5a2:	90 91 48 01 	lds	r25, 0x0148
     5a6:	8e d7       	rcall	.+3868   	; 0x14c4 <srand>
				Init_LED();
     5a8:	6d de       	rcall	.-806    	; 0x284 <Init_LED>
				Game_State = Game_Start;
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	80 93 5f 01 	sts	0x015F, r24
     5b0:	08 95       	ret
			}
			else
			{
				Game_State = Game_Wait;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 5f 01 	sts	0x015F, r24
     5b8:	08 95       	ret
			}
			break;
		case Game_Start:
			if (state_of_game == 0)
     5ba:	80 91 53 01 	lds	r24, 0x0153
     5be:	90 91 54 01 	lds	r25, 0x0154
     5c2:	89 2b       	or	r24, r25
     5c4:	29 f4       	brne	.+10     	; 0x5d0 <Starting_Game+0x86>
			{
				Game_State = Game_Init;
     5c6:	10 92 5f 01 	sts	0x015F, r1
     5ca:	08 95       	ret
			}
			break;
		default:
			Game_State = Game_Init;
     5cc:	10 92 5f 01 	sts	0x015F, r1
     5d0:	08 95       	ret

000005d2 <LED_Matrix>:
	
void LED_Matrix()
{
	//Transitions
	//Goes from state column on, to column off, to the next column on. The cycle continues.
	switch(LED_State)
     5d2:	80 91 5c 01 	lds	r24, 0x015C
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	81 31       	cpi	r24, 0x11	; 17
     5da:	91 05       	cpc	r25, r1
     5dc:	08 f0       	brcs	.+2      	; 0x5e0 <LED_Matrix+0xe>
     5de:	10 c1       	rjmp	.+544    	; 0x800 <LED_Matrix+0x22e>
     5e0:	fc 01       	movw	r30, r24
     5e2:	ea 5b       	subi	r30, 0xBA	; 186
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	1c c7       	rjmp	.+3640   	; 0x1420 <__tablejump2__>
	{
		case LED_Init:
			LED_State = col0;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	80 93 5c 01 	sts	0x015C, r24
			break;
     5ee:	0b c1       	rjmp	.+534    	; 0x806 <LED_Matrix+0x234>
		case col0:
			LED_State = col0_off;
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	80 93 5c 01 	sts	0x015C, r24
			display_lights = col_states[7];
			break;
			
		//Turns column of the LED's off.
		case col0_off:
			display_lights = 0x00FFFFFFFF;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	9f ef       	ldi	r25, 0xFF	; 255
     5fa:	dc 01       	movw	r26, r24
     5fc:	80 93 4f 01 	sts	0x014F, r24
     600:	90 93 50 01 	sts	0x0150, r25
     604:	a0 93 51 01 	sts	0x0151, r26
     608:	b0 93 52 01 	sts	0x0152, r27
			break;
     60c:	08 95       	ret
			break;
		case col0:
			LED_State = col0_off;
			break;
		case col0_off:
			LED_State = col1;
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col0:
			display_lights = col_states[0];
			break;
		case col1:
			display_lights = col_states[1];
     614:	80 91 2b 01 	lds	r24, 0x012B
     618:	90 91 2c 01 	lds	r25, 0x012C
     61c:	a0 91 2d 01 	lds	r26, 0x012D
     620:	b0 91 2e 01 	lds	r27, 0x012E
     624:	80 93 4f 01 	sts	0x014F, r24
     628:	90 93 50 01 	sts	0x0150, r25
     62c:	a0 93 51 01 	sts	0x0151, r26
     630:	b0 93 52 01 	sts	0x0152, r27
			break;
     634:	08 95       	ret
			break;
		case col0_off:
			LED_State = col1;
			break;
		case col1:
			LED_State = col1_off;
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	80 93 5c 01 	sts	0x015C, r24
		//Turns column of the LED's off.
		case col0_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col1_off:
			display_lights = 0x00FFFFFFFF;
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	dc 01       	movw	r26, r24
     642:	80 93 4f 01 	sts	0x014F, r24
     646:	90 93 50 01 	sts	0x0150, r25
     64a:	a0 93 51 01 	sts	0x0151, r26
     64e:	b0 93 52 01 	sts	0x0152, r27
			break;
     652:	08 95       	ret
			break;
		case col1:
			LED_State = col1_off;
			break;
		case col1_off:
			LED_State = col2;
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col1:
			display_lights = col_states[1];
			break;
		case col2:
			display_lights = col_states[2];
     65a:	80 91 2f 01 	lds	r24, 0x012F
     65e:	90 91 30 01 	lds	r25, 0x0130
     662:	a0 91 31 01 	lds	r26, 0x0131
     666:	b0 91 32 01 	lds	r27, 0x0132
     66a:	80 93 4f 01 	sts	0x014F, r24
     66e:	90 93 50 01 	sts	0x0150, r25
     672:	a0 93 51 01 	sts	0x0151, r26
     676:	b0 93 52 01 	sts	0x0152, r27
			break;
     67a:	08 95       	ret
			break;
		case col1_off:
			LED_State = col2;
			break;
		case col2:
			LED_State = col2_off;
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col1_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col2_off:
			display_lights = 0x00FFFFFFFF;
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	9f ef       	ldi	r25, 0xFF	; 255
     686:	dc 01       	movw	r26, r24
     688:	80 93 4f 01 	sts	0x014F, r24
     68c:	90 93 50 01 	sts	0x0150, r25
     690:	a0 93 51 01 	sts	0x0151, r26
     694:	b0 93 52 01 	sts	0x0152, r27
			break;
     698:	08 95       	ret
			break;
		case col2:
			LED_State = col2_off;
			break;
		case col2_off:
			LED_State = col3;
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col2:
			display_lights = col_states[2];
			break;
		case col3:
			display_lights = col_states[3];
     6a0:	80 91 33 01 	lds	r24, 0x0133
     6a4:	90 91 34 01 	lds	r25, 0x0134
     6a8:	a0 91 35 01 	lds	r26, 0x0135
     6ac:	b0 91 36 01 	lds	r27, 0x0136
     6b0:	80 93 4f 01 	sts	0x014F, r24
     6b4:	90 93 50 01 	sts	0x0150, r25
     6b8:	a0 93 51 01 	sts	0x0151, r26
     6bc:	b0 93 52 01 	sts	0x0152, r27
			break;
     6c0:	08 95       	ret
			break;
		case col2_off:
			LED_State = col3;
			break;
		case col3:
			LED_State = col3_off;
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col2_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col3_off:
			display_lights = 0x00FFFFFFFF;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
     6cc:	dc 01       	movw	r26, r24
     6ce:	80 93 4f 01 	sts	0x014F, r24
     6d2:	90 93 50 01 	sts	0x0150, r25
     6d6:	a0 93 51 01 	sts	0x0151, r26
     6da:	b0 93 52 01 	sts	0x0152, r27
			break;
     6de:	08 95       	ret
			break;
		case col3:
			LED_State = col3_off;
			break;
		case col3_off:
			LED_State = col4;
     6e0:	89 e0       	ldi	r24, 0x09	; 9
     6e2:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col3:
			display_lights = col_states[3];
			break;
		case col4:
			display_lights = col_states[4];
     6e6:	80 91 37 01 	lds	r24, 0x0137
     6ea:	90 91 38 01 	lds	r25, 0x0138
     6ee:	a0 91 39 01 	lds	r26, 0x0139
     6f2:	b0 91 3a 01 	lds	r27, 0x013A
     6f6:	80 93 4f 01 	sts	0x014F, r24
     6fa:	90 93 50 01 	sts	0x0150, r25
     6fe:	a0 93 51 01 	sts	0x0151, r26
     702:	b0 93 52 01 	sts	0x0152, r27
			break;
     706:	08 95       	ret
			break;
		case col3_off:
			LED_State = col4;
			break;
		case col4:
			LED_State = col4_off;
     708:	8a e0       	ldi	r24, 0x0A	; 10
     70a:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col3_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col4_off:
			display_lights = 0x00FFFFFFFF;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	9f ef       	ldi	r25, 0xFF	; 255
     712:	dc 01       	movw	r26, r24
     714:	80 93 4f 01 	sts	0x014F, r24
     718:	90 93 50 01 	sts	0x0150, r25
     71c:	a0 93 51 01 	sts	0x0151, r26
     720:	b0 93 52 01 	sts	0x0152, r27
			break;
     724:	08 95       	ret
			break;
		case col4:
			LED_State = col4_off;
			break;
		case col4_off:
			LED_State = col5;
     726:	8b e0       	ldi	r24, 0x0B	; 11
     728:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col4:
			display_lights = col_states[4];
			break;
		case col5:
			display_lights = col_states[5];
     72c:	80 91 3b 01 	lds	r24, 0x013B
     730:	90 91 3c 01 	lds	r25, 0x013C
     734:	a0 91 3d 01 	lds	r26, 0x013D
     738:	b0 91 3e 01 	lds	r27, 0x013E
     73c:	80 93 4f 01 	sts	0x014F, r24
     740:	90 93 50 01 	sts	0x0150, r25
     744:	a0 93 51 01 	sts	0x0151, r26
     748:	b0 93 52 01 	sts	0x0152, r27
			break;
     74c:	08 95       	ret
			break;
		case col4_off:
			LED_State = col5;
			break;
		case col5:
			LED_State = col5_off;
     74e:	8c e0       	ldi	r24, 0x0C	; 12
     750:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col4_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col5_off:
			display_lights = 0x00FFFFFFFF;
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	dc 01       	movw	r26, r24
     75a:	80 93 4f 01 	sts	0x014F, r24
     75e:	90 93 50 01 	sts	0x0150, r25
     762:	a0 93 51 01 	sts	0x0151, r26
     766:	b0 93 52 01 	sts	0x0152, r27
			break;
     76a:	08 95       	ret
			break;
		case col5:
			LED_State = col5_off;
			break;
		case col5_off:
			LED_State = col6;
     76c:	8d e0       	ldi	r24, 0x0D	; 13
     76e:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col5:
			display_lights = col_states[5];
			break;
		case col6:
			display_lights = col_states[6];
     772:	80 91 3f 01 	lds	r24, 0x013F
     776:	90 91 40 01 	lds	r25, 0x0140
     77a:	a0 91 41 01 	lds	r26, 0x0141
     77e:	b0 91 42 01 	lds	r27, 0x0142
     782:	80 93 4f 01 	sts	0x014F, r24
     786:	90 93 50 01 	sts	0x0150, r25
     78a:	a0 93 51 01 	sts	0x0151, r26
     78e:	b0 93 52 01 	sts	0x0152, r27
			break;
     792:	08 95       	ret
			break;
		case col5_off:
			LED_State = col6;
			break;
		case col6:
			LED_State = col6_off;
     794:	8e e0       	ldi	r24, 0x0E	; 14
     796:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col5_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col6_off:
			display_lights = 0x00FFFFFFFF;
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	dc 01       	movw	r26, r24
     7a0:	80 93 4f 01 	sts	0x014F, r24
     7a4:	90 93 50 01 	sts	0x0150, r25
     7a8:	a0 93 51 01 	sts	0x0151, r26
     7ac:	b0 93 52 01 	sts	0x0152, r27
			break;
     7b0:	08 95       	ret
			break;
		case col6:
			LED_State = col6_off;
			break;
		case col6_off:
			LED_State = col7;
     7b2:	8f e0       	ldi	r24, 0x0F	; 15
     7b4:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col6:
			display_lights = col_states[6];
			break;
		case col7:
			display_lights = col_states[7];
     7b8:	80 91 43 01 	lds	r24, 0x0143
     7bc:	90 91 44 01 	lds	r25, 0x0144
     7c0:	a0 91 45 01 	lds	r26, 0x0145
     7c4:	b0 91 46 01 	lds	r27, 0x0146
     7c8:	80 93 4f 01 	sts	0x014F, r24
     7cc:	90 93 50 01 	sts	0x0150, r25
     7d0:	a0 93 51 01 	sts	0x0151, r26
     7d4:	b0 93 52 01 	sts	0x0152, r27
			break;
     7d8:	08 95       	ret
			break;
		case col6_off:
			LED_State = col7;
			break;
		case col7:
			LED_State = col7_off;
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	80 93 5c 01 	sts	0x015C, r24
			break;
		case col6_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col7_off:
			display_lights = 0x00FFFFFFFF;
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	9f ef       	ldi	r25, 0xFF	; 255
     7e4:	dc 01       	movw	r26, r24
     7e6:	80 93 4f 01 	sts	0x014F, r24
     7ea:	90 93 50 01 	sts	0x0150, r25
     7ee:	a0 93 51 01 	sts	0x0151, r26
     7f2:	b0 93 52 01 	sts	0x0152, r27
			break;
     7f6:	08 95       	ret
			break;
		case col7:
			LED_State = col7_off;
			break;
		case col7_off:
			LED_State = col0;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 5c 01 	sts	0x015C, r24
			break;
     7fe:	03 c0       	rjmp	.+6      	; 0x806 <LED_Matrix+0x234>
		default:
			LED_State = LED_Init;
     800:	10 92 5c 01 	sts	0x015C, r1
     804:	08 95       	ret
	switch(LED_State)
	{
		case LED_Init:
			break;
		case col0:
			display_lights = col_states[0];
     806:	80 91 27 01 	lds	r24, 0x0127
     80a:	90 91 28 01 	lds	r25, 0x0128
     80e:	a0 91 29 01 	lds	r26, 0x0129
     812:	b0 91 2a 01 	lds	r27, 0x012A
     816:	80 93 4f 01 	sts	0x014F, r24
     81a:	90 93 50 01 	sts	0x0150, r25
     81e:	a0 93 51 01 	sts	0x0151, r26
     822:	b0 93 52 01 	sts	0x0152, r27
     826:	08 95       	ret

00000828 <Player_Cursor>:
signed long swap_green_to_blue = 0x00010200;
signed long swap_blue_to_green = 0x00020100;
unsigned char cursor_color = -1;
enum Cursor_States{Cursor_Init, Wait_For_Buttons, Up_State, Down_State, Left_State, Right_State} Cursor_State;
void Player_Cursor()
{
     828:	8f 92       	push	r8
     82a:	9f 92       	push	r9
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
	//Transitions
	switch(Cursor_State)
     840:	80 91 5d 01 	lds	r24, 0x015D
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	09 f4       	brne	.+2      	; 0x84a <Player_Cursor+0x22>
     848:	26 c4       	rjmp	.+2124   	; 0x1096 <Player_Cursor+0x86e>
     84a:	30 f4       	brcc	.+12     	; 0x858 <Player_Cursor+0x30>
     84c:	88 23       	and	r24, r24
     84e:	69 f0       	breq	.+26     	; 0x86a <Player_Cursor+0x42>
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	09 f4       	brne	.+2      	; 0x856 <Player_Cursor+0x2e>
     854:	42 c0       	rjmp	.+132    	; 0x8da <Player_Cursor+0xb2>
     856:	2f c4       	rjmp	.+2142   	; 0x10b6 <Player_Cursor+0x88e>
     858:	84 30       	cpi	r24, 0x04	; 4
     85a:	09 f4       	brne	.+2      	; 0x85e <Player_Cursor+0x36>
     85c:	0c c4       	rjmp	.+2072   	; 0x1076 <Player_Cursor+0x84e>
     85e:	08 f4       	brcc	.+2      	; 0x862 <Player_Cursor+0x3a>
     860:	22 c4       	rjmp	.+2116   	; 0x10a6 <Player_Cursor+0x87e>
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	09 f4       	brne	.+2      	; 0x868 <Player_Cursor+0x40>
     866:	0f c4       	rjmp	.+2078   	; 0x1086 <Player_Cursor+0x85e>
     868:	26 c4       	rjmp	.+2124   	; 0x10b6 <Player_Cursor+0x88e>
	{
		case Cursor_Init:
			if ((col_states[x] & cursor_green_mask) == 0x01000000)
     86a:	e0 91 4e 01 	lds	r30, 0x014E
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	e9 5d       	subi	r30, 0xD9	; 217
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	a2 81       	ldd	r26, Z+2	; 0x02
     882:	b3 81       	ldd	r27, Z+3	; 0x03
     884:	40 91 21 01 	lds	r20, 0x0121
     888:	50 91 22 01 	lds	r21, 0x0122
     88c:	60 91 23 01 	lds	r22, 0x0123
     890:	70 91 24 01 	lds	r23, 0x0124
     894:	48 23       	and	r20, r24
     896:	59 23       	and	r21, r25
     898:	6a 23       	and	r22, r26
     89a:	7b 23       	and	r23, r27
     89c:	41 15       	cp	r20, r1
     89e:	51 05       	cpc	r21, r1
     8a0:	61 05       	cpc	r22, r1
     8a2:	71 40       	sbci	r23, 0x01	; 1
     8a4:	19 f4       	brne	.+6      	; 0x8ac <Player_Cursor+0x84>
			{
				cursor_color = GREEN_LIGHT;
     8a6:	10 92 08 01 	sts	0x0108, r1
     8aa:	13 c0       	rjmp	.+38     	; 0x8d2 <Player_Cursor+0xaa>
			}
			else if ((col_states[x] & cursor_blue_mask) == 0x01000000)
     8ac:	40 91 1d 01 	lds	r20, 0x011D
     8b0:	50 91 1e 01 	lds	r21, 0x011E
     8b4:	60 91 1f 01 	lds	r22, 0x011F
     8b8:	70 91 20 01 	lds	r23, 0x0120
     8bc:	84 23       	and	r24, r20
     8be:	95 23       	and	r25, r21
     8c0:	a6 23       	and	r26, r22
     8c2:	b7 23       	and	r27, r23
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 40       	sbci	r27, 0x01	; 1
     8ca:	19 f4       	brne	.+6      	; 0x8d2 <Player_Cursor+0xaa>
			{
				cursor_color = BLUE_LIGHT;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 08 01 	sts	0x0108, r24
			}
			Cursor_State = Wait_For_Buttons;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 93 5d 01 	sts	0x015D, r24
			break;
     8d8:	f5 c3       	rjmp	.+2026   	; 0x10c4 <Player_Cursor+0x89c>
		case Wait_For_Buttons:
			if ((button & Left_Button) == 0x00)
     8da:	80 91 55 01 	lds	r24, 0x0155
     8de:	87 fd       	sbrc	r24, 7
     8e0:	cc c0       	rjmp	.+408    	; 0xa7a <Player_Cursor+0x252>
			{
				if (x > 0)
     8e2:	e0 91 4e 01 	lds	r30, 0x014E
     8e6:	ee 23       	and	r30, r30
     8e8:	09 f4       	brne	.+2      	; 0x8ec <Player_Cursor+0xc4>
     8ea:	ec c3       	rjmp	.+2008   	; 0x10c4 <Player_Cursor+0x89c>
				{
					Cursor_State = Left_State;
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	80 93 5d 01 	sts	0x015D, r24
					--x;
     8f2:	e1 50       	subi	r30, 0x01	; 1
     8f4:	e0 93 4e 01 	sts	0x014E, r30
					if (cursor_color == GREEN_LIGHT)
     8f8:	80 91 08 01 	lds	r24, 0x0108
     8fc:	81 11       	cpse	r24, r1
     8fe:	5d c0       	rjmp	.+186    	; 0x9ba <Player_Cursor+0x192>
					{
						if ((col_states[x] & row_green_mask) != 0)
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 91 19 01 	lds	r24, 0x0119
     906:	90 91 1a 01 	lds	r25, 0x011A
     90a:	a0 91 1b 01 	lds	r26, 0x011B
     90e:	b0 91 1c 01 	lds	r27, 0x011C
     912:	ef 01       	movw	r28, r30
     914:	cc 0f       	add	r28, r28
     916:	dd 1f       	adc	r29, r29
     918:	cc 0f       	add	r28, r28
     91a:	dd 1f       	adc	r29, r29
     91c:	c9 5d       	subi	r28, 0xD9	; 217
     91e:	de 4f       	sbci	r29, 0xFE	; 254
     920:	48 81       	ld	r20, Y
     922:	59 81       	ldd	r21, Y+1	; 0x01
     924:	6a 81       	ldd	r22, Y+2	; 0x02
     926:	7b 81       	ldd	r23, Y+3	; 0x03
     928:	48 23       	and	r20, r24
     92a:	59 23       	and	r21, r25
     92c:	6a 23       	and	r22, r26
     92e:	7b 23       	and	r23, r27
     930:	45 2b       	or	r20, r21
     932:	46 2b       	or	r20, r22
     934:	47 2b       	or	r20, r23
     936:	09 f4       	brne	.+2      	; 0x93a <Player_Cursor+0x112>
     938:	c1 c3       	rjmp	.+1922   	; 0x10bc <Player_Cursor+0x894>
						{
							col_states[x+1] = (col_states[x+1] | row_green_mask) & ~row_blue_mask;
     93a:	40 91 15 01 	lds	r20, 0x0115
     93e:	50 91 16 01 	lds	r21, 0x0116
     942:	60 91 17 01 	lds	r22, 0x0117
     946:	70 91 18 01 	lds	r23, 0x0118
     94a:	ef 01       	movw	r28, r30
     94c:	cc 0f       	add	r28, r28
     94e:	dd 1f       	adc	r29, r29
     950:	cc 0f       	add	r28, r28
     952:	dd 1f       	adc	r29, r29
     954:	c5 5d       	subi	r28, 0xD5	; 213
     956:	de 4f       	sbci	r29, 0xFE	; 254
     958:	08 81       	ld	r16, Y
     95a:	19 81       	ldd	r17, Y+1	; 0x01
     95c:	2a 81       	ldd	r18, Y+2	; 0x02
     95e:	3b 81       	ldd	r19, Y+3	; 0x03
     960:	08 2b       	or	r16, r24
     962:	19 2b       	or	r17, r25
     964:	2a 2b       	or	r18, r26
     966:	3b 2b       	or	r19, r27
     968:	6a 01       	movw	r12, r20
     96a:	7b 01       	movw	r14, r22
     96c:	c0 94       	com	r12
     96e:	d0 94       	com	r13
     970:	e0 94       	com	r14
     972:	f0 94       	com	r15
     974:	0c 21       	and	r16, r12
     976:	1d 21       	and	r17, r13
     978:	2e 21       	and	r18, r14
     97a:	3f 21       	and	r19, r15
     97c:	08 83       	st	Y, r16
     97e:	19 83       	std	Y+1, r17	; 0x01
     980:	2a 83       	std	Y+2, r18	; 0x02
     982:	3b 83       	std	Y+3, r19	; 0x03
							col_states[x] = (col_states[x] | row_blue_mask) & ~row_green_mask;
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	e9 5d       	subi	r30, 0xD9	; 217
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	00 81       	ld	r16, Z
     992:	11 81       	ldd	r17, Z+1	; 0x01
     994:	22 81       	ldd	r18, Z+2	; 0x02
     996:	33 81       	ldd	r19, Z+3	; 0x03
     998:	40 2b       	or	r20, r16
     99a:	51 2b       	or	r21, r17
     99c:	62 2b       	or	r22, r18
     99e:	73 2b       	or	r23, r19
     9a0:	80 95       	com	r24
     9a2:	90 95       	com	r25
     9a4:	a0 95       	com	r26
     9a6:	b0 95       	com	r27
     9a8:	48 23       	and	r20, r24
     9aa:	59 23       	and	r21, r25
     9ac:	6a 23       	and	r22, r26
     9ae:	7b 23       	and	r23, r27
     9b0:	40 83       	st	Z, r20
     9b2:	51 83       	std	Z+1, r21	; 0x01
     9b4:	62 83       	std	Z+2, r22	; 0x02
     9b6:	73 83       	std	Z+3, r23	; 0x03
     9b8:	81 c3       	rjmp	.+1794   	; 0x10bc <Player_Cursor+0x894>
						}
					}
					else if (cursor_color == BLUE_LIGHT)
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <Player_Cursor+0x198>
     9be:	7e c3       	rjmp	.+1788   	; 0x10bc <Player_Cursor+0x894>
					{
						if ((col_states[x] & row_blue_mask) != 0)
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 91 15 01 	lds	r24, 0x0115
     9c6:	90 91 16 01 	lds	r25, 0x0116
     9ca:	a0 91 17 01 	lds	r26, 0x0117
     9ce:	b0 91 18 01 	lds	r27, 0x0118
     9d2:	ef 01       	movw	r28, r30
     9d4:	cc 0f       	add	r28, r28
     9d6:	dd 1f       	adc	r29, r29
     9d8:	cc 0f       	add	r28, r28
     9da:	dd 1f       	adc	r29, r29
     9dc:	c9 5d       	subi	r28, 0xD9	; 217
     9de:	de 4f       	sbci	r29, 0xFE	; 254
     9e0:	48 81       	ld	r20, Y
     9e2:	59 81       	ldd	r21, Y+1	; 0x01
     9e4:	6a 81       	ldd	r22, Y+2	; 0x02
     9e6:	7b 81       	ldd	r23, Y+3	; 0x03
     9e8:	48 23       	and	r20, r24
     9ea:	59 23       	and	r21, r25
     9ec:	6a 23       	and	r22, r26
     9ee:	7b 23       	and	r23, r27
     9f0:	45 2b       	or	r20, r21
     9f2:	46 2b       	or	r20, r22
     9f4:	47 2b       	or	r20, r23
     9f6:	09 f4       	brne	.+2      	; 0x9fa <Player_Cursor+0x1d2>
     9f8:	61 c3       	rjmp	.+1730   	; 0x10bc <Player_Cursor+0x894>
						{
							col_states[x+1] = (col_states[x+1] | row_blue_mask) & ~row_green_mask;
     9fa:	40 91 19 01 	lds	r20, 0x0119
     9fe:	50 91 1a 01 	lds	r21, 0x011A
     a02:	60 91 1b 01 	lds	r22, 0x011B
     a06:	70 91 1c 01 	lds	r23, 0x011C
     a0a:	ef 01       	movw	r28, r30
     a0c:	cc 0f       	add	r28, r28
     a0e:	dd 1f       	adc	r29, r29
     a10:	cc 0f       	add	r28, r28
     a12:	dd 1f       	adc	r29, r29
     a14:	c5 5d       	subi	r28, 0xD5	; 213
     a16:	de 4f       	sbci	r29, 0xFE	; 254
     a18:	08 81       	ld	r16, Y
     a1a:	19 81       	ldd	r17, Y+1	; 0x01
     a1c:	2a 81       	ldd	r18, Y+2	; 0x02
     a1e:	3b 81       	ldd	r19, Y+3	; 0x03
     a20:	08 2b       	or	r16, r24
     a22:	19 2b       	or	r17, r25
     a24:	2a 2b       	or	r18, r26
     a26:	3b 2b       	or	r19, r27
     a28:	6a 01       	movw	r12, r20
     a2a:	7b 01       	movw	r14, r22
     a2c:	c0 94       	com	r12
     a2e:	d0 94       	com	r13
     a30:	e0 94       	com	r14
     a32:	f0 94       	com	r15
     a34:	0c 21       	and	r16, r12
     a36:	1d 21       	and	r17, r13
     a38:	2e 21       	and	r18, r14
     a3a:	3f 21       	and	r19, r15
     a3c:	08 83       	st	Y, r16
     a3e:	19 83       	std	Y+1, r17	; 0x01
     a40:	2a 83       	std	Y+2, r18	; 0x02
     a42:	3b 83       	std	Y+3, r19	; 0x03
							col_states[x] = (col_states[x] | row_green_mask) & ~row_blue_mask;
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	e9 5d       	subi	r30, 0xD9	; 217
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	00 81       	ld	r16, Z
     a52:	11 81       	ldd	r17, Z+1	; 0x01
     a54:	22 81       	ldd	r18, Z+2	; 0x02
     a56:	33 81       	ldd	r19, Z+3	; 0x03
     a58:	40 2b       	or	r20, r16
     a5a:	51 2b       	or	r21, r17
     a5c:	62 2b       	or	r22, r18
     a5e:	73 2b       	or	r23, r19
     a60:	80 95       	com	r24
     a62:	90 95       	com	r25
     a64:	a0 95       	com	r26
     a66:	b0 95       	com	r27
     a68:	48 23       	and	r20, r24
     a6a:	59 23       	and	r21, r25
     a6c:	6a 23       	and	r22, r26
     a6e:	7b 23       	and	r23, r27
     a70:	40 83       	st	Z, r20
     a72:	51 83       	std	Z+1, r21	; 0x01
     a74:	62 83       	std	Z+2, r22	; 0x02
     a76:	73 83       	std	Z+3, r23	; 0x03
     a78:	21 c3       	rjmp	.+1602   	; 0x10bc <Player_Cursor+0x894>
						}
					}
				}
			}
			else if ((button & Right_Button) == 0x00)
     a7a:	80 fd       	sbrc	r24, 0
     a7c:	cc c0       	rjmp	.+408    	; 0xc16 <Player_Cursor+0x3ee>
			{
				if (x < 7)
     a7e:	e0 91 4e 01 	lds	r30, 0x014E
     a82:	e7 30       	cpi	r30, 0x07	; 7
     a84:	08 f0       	brcs	.+2      	; 0xa88 <Player_Cursor+0x260>
     a86:	1e c3       	rjmp	.+1596   	; 0x10c4 <Player_Cursor+0x89c>
				{
					Cursor_State = Right_State;
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	80 93 5d 01 	sts	0x015D, r24
					++x;
     a8e:	ef 5f       	subi	r30, 0xFF	; 255
     a90:	e0 93 4e 01 	sts	0x014E, r30
					if (cursor_color == GREEN_LIGHT)
     a94:	80 91 08 01 	lds	r24, 0x0108
     a98:	81 11       	cpse	r24, r1
     a9a:	5d c0       	rjmp	.+186    	; 0xb56 <Player_Cursor+0x32e>
					{
						if ((col_states[x] & row_green_mask) != 0)
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 91 19 01 	lds	r24, 0x0119
     aa2:	90 91 1a 01 	lds	r25, 0x011A
     aa6:	a0 91 1b 01 	lds	r26, 0x011B
     aaa:	b0 91 1c 01 	lds	r27, 0x011C
     aae:	ef 01       	movw	r28, r30
     ab0:	cc 0f       	add	r28, r28
     ab2:	dd 1f       	adc	r29, r29
     ab4:	cc 0f       	add	r28, r28
     ab6:	dd 1f       	adc	r29, r29
     ab8:	c9 5d       	subi	r28, 0xD9	; 217
     aba:	de 4f       	sbci	r29, 0xFE	; 254
     abc:	48 81       	ld	r20, Y
     abe:	59 81       	ldd	r21, Y+1	; 0x01
     ac0:	6a 81       	ldd	r22, Y+2	; 0x02
     ac2:	7b 81       	ldd	r23, Y+3	; 0x03
     ac4:	48 23       	and	r20, r24
     ac6:	59 23       	and	r21, r25
     ac8:	6a 23       	and	r22, r26
     aca:	7b 23       	and	r23, r27
     acc:	45 2b       	or	r20, r21
     ace:	46 2b       	or	r20, r22
     ad0:	47 2b       	or	r20, r23
     ad2:	09 f4       	brne	.+2      	; 0xad6 <Player_Cursor+0x2ae>
     ad4:	f3 c2       	rjmp	.+1510   	; 0x10bc <Player_Cursor+0x894>
						{
							col_states[x-1] = (col_states[x-1] | row_green_mask) & ~row_blue_mask;
     ad6:	40 91 15 01 	lds	r20, 0x0115
     ada:	50 91 16 01 	lds	r21, 0x0116
     ade:	60 91 17 01 	lds	r22, 0x0117
     ae2:	70 91 18 01 	lds	r23, 0x0118
     ae6:	ef 01       	movw	r28, r30
     ae8:	cc 0f       	add	r28, r28
     aea:	dd 1f       	adc	r29, r29
     aec:	cc 0f       	add	r28, r28
     aee:	dd 1f       	adc	r29, r29
     af0:	cd 5d       	subi	r28, 0xDD	; 221
     af2:	de 4f       	sbci	r29, 0xFE	; 254
     af4:	08 81       	ld	r16, Y
     af6:	19 81       	ldd	r17, Y+1	; 0x01
     af8:	2a 81       	ldd	r18, Y+2	; 0x02
     afa:	3b 81       	ldd	r19, Y+3	; 0x03
     afc:	08 2b       	or	r16, r24
     afe:	19 2b       	or	r17, r25
     b00:	2a 2b       	or	r18, r26
     b02:	3b 2b       	or	r19, r27
     b04:	6a 01       	movw	r12, r20
     b06:	7b 01       	movw	r14, r22
     b08:	c0 94       	com	r12
     b0a:	d0 94       	com	r13
     b0c:	e0 94       	com	r14
     b0e:	f0 94       	com	r15
     b10:	0c 21       	and	r16, r12
     b12:	1d 21       	and	r17, r13
     b14:	2e 21       	and	r18, r14
     b16:	3f 21       	and	r19, r15
     b18:	08 83       	st	Y, r16
     b1a:	19 83       	std	Y+1, r17	; 0x01
     b1c:	2a 83       	std	Y+2, r18	; 0x02
     b1e:	3b 83       	std	Y+3, r19	; 0x03
							col_states[x] = (col_states[x] | row_blue_mask) & ~row_green_mask;
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	e9 5d       	subi	r30, 0xD9	; 217
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	00 81       	ld	r16, Z
     b2e:	11 81       	ldd	r17, Z+1	; 0x01
     b30:	22 81       	ldd	r18, Z+2	; 0x02
     b32:	33 81       	ldd	r19, Z+3	; 0x03
     b34:	40 2b       	or	r20, r16
     b36:	51 2b       	or	r21, r17
     b38:	62 2b       	or	r22, r18
     b3a:	73 2b       	or	r23, r19
     b3c:	80 95       	com	r24
     b3e:	90 95       	com	r25
     b40:	a0 95       	com	r26
     b42:	b0 95       	com	r27
     b44:	48 23       	and	r20, r24
     b46:	59 23       	and	r21, r25
     b48:	6a 23       	and	r22, r26
     b4a:	7b 23       	and	r23, r27
     b4c:	40 83       	st	Z, r20
     b4e:	51 83       	std	Z+1, r21	; 0x01
     b50:	62 83       	std	Z+2, r22	; 0x02
     b52:	73 83       	std	Z+3, r23	; 0x03
     b54:	b3 c2       	rjmp	.+1382   	; 0x10bc <Player_Cursor+0x894>
						}
					}
					else if (cursor_color == BLUE_LIGHT)
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <Player_Cursor+0x334>
     b5a:	b0 c2       	rjmp	.+1376   	; 0x10bc <Player_Cursor+0x894>
					{
						if ((col_states[x] & row_blue_mask) != 0)
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 91 15 01 	lds	r24, 0x0115
     b62:	90 91 16 01 	lds	r25, 0x0116
     b66:	a0 91 17 01 	lds	r26, 0x0117
     b6a:	b0 91 18 01 	lds	r27, 0x0118
     b6e:	ef 01       	movw	r28, r30
     b70:	cc 0f       	add	r28, r28
     b72:	dd 1f       	adc	r29, r29
     b74:	cc 0f       	add	r28, r28
     b76:	dd 1f       	adc	r29, r29
     b78:	c9 5d       	subi	r28, 0xD9	; 217
     b7a:	de 4f       	sbci	r29, 0xFE	; 254
     b7c:	48 81       	ld	r20, Y
     b7e:	59 81       	ldd	r21, Y+1	; 0x01
     b80:	6a 81       	ldd	r22, Y+2	; 0x02
     b82:	7b 81       	ldd	r23, Y+3	; 0x03
     b84:	48 23       	and	r20, r24
     b86:	59 23       	and	r21, r25
     b88:	6a 23       	and	r22, r26
     b8a:	7b 23       	and	r23, r27
     b8c:	45 2b       	or	r20, r21
     b8e:	46 2b       	or	r20, r22
     b90:	47 2b       	or	r20, r23
     b92:	09 f4       	brne	.+2      	; 0xb96 <Player_Cursor+0x36e>
     b94:	93 c2       	rjmp	.+1318   	; 0x10bc <Player_Cursor+0x894>
						{
							col_states[x-1] = (col_states[x-1] | row_blue_mask) & ~row_green_mask;
     b96:	40 91 19 01 	lds	r20, 0x0119
     b9a:	50 91 1a 01 	lds	r21, 0x011A
     b9e:	60 91 1b 01 	lds	r22, 0x011B
     ba2:	70 91 1c 01 	lds	r23, 0x011C
     ba6:	ef 01       	movw	r28, r30
     ba8:	cc 0f       	add	r28, r28
     baa:	dd 1f       	adc	r29, r29
     bac:	cc 0f       	add	r28, r28
     bae:	dd 1f       	adc	r29, r29
     bb0:	cd 5d       	subi	r28, 0xDD	; 221
     bb2:	de 4f       	sbci	r29, 0xFE	; 254
     bb4:	08 81       	ld	r16, Y
     bb6:	19 81       	ldd	r17, Y+1	; 0x01
     bb8:	2a 81       	ldd	r18, Y+2	; 0x02
     bba:	3b 81       	ldd	r19, Y+3	; 0x03
     bbc:	08 2b       	or	r16, r24
     bbe:	19 2b       	or	r17, r25
     bc0:	2a 2b       	or	r18, r26
     bc2:	3b 2b       	or	r19, r27
     bc4:	6a 01       	movw	r12, r20
     bc6:	7b 01       	movw	r14, r22
     bc8:	c0 94       	com	r12
     bca:	d0 94       	com	r13
     bcc:	e0 94       	com	r14
     bce:	f0 94       	com	r15
     bd0:	0c 21       	and	r16, r12
     bd2:	1d 21       	and	r17, r13
     bd4:	2e 21       	and	r18, r14
     bd6:	3f 21       	and	r19, r15
     bd8:	08 83       	st	Y, r16
     bda:	19 83       	std	Y+1, r17	; 0x01
     bdc:	2a 83       	std	Y+2, r18	; 0x02
     bde:	3b 83       	std	Y+3, r19	; 0x03
							col_states[x] = (col_states[x] | row_green_mask) & ~row_blue_mask;
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	e9 5d       	subi	r30, 0xD9	; 217
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	00 81       	ld	r16, Z
     bee:	11 81       	ldd	r17, Z+1	; 0x01
     bf0:	22 81       	ldd	r18, Z+2	; 0x02
     bf2:	33 81       	ldd	r19, Z+3	; 0x03
     bf4:	40 2b       	or	r20, r16
     bf6:	51 2b       	or	r21, r17
     bf8:	62 2b       	or	r22, r18
     bfa:	73 2b       	or	r23, r19
     bfc:	80 95       	com	r24
     bfe:	90 95       	com	r25
     c00:	a0 95       	com	r26
     c02:	b0 95       	com	r27
     c04:	48 23       	and	r20, r24
     c06:	59 23       	and	r21, r25
     c08:	6a 23       	and	r22, r26
     c0a:	7b 23       	and	r23, r27
     c0c:	40 83       	st	Z, r20
     c0e:	51 83       	std	Z+1, r21	; 0x01
     c10:	62 83       	std	Z+2, r22	; 0x02
     c12:	73 83       	std	Z+3, r23	; 0x03
     c14:	53 c2       	rjmp	.+1190   	; 0x10bc <Player_Cursor+0x894>
						}
					}
				}
			}
			else if ((button & Up_Button) == 0x00)
     c16:	85 fd       	sbrc	r24, 5
     c18:	27 c1       	rjmp	.+590    	; 0xe68 <Player_Cursor+0x640>
			{
				if (y < 0x80)
     c1a:	20 91 25 01 	lds	r18, 0x0125
     c1e:	30 91 26 01 	lds	r19, 0x0126
     c22:	20 38       	cpi	r18, 0x80	; 128
     c24:	31 05       	cpc	r19, r1
     c26:	08 f0       	brcs	.+2      	; 0xc2a <Player_Cursor+0x402>
     c28:	4d c2       	rjmp	.+1178   	; 0x10c4 <Player_Cursor+0x89c>
				{
					Cursor_State = Up_State;
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	80 93 5d 01 	sts	0x015D, r24
					row_green_mask = row_green_mask << 1;
     c30:	80 91 19 01 	lds	r24, 0x0119
     c34:	90 91 1a 01 	lds	r25, 0x011A
     c38:	a0 91 1b 01 	lds	r26, 0x011B
     c3c:	b0 91 1c 01 	lds	r27, 0x011C
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	aa 1f       	adc	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	80 93 19 01 	sts	0x0119, r24
     c4c:	90 93 1a 01 	sts	0x011A, r25
     c50:	a0 93 1b 01 	sts	0x011B, r26
     c54:	b0 93 1c 01 	sts	0x011C, r27
					row_blue_mask = row_blue_mask << 1;
     c58:	40 91 15 01 	lds	r20, 0x0115
     c5c:	50 91 16 01 	lds	r21, 0x0116
     c60:	60 91 17 01 	lds	r22, 0x0117
     c64:	70 91 18 01 	lds	r23, 0x0118
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	40 93 15 01 	sts	0x0115, r20
     c74:	50 93 16 01 	sts	0x0116, r21
     c78:	60 93 17 01 	sts	0x0117, r22
     c7c:	70 93 18 01 	sts	0x0118, r23
					y = y << 1;	
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	30 93 26 01 	sts	0x0126, r19
     c88:	20 93 25 01 	sts	0x0125, r18
					
					if (cursor_color == GREEN_LIGHT)
     c8c:	20 91 08 01 	lds	r18, 0x0108
     c90:	21 11       	cpse	r18, r1
     c92:	3b c0       	rjmp	.+118    	; 0xd0a <Player_Cursor+0x4e2>
					{
						if ((col_states[x] & row_green_mask) != 0x00000000)
     c94:	20 91 4e 01 	lds	r18, 0x014E
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	f9 01       	movw	r30, r18
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e9 5d       	subi	r30, 0xD9	; 217
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	40 81       	ld	r20, Z
     caa:	51 81       	ldd	r21, Z+1	; 0x01
     cac:	62 81       	ldd	r22, Z+2	; 0x02
     cae:	73 81       	ldd	r23, Z+3	; 0x03
     cb0:	84 23       	and	r24, r20
     cb2:	95 23       	and	r25, r21
     cb4:	a6 23       	and	r26, r22
     cb6:	b7 23       	and	r27, r23
     cb8:	89 2b       	or	r24, r25
     cba:	8a 2b       	or	r24, r26
     cbc:	8b 2b       	or	r24, r27
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <Player_Cursor+0x49a>
     cc0:	5f c0       	rjmp	.+190    	; 0xd80 <Player_Cursor+0x558>
						{
							col_states[x] = (col_states[x] & to_check_swap) | swap_green_to_blue;
     cc2:	f9 01       	movw	r30, r18
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	e9 5d       	subi	r30, 0xD9	; 217
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	80 91 11 01 	lds	r24, 0x0111
     cd4:	90 91 12 01 	lds	r25, 0x0112
     cd8:	a0 91 13 01 	lds	r26, 0x0113
     cdc:	b0 91 14 01 	lds	r27, 0x0114
     ce0:	48 23       	and	r20, r24
     ce2:	59 23       	and	r21, r25
     ce4:	6a 23       	and	r22, r26
     ce6:	7b 23       	and	r23, r27
     ce8:	80 91 0d 01 	lds	r24, 0x010D
     cec:	90 91 0e 01 	lds	r25, 0x010E
     cf0:	a0 91 0f 01 	lds	r26, 0x010F
     cf4:	b0 91 10 01 	lds	r27, 0x0110
     cf8:	48 2b       	or	r20, r24
     cfa:	59 2b       	or	r21, r25
     cfc:	6a 2b       	or	r22, r26
     cfe:	7b 2b       	or	r23, r27
     d00:	40 83       	st	Z, r20
     d02:	51 83       	std	Z+1, r21	; 0x01
     d04:	62 83       	std	Z+2, r22	; 0x02
     d06:	73 83       	std	Z+3, r23	; 0x03
     d08:	3b c0       	rjmp	.+118    	; 0xd80 <Player_Cursor+0x558>
						}
					}
					else if (cursor_color == BLUE_LIGHT)
     d0a:	21 30       	cpi	r18, 0x01	; 1
     d0c:	c9 f5       	brne	.+114    	; 0xd80 <Player_Cursor+0x558>
					{
						if ((col_states[x] & row_blue_mask) != 0x00000000)
     d0e:	20 91 4e 01 	lds	r18, 0x014E
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	f9 01       	movw	r30, r18
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	e9 5d       	subi	r30, 0xD9	; 217
     d20:	fe 4f       	sbci	r31, 0xFE	; 254
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	a2 81       	ldd	r26, Z+2	; 0x02
     d28:	b3 81       	ldd	r27, Z+3	; 0x03
     d2a:	48 23       	and	r20, r24
     d2c:	59 23       	and	r21, r25
     d2e:	6a 23       	and	r22, r26
     d30:	7b 23       	and	r23, r27
     d32:	45 2b       	or	r20, r21
     d34:	46 2b       	or	r20, r22
     d36:	47 2b       	or	r20, r23
     d38:	19 f1       	breq	.+70     	; 0xd80 <Player_Cursor+0x558>
						{
							col_states[x] = (col_states[x] & to_check_swap) | swap_blue_to_green;
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	22 0f       	add	r18, r18
     d40:	33 1f       	adc	r19, r19
     d42:	f9 01       	movw	r30, r18
     d44:	e9 5d       	subi	r30, 0xD9	; 217
     d46:	fe 4f       	sbci	r31, 0xFE	; 254
     d48:	40 91 11 01 	lds	r20, 0x0111
     d4c:	50 91 12 01 	lds	r21, 0x0112
     d50:	60 91 13 01 	lds	r22, 0x0113
     d54:	70 91 14 01 	lds	r23, 0x0114
     d58:	84 23       	and	r24, r20
     d5a:	95 23       	and	r25, r21
     d5c:	a6 23       	and	r26, r22
     d5e:	b7 23       	and	r27, r23
     d60:	40 91 09 01 	lds	r20, 0x0109
     d64:	50 91 0a 01 	lds	r21, 0x010A
     d68:	60 91 0b 01 	lds	r22, 0x010B
     d6c:	70 91 0c 01 	lds	r23, 0x010C
     d70:	84 2b       	or	r24, r20
     d72:	95 2b       	or	r25, r21
     d74:	a6 2b       	or	r26, r22
     d76:	b7 2b       	or	r27, r23
     d78:	80 83       	st	Z, r24
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	a2 83       	std	Z+2, r26	; 0x02
     d7e:	b3 83       	std	Z+3, r27	; 0x03
						}
					}
					
					to_check_swap = (to_check_swap << 1) | 0x00000001;
     d80:	80 91 11 01 	lds	r24, 0x0111
     d84:	90 91 12 01 	lds	r25, 0x0112
     d88:	a0 91 13 01 	lds	r26, 0x0113
     d8c:	b0 91 14 01 	lds	r27, 0x0114
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	aa 1f       	adc	r26, r26
     d96:	bb 1f       	adc	r27, r27
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	80 93 11 01 	sts	0x0111, r24
     d9e:	90 93 12 01 	sts	0x0112, r25
     da2:	a0 93 13 01 	sts	0x0113, r26
     da6:	b0 93 14 01 	sts	0x0114, r27
					swap_blue_to_green = swap_blue_to_green << 1;
     daa:	80 91 09 01 	lds	r24, 0x0109
     dae:	90 91 0a 01 	lds	r25, 0x010A
     db2:	a0 91 0b 01 	lds	r26, 0x010B
     db6:	b0 91 0c 01 	lds	r27, 0x010C
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	aa 1f       	adc	r26, r26
     dc0:	bb 1f       	adc	r27, r27
     dc2:	80 93 09 01 	sts	0x0109, r24
     dc6:	90 93 0a 01 	sts	0x010A, r25
     dca:	a0 93 0b 01 	sts	0x010B, r26
     dce:	b0 93 0c 01 	sts	0x010C, r27
					swap_green_to_blue = swap_green_to_blue << 1;
     dd2:	80 91 0d 01 	lds	r24, 0x010D
     dd6:	90 91 0e 01 	lds	r25, 0x010E
     dda:	a0 91 0f 01 	lds	r26, 0x010F
     dde:	b0 91 10 01 	lds	r27, 0x0110
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	aa 1f       	adc	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	80 93 0d 01 	sts	0x010D, r24
     dee:	90 93 0e 01 	sts	0x010E, r25
     df2:	a0 93 0f 01 	sts	0x010F, r26
     df6:	b0 93 10 01 	sts	0x0110, r27
					cursor_green_mask = (cursor_green_mask & 0xFF00FFFF) | (cursor_green_mask << 1);
     dfa:	80 91 21 01 	lds	r24, 0x0121
     dfe:	90 91 22 01 	lds	r25, 0x0122
     e02:	a0 91 23 01 	lds	r26, 0x0123
     e06:	b0 91 24 01 	lds	r27, 0x0124
     e0a:	ac 01       	movw	r20, r24
     e0c:	bd 01       	movw	r22, r26
     e0e:	44 0f       	add	r20, r20
     e10:	55 1f       	adc	r21, r21
     e12:	66 1f       	adc	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	aa 27       	eor	r26, r26
     e18:	84 2b       	or	r24, r20
     e1a:	95 2b       	or	r25, r21
     e1c:	a6 2b       	or	r26, r22
     e1e:	b7 2b       	or	r27, r23
     e20:	80 93 21 01 	sts	0x0121, r24
     e24:	90 93 22 01 	sts	0x0122, r25
     e28:	a0 93 23 01 	sts	0x0123, r26
     e2c:	b0 93 24 01 	sts	0x0124, r27
					cursor_blue_mask = (cursor_blue_mask & 0xFFFF00FF) | (cursor_blue_mask << 1);
     e30:	80 91 1d 01 	lds	r24, 0x011D
     e34:	90 91 1e 01 	lds	r25, 0x011E
     e38:	a0 91 1f 01 	lds	r26, 0x011F
     e3c:	b0 91 20 01 	lds	r27, 0x0120
     e40:	ac 01       	movw	r20, r24
     e42:	bd 01       	movw	r22, r26
     e44:	44 0f       	add	r20, r20
     e46:	55 1f       	adc	r21, r21
     e48:	66 1f       	adc	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	99 27       	eor	r25, r25
     e4e:	84 2b       	or	r24, r20
     e50:	95 2b       	or	r25, r21
     e52:	a6 2b       	or	r26, r22
     e54:	b7 2b       	or	r27, r23
     e56:	80 93 1d 01 	sts	0x011D, r24
     e5a:	90 93 1e 01 	sts	0x011E, r25
     e5e:	a0 93 1f 01 	sts	0x011F, r26
     e62:	b0 93 20 01 	sts	0x0120, r27
     e66:	2a c1       	rjmp	.+596    	; 0x10bc <Player_Cursor+0x894>
					
				}
			}
			else if ((button & Down_Button) == 0x00)
     e68:	86 fd       	sbrc	r24, 6
     e6a:	2c c1       	rjmp	.+600    	; 0x10c4 <Player_Cursor+0x89c>
			{
				if (y > 0x01)
     e6c:	e0 91 25 01 	lds	r30, 0x0125
     e70:	f0 91 26 01 	lds	r31, 0x0126
     e74:	e2 30       	cpi	r30, 0x02	; 2
     e76:	f1 05       	cpc	r31, r1
     e78:	08 f4       	brcc	.+2      	; 0xe7c <Player_Cursor+0x654>
     e7a:	24 c1       	rjmp	.+584    	; 0x10c4 <Player_Cursor+0x89c>
				{
					Cursor_State = Down_State;
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	80 93 5d 01 	sts	0x015D, r24
					row_green_mask = row_green_mask >> 1;
     e82:	80 91 19 01 	lds	r24, 0x0119
     e86:	90 91 1a 01 	lds	r25, 0x011A
     e8a:	a0 91 1b 01 	lds	r26, 0x011B
     e8e:	b0 91 1c 01 	lds	r27, 0x011C
     e92:	b5 95       	asr	r27
     e94:	a7 95       	ror	r26
     e96:	97 95       	ror	r25
     e98:	87 95       	ror	r24
     e9a:	80 93 19 01 	sts	0x0119, r24
     e9e:	90 93 1a 01 	sts	0x011A, r25
     ea2:	a0 93 1b 01 	sts	0x011B, r26
     ea6:	b0 93 1c 01 	sts	0x011C, r27
					row_blue_mask = row_blue_mask >> 1;
     eaa:	c0 90 15 01 	lds	r12, 0x0115
     eae:	d0 90 16 01 	lds	r13, 0x0116
     eb2:	e0 90 17 01 	lds	r14, 0x0117
     eb6:	f0 90 18 01 	lds	r15, 0x0118
     eba:	f5 94       	asr	r15
     ebc:	e7 94       	ror	r14
     ebe:	d7 94       	ror	r13
     ec0:	c7 94       	ror	r12
     ec2:	c0 92 15 01 	sts	0x0115, r12
     ec6:	d0 92 16 01 	sts	0x0116, r13
     eca:	e0 92 17 01 	sts	0x0117, r14
     ece:	f0 92 18 01 	sts	0x0118, r15
					to_check_swap = (to_check_swap >> 1) | 0x80000000;
     ed2:	40 91 11 01 	lds	r20, 0x0111
     ed6:	50 91 12 01 	lds	r21, 0x0112
     eda:	60 91 13 01 	lds	r22, 0x0113
     ede:	70 91 14 01 	lds	r23, 0x0114
     ee2:	75 95       	asr	r23
     ee4:	67 95       	ror	r22
     ee6:	57 95       	ror	r21
     ee8:	47 95       	ror	r20
     eea:	70 68       	ori	r23, 0x80	; 128
     eec:	40 93 11 01 	sts	0x0111, r20
     ef0:	50 93 12 01 	sts	0x0112, r21
     ef4:	60 93 13 01 	sts	0x0113, r22
     ef8:	70 93 14 01 	sts	0x0114, r23
					swap_blue_to_green = swap_blue_to_green >> 1;
     efc:	80 90 09 01 	lds	r8, 0x0109
     f00:	90 90 0a 01 	lds	r9, 0x010A
     f04:	a0 90 0b 01 	lds	r10, 0x010B
     f08:	b0 90 0c 01 	lds	r11, 0x010C
     f0c:	b5 94       	asr	r11
     f0e:	a7 94       	ror	r10
     f10:	97 94       	ror	r9
     f12:	87 94       	ror	r8
     f14:	80 92 09 01 	sts	0x0109, r8
     f18:	90 92 0a 01 	sts	0x010A, r9
     f1c:	a0 92 0b 01 	sts	0x010B, r10
     f20:	b0 92 0c 01 	sts	0x010C, r11
					swap_green_to_blue = swap_green_to_blue >> 1;
     f24:	00 91 0d 01 	lds	r16, 0x010D
     f28:	10 91 0e 01 	lds	r17, 0x010E
     f2c:	20 91 0f 01 	lds	r18, 0x010F
     f30:	30 91 10 01 	lds	r19, 0x0110
     f34:	35 95       	asr	r19
     f36:	27 95       	ror	r18
     f38:	17 95       	ror	r17
     f3a:	07 95       	ror	r16
     f3c:	00 93 0d 01 	sts	0x010D, r16
     f40:	10 93 0e 01 	sts	0x010E, r17
     f44:	20 93 0f 01 	sts	0x010F, r18
     f48:	30 93 10 01 	sts	0x0110, r19
					y = y >> 1;
     f4c:	f6 95       	lsr	r31
     f4e:	e7 95       	ror	r30
     f50:	f0 93 26 01 	sts	0x0126, r31
     f54:	e0 93 25 01 	sts	0x0125, r30
					
					if (cursor_color == GREEN_LIGHT)
     f58:	e0 91 08 01 	lds	r30, 0x0108
     f5c:	e1 11       	cpse	r30, r1
     f5e:	23 c0       	rjmp	.+70     	; 0xfa6 <Player_Cursor+0x77e>
					{
						if ((col_states[x] & row_green_mask) != 0x00000000)
     f60:	e0 91 4e 01 	lds	r30, 0x014E
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	ef 01       	movw	r28, r30
     f68:	cc 0f       	add	r28, r28
     f6a:	dd 1f       	adc	r29, r29
     f6c:	cc 0f       	add	r28, r28
     f6e:	dd 1f       	adc	r29, r29
     f70:	c9 5d       	subi	r28, 0xD9	; 217
     f72:	de 4f       	sbci	r29, 0xFE	; 254
     f74:	08 81       	ld	r16, Y
     f76:	19 81       	ldd	r17, Y+1	; 0x01
     f78:	2a 81       	ldd	r18, Y+2	; 0x02
     f7a:	3b 81       	ldd	r19, Y+3	; 0x03
     f7c:	80 23       	and	r24, r16
     f7e:	91 23       	and	r25, r17
     f80:	a2 23       	and	r26, r18
     f82:	b3 23       	and	r27, r19
     f84:	89 2b       	or	r24, r25
     f86:	8a 2b       	or	r24, r26
     f88:	8b 2b       	or	r24, r27
     f8a:	c1 f1       	breq	.+112    	; 0xffc <Player_Cursor+0x7d4>
						{
							col_states[x] = (col_states[x] & to_check_swap) | swap_blue_to_green;
     f8c:	40 23       	and	r20, r16
     f8e:	51 23       	and	r21, r17
     f90:	62 23       	and	r22, r18
     f92:	73 23       	and	r23, r19
     f94:	84 2a       	or	r8, r20
     f96:	95 2a       	or	r9, r21
     f98:	a6 2a       	or	r10, r22
     f9a:	b7 2a       	or	r11, r23
     f9c:	88 82       	st	Y, r8
     f9e:	99 82       	std	Y+1, r9	; 0x01
     fa0:	aa 82       	std	Y+2, r10	; 0x02
     fa2:	bb 82       	std	Y+3, r11	; 0x03
     fa4:	2b c0       	rjmp	.+86     	; 0xffc <Player_Cursor+0x7d4>
						}
					}
					else if (cursor_color == BLUE_LIGHT)
     fa6:	e1 30       	cpi	r30, 0x01	; 1
     fa8:	49 f5       	brne	.+82     	; 0xffc <Player_Cursor+0x7d4>
					{
						if ((col_states[x] & row_blue_mask) != 0x00000000)
     faa:	e0 91 4e 01 	lds	r30, 0x014E
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	df 01       	movw	r26, r30
     fb2:	aa 0f       	add	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	aa 0f       	add	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	a9 5d       	subi	r26, 0xD9	; 217
     fbc:	be 4f       	sbci	r27, 0xFE	; 254
     fbe:	8d 91       	ld	r24, X+
     fc0:	9d 91       	ld	r25, X+
     fc2:	0d 90       	ld	r0, X+
     fc4:	bc 91       	ld	r27, X
     fc6:	a0 2d       	mov	r26, r0
     fc8:	c8 22       	and	r12, r24
     fca:	d9 22       	and	r13, r25
     fcc:	ea 22       	and	r14, r26
     fce:	fb 22       	and	r15, r27
     fd0:	cd 28       	or	r12, r13
     fd2:	ce 28       	or	r12, r14
     fd4:	cf 28       	or	r12, r15
     fd6:	91 f0       	breq	.+36     	; 0xffc <Player_Cursor+0x7d4>
						{
							col_states[x] = (col_states[x] & to_check_swap) | swap_green_to_blue;
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	e9 5d       	subi	r30, 0xD9	; 217
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	48 23       	and	r20, r24
     fe6:	59 23       	and	r21, r25
     fe8:	6a 23       	and	r22, r26
     fea:	7b 23       	and	r23, r27
     fec:	04 2b       	or	r16, r20
     fee:	15 2b       	or	r17, r21
     ff0:	26 2b       	or	r18, r22
     ff2:	37 2b       	or	r19, r23
     ff4:	00 83       	st	Z, r16
     ff6:	11 83       	std	Z+1, r17	; 0x01
     ff8:	22 83       	std	Z+2, r18	; 0x02
     ffa:	33 83       	std	Z+3, r19	; 0x03
						}
					}
					
					cursor_green_mask = (cursor_green_mask & 0xFF00FFFF) | ((cursor_green_mask & 0x00FF0000) >> 1);
     ffc:	80 91 21 01 	lds	r24, 0x0121
    1000:	90 91 22 01 	lds	r25, 0x0122
    1004:	a0 91 23 01 	lds	r26, 0x0123
    1008:	b0 91 24 01 	lds	r27, 0x0124
    100c:	ac 01       	movw	r20, r24
    100e:	bd 01       	movw	r22, r26
    1010:	44 27       	eor	r20, r20
    1012:	55 27       	eor	r21, r21
    1014:	77 27       	eor	r23, r23
    1016:	75 95       	asr	r23
    1018:	67 95       	ror	r22
    101a:	57 95       	ror	r21
    101c:	47 95       	ror	r20
    101e:	aa 27       	eor	r26, r26
    1020:	84 2b       	or	r24, r20
    1022:	95 2b       	or	r25, r21
    1024:	a6 2b       	or	r26, r22
    1026:	b7 2b       	or	r27, r23
    1028:	80 93 21 01 	sts	0x0121, r24
    102c:	90 93 22 01 	sts	0x0122, r25
    1030:	a0 93 23 01 	sts	0x0123, r26
    1034:	b0 93 24 01 	sts	0x0124, r27
					cursor_blue_mask = (cursor_blue_mask & 0xFFFF00FF) | ((cursor_blue_mask & 0x0000FF00) >> 1);
    1038:	80 91 1d 01 	lds	r24, 0x011D
    103c:	90 91 1e 01 	lds	r25, 0x011E
    1040:	a0 91 1f 01 	lds	r26, 0x011F
    1044:	b0 91 20 01 	lds	r27, 0x0120
    1048:	ac 01       	movw	r20, r24
    104a:	bd 01       	movw	r22, r26
    104c:	44 27       	eor	r20, r20
    104e:	66 27       	eor	r22, r22
    1050:	77 27       	eor	r23, r23
    1052:	75 95       	asr	r23
    1054:	67 95       	ror	r22
    1056:	57 95       	ror	r21
    1058:	47 95       	ror	r20
    105a:	99 27       	eor	r25, r25
    105c:	84 2b       	or	r24, r20
    105e:	95 2b       	or	r25, r21
    1060:	a6 2b       	or	r26, r22
    1062:	b7 2b       	or	r27, r23
    1064:	80 93 1d 01 	sts	0x011D, r24
    1068:	90 93 1e 01 	sts	0x011E, r25
    106c:	a0 93 1f 01 	sts	0x011F, r26
    1070:	b0 93 20 01 	sts	0x0120, r27
    1074:	23 c0       	rjmp	.+70     	; 0x10bc <Player_Cursor+0x894>
			{
				Cursor_State = Wait_For_Buttons;
			}
			break;
		case Left_State:
			if ((button & Left_Button) != 0x00)
    1076:	80 91 55 01 	lds	r24, 0x0155
    107a:	87 ff       	sbrs	r24, 7
    107c:	37 c0       	rjmp	.+110    	; 0x10ec <Player_Cursor+0x8c4>
			{
				Cursor_State = Wait_For_Buttons;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 5d 01 	sts	0x015D, r24
    1084:	1f c0       	rjmp	.+62     	; 0x10c4 <Player_Cursor+0x89c>
			{
				Cursor_State = Left_State;
			}
			break;
		case Right_State:
			if ((button & Right_Button) == 0x00)
    1086:	80 91 55 01 	lds	r24, 0x0155
    108a:	80 ff       	sbrs	r24, 0
    108c:	2f c0       	rjmp	.+94     	; 0x10ec <Player_Cursor+0x8c4>
			{
				Cursor_State = Right_State;
			}
			else
			{
				Cursor_State = Wait_For_Buttons;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 5d 01 	sts	0x015D, r24
    1094:	17 c0       	rjmp	.+46     	; 0x10c4 <Player_Cursor+0x89c>
			}
			break;
		case Up_State:
			if ((button & Up_Button) != 0x00)
    1096:	80 91 55 01 	lds	r24, 0x0155
    109a:	85 ff       	sbrs	r24, 5
    109c:	27 c0       	rjmp	.+78     	; 0x10ec <Player_Cursor+0x8c4>
			{
				Cursor_State = Wait_For_Buttons;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 5d 01 	sts	0x015D, r24
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <Player_Cursor+0x89c>
			{
				Cursor_State = Up_State;
			}
			break;
		case Down_State:
			if ((button & Down_Button) != 0x00)
    10a6:	80 91 55 01 	lds	r24, 0x0155
    10aa:	86 ff       	sbrs	r24, 6
    10ac:	1f c0       	rjmp	.+62     	; 0x10ec <Player_Cursor+0x8c4>
			{
				Cursor_State = Wait_For_Buttons;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 93 5d 01 	sts	0x015D, r24
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <Player_Cursor+0x89c>
			{
				Cursor_State = Down_State;
			}
			break;
		default:
			Cursor_State = Cursor_Init;
    10b6:	10 92 5d 01 	sts	0x015D, r1
			break;
    10ba:	18 c0       	rjmp	.+48     	; 0x10ec <Player_Cursor+0x8c4>
	}
	
	//Actions
	switch(Cursor_State)
    10bc:	80 91 5d 01 	lds	r24, 0x015D
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <Player_Cursor+0x8c4>
	{
		case Cursor_Init:
			break;
		case Wait_For_Buttons:
			if (seed_randomize >= 10000)
    10c4:	80 91 47 01 	lds	r24, 0x0147
    10c8:	90 91 48 01 	lds	r25, 0x0148
    10cc:	80 31       	cpi	r24, 0x10	; 16
    10ce:	27 e2       	ldi	r18, 0x27	; 39
    10d0:	92 07       	cpc	r25, r18
    10d2:	3c f0       	brlt	.+14     	; 0x10e2 <Player_Cursor+0x8ba>
			{
				//Restarts the seed to 1 for randomizing
				seed_randomize = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 48 01 	sts	0x0148, r25
    10dc:	80 93 47 01 	sts	0x0147, r24
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <Player_Cursor+0x8c4>
			}
			else
			{
				++seed_randomize;
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	90 93 48 01 	sts	0x0148, r25
    10e8:	80 93 47 01 	sts	0x0147, r24
		case Down_State:
			break;
		default:
			break;
	}
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	bf 90       	pop	r11
    10fe:	af 90       	pop	r10
    1100:	9f 90       	pop	r9
    1102:	8f 90       	pop	r8
    1104:	08 95       	ret

00001106 <Cursor_blinking>:
unsigned short blink_count = 175;
enum Blink_States {Blink_Init, Light_On, Light_Off} Blink_State;
void Cursor_blinking()
{
	//Transitions
	switch(Blink_State)
    1106:	80 91 60 01 	lds	r24, 0x0160
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	41 f0       	breq	.+16     	; 0x111e <Cursor_blinking+0x18>
    110e:	18 f0       	brcs	.+6      	; 0x1116 <Cursor_blinking+0x10>
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	01 f1       	breq	.+64     	; 0x1154 <Cursor_blinking+0x4e>
    1114:	3a c0       	rjmp	.+116    	; 0x118a <Cursor_blinking+0x84>
	{
		case Blink_Init:
			Blink_State = Light_On;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 60 01 	sts	0x0160, r24
			break;
    111c:	37 c1       	rjmp	.+622    	; 0x138c <Cursor_blinking+0x286>
		case Light_On:
			if (blink_count <= 0)
    111e:	80 91 04 01 	lds	r24, 0x0104
    1122:	90 91 05 01 	lds	r25, 0x0105
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	61 f4       	brne	.+24     	; 0x1142 <Cursor_blinking+0x3c>
			{
				blink_count = BLINK_TIME;
    112a:	80 91 06 01 	lds	r24, 0x0106
    112e:	90 91 07 01 	lds	r25, 0x0107
    1132:	90 93 05 01 	sts	0x0105, r25
    1136:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_Off;
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	80 93 60 01 	sts	0x0160, r24
    1140:	18 c1       	rjmp	.+560    	; 0x1372 <Cursor_blinking+0x26c>
			}
			else
			{
				--blink_count;
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	90 93 05 01 	sts	0x0105, r25
    1148:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_On;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 60 01 	sts	0x0160, r24
    1152:	1c c1       	rjmp	.+568    	; 0x138c <Cursor_blinking+0x286>
			}
			break;
		case Light_Off:
			if (blink_count <= 0)
    1154:	80 91 04 01 	lds	r24, 0x0104
    1158:	90 91 05 01 	lds	r25, 0x0105
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	61 f4       	brne	.+24     	; 0x1178 <Cursor_blinking+0x72>
			{
				blink_count = BLINK_TIME;
    1160:	80 91 06 01 	lds	r24, 0x0106
    1164:	90 91 07 01 	lds	r25, 0x0107
    1168:	90 93 05 01 	sts	0x0105, r25
    116c:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_On;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 60 01 	sts	0x0160, r24
    1176:	0a c1       	rjmp	.+532    	; 0x138c <Cursor_blinking+0x286>
			}
			else
			{
				--blink_count;
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	90 93 05 01 	sts	0x0105, r25
    117e:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_Off;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	80 93 60 01 	sts	0x0160, r24
    1188:	f4 c0       	rjmp	.+488    	; 0x1372 <Cursor_blinking+0x26c>
			}
			break;
		default:
			Blink_State = Blink_Init;
    118a:	10 92 60 01 	sts	0x0160, r1
    118e:	08 95       	ret
		case Blink_Init:
			break;
		case Light_On:
			if (blink_count == BLINK_TIME)
			{
				if (cursor_color == GREEN_LIGHT)
    1190:	80 91 08 01 	lds	r24, 0x0108
    1194:	81 11       	cpse	r24, r1
    1196:	23 c0       	rjmp	.+70     	; 0x11de <Cursor_blinking+0xd8>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_green_mask & 0x00FFFFFF));
    1198:	e0 91 4e 01 	lds	r30, 0x014E
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	e9 5d       	subi	r30, 0xD9	; 217
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	40 81       	ld	r20, Z
    11ac:	51 81       	ldd	r21, Z+1	; 0x01
    11ae:	62 81       	ldd	r22, Z+2	; 0x02
    11b0:	73 81       	ldd	r23, Z+3	; 0x03
    11b2:	80 91 21 01 	lds	r24, 0x0121
    11b6:	90 91 22 01 	lds	r25, 0x0122
    11ba:	a0 91 23 01 	lds	r26, 0x0123
    11be:	b0 91 24 01 	lds	r27, 0x0124
    11c2:	80 95       	com	r24
    11c4:	90 95       	com	r25
    11c6:	a0 95       	com	r26
    11c8:	b0 95       	com	r27
    11ca:	bf 6f       	ori	r27, 0xFF	; 255
    11cc:	84 23       	and	r24, r20
    11ce:	95 23       	and	r25, r21
    11d0:	a6 23       	and	r26, r22
    11d2:	b7 23       	and	r27, r23
    11d4:	80 83       	st	Z, r24
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	a2 83       	std	Z+2, r26	; 0x02
    11da:	b3 83       	std	Z+3, r27	; 0x03
    11dc:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <Cursor_blinking+0xde>
    11e2:	e0 c0       	rjmp	.+448    	; 0x13a4 <Cursor_blinking+0x29e>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
    11e4:	e0 91 4e 01 	lds	r30, 0x014E
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	e9 5d       	subi	r30, 0xD9	; 217
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	40 81       	ld	r20, Z
    11f8:	51 81       	ldd	r21, Z+1	; 0x01
    11fa:	62 81       	ldd	r22, Z+2	; 0x02
    11fc:	73 81       	ldd	r23, Z+3	; 0x03
    11fe:	80 91 1d 01 	lds	r24, 0x011D
    1202:	90 91 1e 01 	lds	r25, 0x011E
    1206:	a0 91 1f 01 	lds	r26, 0x011F
    120a:	b0 91 20 01 	lds	r27, 0x0120
    120e:	80 95       	com	r24
    1210:	90 95       	com	r25
    1212:	a0 95       	com	r26
    1214:	b0 95       	com	r27
    1216:	bf 6f       	ori	r27, 0xFF	; 255
    1218:	84 23       	and	r24, r20
    121a:	95 23       	and	r25, r21
    121c:	a6 23       	and	r26, r22
    121e:	b7 23       	and	r27, r23
    1220:	80 83       	st	Z, r24
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	a2 83       	std	Z+2, r26	; 0x02
    1226:	b3 83       	std	Z+3, r27	; 0x03
    1228:	08 95       	ret
			}
			break;
		case Light_Off:
			if (blink_count == BLINK_TIME)
			{
				if (cursor_color == GREEN_LIGHT)
    122a:	80 91 08 01 	lds	r24, 0x0108
    122e:	81 11       	cpse	r24, r1
    1230:	1f c0       	rjmp	.+62     	; 0x1270 <Cursor_blinking+0x16a>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] | (cursor_green_mask & 0x00FFFFFF));
    1232:	e0 91 4e 01 	lds	r30, 0x014E
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	e9 5d       	subi	r30, 0xD9	; 217
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	40 81       	ld	r20, Z
    1246:	51 81       	ldd	r21, Z+1	; 0x01
    1248:	62 81       	ldd	r22, Z+2	; 0x02
    124a:	73 81       	ldd	r23, Z+3	; 0x03
    124c:	80 91 21 01 	lds	r24, 0x0121
    1250:	90 91 22 01 	lds	r25, 0x0122
    1254:	a0 91 23 01 	lds	r26, 0x0123
    1258:	b0 91 24 01 	lds	r27, 0x0124
    125c:	bb 27       	eor	r27, r27
    125e:	84 2b       	or	r24, r20
    1260:	95 2b       	or	r25, r21
    1262:	a6 2b       	or	r26, r22
    1264:	b7 2b       	or	r27, r23
    1266:	80 83       	st	Z, r24
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	a2 83       	std	Z+2, r26	; 0x02
    126c:	b3 83       	std	Z+3, r27	; 0x03
    126e:	20 c0       	rjmp	.+64     	; 0x12b0 <Cursor_blinking+0x1aa>
				}
				else if (cursor_color == BLUE_LIGHT)
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	f1 f4       	brne	.+60     	; 0x12b0 <Cursor_blinking+0x1aa>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] | (cursor_blue_mask & 0x00FFFFFF));
    1274:	e0 91 4e 01 	lds	r30, 0x014E
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	e9 5d       	subi	r30, 0xD9	; 217
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	40 81       	ld	r20, Z
    1288:	51 81       	ldd	r21, Z+1	; 0x01
    128a:	62 81       	ldd	r22, Z+2	; 0x02
    128c:	73 81       	ldd	r23, Z+3	; 0x03
    128e:	80 91 1d 01 	lds	r24, 0x011D
    1292:	90 91 1e 01 	lds	r25, 0x011E
    1296:	a0 91 1f 01 	lds	r26, 0x011F
    129a:	b0 91 20 01 	lds	r27, 0x0120
    129e:	bb 27       	eor	r27, r27
    12a0:	84 2b       	or	r24, r20
    12a2:	95 2b       	or	r25, r21
    12a4:	a6 2b       	or	r26, r22
    12a6:	b7 2b       	or	r27, r23
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	a2 83       	std	Z+2, r26	; 0x02
    12ae:	b3 83       	std	Z+3, r27	; 0x03
				}	
			}	
			//The following would have the cursor continiously blink even if the user holds down a button.
			if (((button & Left_Button) == 0x00 || 
    12b0:	80 91 55 01 	lds	r24, 0x0155
    12b4:	90 91 56 01 	lds	r25, 0x0156
    12b8:	9c 01       	movw	r18, r24
    12ba:	21 78       	andi	r18, 0x81	; 129
    12bc:	33 27       	eor	r19, r19
    12be:	21 38       	cpi	r18, 0x81	; 129
    12c0:	31 05       	cpc	r19, r1
    12c2:	31 f4       	brne	.+12     	; 0x12d0 <Cursor_blinking+0x1ca>
    12c4:	80 76       	andi	r24, 0x60	; 96
    12c6:	99 27       	eor	r25, r25
				 (button & Right_Button) == 0x00 || 
				 (button & Up_Button) == 0x00 || 
    12c8:	80 36       	cpi	r24, 0x60	; 96
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <Cursor_blinking+0x1ca>
    12ce:	6a c0       	rjmp	.+212    	; 0x13a4 <Cursor_blinking+0x29e>
				 (button & Down_Button) == 0x00) && Cursor_State == Wait_For_Buttons)
    12d0:	80 91 5d 01 	lds	r24, 0x015D
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	09 f0       	breq	.+2      	; 0x12da <Cursor_blinking+0x1d4>
    12d8:	65 c0       	rjmp	.+202    	; 0x13a4 <Cursor_blinking+0x29e>
			{
				
				if (cursor_color == GREEN_LIGHT)
    12da:	80 91 08 01 	lds	r24, 0x0108
    12de:	81 11       	cpse	r24, r1
    12e0:	23 c0       	rjmp	.+70     	; 0x1328 <Cursor_blinking+0x222>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_green_mask & 0x00FFFFFF));
    12e2:	e0 91 4e 01 	lds	r30, 0x014E
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	e9 5d       	subi	r30, 0xD9	; 217
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	40 81       	ld	r20, Z
    12f6:	51 81       	ldd	r21, Z+1	; 0x01
    12f8:	62 81       	ldd	r22, Z+2	; 0x02
    12fa:	73 81       	ldd	r23, Z+3	; 0x03
    12fc:	80 91 21 01 	lds	r24, 0x0121
    1300:	90 91 22 01 	lds	r25, 0x0122
    1304:	a0 91 23 01 	lds	r26, 0x0123
    1308:	b0 91 24 01 	lds	r27, 0x0124
    130c:	80 95       	com	r24
    130e:	90 95       	com	r25
    1310:	a0 95       	com	r26
    1312:	b0 95       	com	r27
    1314:	bf 6f       	ori	r27, 0xFF	; 255
    1316:	84 23       	and	r24, r20
    1318:	95 23       	and	r25, r21
    131a:	a6 23       	and	r26, r22
    131c:	b7 23       	and	r27, r23
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03
    1326:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	e1 f5       	brne	.+120    	; 0x13a4 <Cursor_blinking+0x29e>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
    132c:	e0 91 4e 01 	lds	r30, 0x014E
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	e9 5d       	subi	r30, 0xD9	; 217
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	40 81       	ld	r20, Z
    1340:	51 81       	ldd	r21, Z+1	; 0x01
    1342:	62 81       	ldd	r22, Z+2	; 0x02
    1344:	73 81       	ldd	r23, Z+3	; 0x03
    1346:	80 91 1d 01 	lds	r24, 0x011D
    134a:	90 91 1e 01 	lds	r25, 0x011E
    134e:	a0 91 1f 01 	lds	r26, 0x011F
    1352:	b0 91 20 01 	lds	r27, 0x0120
    1356:	80 95       	com	r24
    1358:	90 95       	com	r25
    135a:	a0 95       	com	r26
    135c:	b0 95       	com	r27
    135e:	bf 6f       	ori	r27, 0xFF	; 255
    1360:	84 23       	and	r24, r20
    1362:	95 23       	and	r25, r21
    1364:	a6 23       	and	r26, r22
    1366:	b7 23       	and	r27, r23
    1368:	80 83       	st	Z, r24
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	a2 83       	std	Z+2, r26	; 0x02
    136e:	b3 83       	std	Z+3, r27	; 0x03
    1370:	08 95       	ret
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
				}
			}
			break;
		case Light_Off:
			if (blink_count == BLINK_TIME)
    1372:	20 91 04 01 	lds	r18, 0x0104
    1376:	30 91 05 01 	lds	r19, 0x0105
    137a:	80 91 06 01 	lds	r24, 0x0106
    137e:	90 91 07 01 	lds	r25, 0x0107
    1382:	28 17       	cp	r18, r24
    1384:	39 07       	cpc	r19, r25
    1386:	09 f0       	breq	.+2      	; 0x138a <Cursor_blinking+0x284>
    1388:	93 cf       	rjmp	.-218    	; 0x12b0 <Cursor_blinking+0x1aa>
    138a:	4f cf       	rjmp	.-354    	; 0x122a <Cursor_blinking+0x124>
	switch(Blink_State)
	{
		case Blink_Init:
			break;
		case Light_On:
			if (blink_count == BLINK_TIME)
    138c:	20 91 04 01 	lds	r18, 0x0104
    1390:	30 91 05 01 	lds	r19, 0x0105
    1394:	80 91 06 01 	lds	r24, 0x0106
    1398:	90 91 07 01 	lds	r25, 0x0107
    139c:	28 17       	cp	r18, r24
    139e:	39 07       	cpc	r19, r25
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <Cursor_blinking+0x29e>
    13a2:	f6 ce       	rjmp	.-532    	; 0x1190 <Cursor_blinking+0x8a>
    13a4:	08 95       	ret

000013a6 <main>:
PS: Green mostly overpowers the other colors.
************************************************************************************/
int main(void)
{
	//DDRA = 0xFF; PORTA = 0x00;
	DDRB = 0xFF; PORTB = 0x00;
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	84 b9       	out	0x04, r24	; 4
    13aa:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xFE; PORTD = 0x01;
    13ac:	8e ef       	ldi	r24, 0xFE	; 254
    13ae:	8a b9       	out	0x0a, r24	; 10
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	8b b9       	out	0x0b, r24	; 11
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	80 93 49 01 	sts	0x0149, r24
    13c0:	90 93 4a 01 	sts	0x014A, r25
    13c4:	a0 93 4b 01 	sts	0x014B, r26
    13c8:	b0 93 4c 01 	sts	0x014C, r27
	_avr_timer_cntcurr = _avr_timer_M;
    13cc:	80 93 57 01 	sts	0x0157, r24
    13d0:	90 93 58 01 	sts	0x0158, r25
    13d4:	a0 93 59 01 	sts	0x0159, r26
    13d8:	b0 93 5a 01 	sts	0x015A, r27
	//signed long lights = 0x0067BBDC;
	//unsigned char add = -1;
	//unsigned char LED = 0xFF;
	
	TimerSet(1);
	TimerOn();
    13dc:	0e 94 77 00 	call	0xee	; 0xee <TimerOn>
	//int state = sm1_display;
	LED_State = LED_Init;
    13e0:	10 92 5c 01 	sts	0x015C, r1
		
		IF GAME END
		state_of_game = 0;
		
		*/
		NES_Controller();
    13e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <NES_Controller>
		if (state_of_game == 0)
    13e8:	80 91 53 01 	lds	r24, 0x0153
    13ec:	90 91 54 01 	lds	r25, 0x0154
    13f0:	89 2b       	or	r24, r25
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <main+0x52>
		{
			Starting_Game();
    13f4:	aa d8       	rcall	.-3756   	; 0x54a <Starting_Game>
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <main+0x6c>
		}
		else
		{
			LED_Matrix();
    13f8:	ec d8       	rcall	.-3624   	; 0x5d2 <LED_Matrix>
			Cursor_blinking();
    13fa:	85 de       	rcall	.-758    	; 0x1106 <Cursor_blinking>
			Player_Cursor();
    13fc:	15 da       	rcall	.-3030   	; 0x828 <Player_Cursor>
			transmit_data(display_lights & 0xFFFFFFFF);
    13fe:	60 91 4f 01 	lds	r22, 0x014F
    1402:	70 91 50 01 	lds	r23, 0x0150
    1406:	80 91 51 01 	lds	r24, 0x0151
    140a:	90 91 52 01 	lds	r25, 0x0152
    140e:	0e 94 1e 01 	call	0x23c	; 0x23c <transmit_data>
		}
		while (!TimerFlag);
    1412:	80 91 5b 01 	lds	r24, 0x015B
    1416:	88 23       	and	r24, r24
    1418:	e1 f3       	breq	.-8      	; 0x1412 <main+0x6c>
		TimerFlag = 0;
    141a:	10 92 5b 01 	sts	0x015B, r1
		
	}
    141e:	e2 cf       	rjmp	.-60     	; 0x13e4 <main+0x3e>

00001420 <__tablejump2__>:
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31

00001424 <__tablejump__>:
    1424:	05 90       	lpm	r0, Z+
    1426:	f4 91       	lpm	r31, Z
    1428:	e0 2d       	mov	r30, r0
    142a:	09 94       	ijmp

0000142c <do_rand>:
    142c:	8f 92       	push	r8
    142e:	9f 92       	push	r9
    1430:	af 92       	push	r10
    1432:	bf 92       	push	r11
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
    1442:	68 81       	ld	r22, Y
    1444:	79 81       	ldd	r23, Y+1	; 0x01
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	9b 81       	ldd	r25, Y+3	; 0x03
    144a:	61 15       	cp	r22, r1
    144c:	71 05       	cpc	r23, r1
    144e:	81 05       	cpc	r24, r1
    1450:	91 05       	cpc	r25, r1
    1452:	21 f4       	brne	.+8      	; 0x145c <do_rand+0x30>
    1454:	64 e2       	ldi	r22, 0x24	; 36
    1456:	79 ed       	ldi	r23, 0xD9	; 217
    1458:	8b e5       	ldi	r24, 0x5B	; 91
    145a:	97 e0       	ldi	r25, 0x07	; 7
    145c:	2d e1       	ldi	r18, 0x1D	; 29
    145e:	33 ef       	ldi	r19, 0xF3	; 243
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	3a d0       	rcall	.+116    	; 0x14da <__divmodsi4>
    1466:	49 01       	movw	r8, r18
    1468:	5a 01       	movw	r10, r20
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	a7 ea       	ldi	r26, 0xA7	; 167
    1470:	b1 e4       	ldi	r27, 0x41	; 65
    1472:	4f d0       	rcall	.+158    	; 0x1512 <__muluhisi3>
    1474:	6b 01       	movw	r12, r22
    1476:	7c 01       	movw	r14, r24
    1478:	ac ee       	ldi	r26, 0xEC	; 236
    147a:	b4 ef       	ldi	r27, 0xF4	; 244
    147c:	a5 01       	movw	r20, r10
    147e:	94 01       	movw	r18, r8
    1480:	54 d0       	rcall	.+168    	; 0x152a <__mulohisi3>
    1482:	c6 0e       	add	r12, r22
    1484:	d7 1e       	adc	r13, r23
    1486:	e8 1e       	adc	r14, r24
    1488:	f9 1e       	adc	r15, r25
    148a:	f7 fe       	sbrs	r15, 7
    148c:	06 c0       	rjmp	.+12     	; 0x149a <do_rand+0x6e>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	c8 1a       	sub	r12, r24
    1492:	d1 08       	sbc	r13, r1
    1494:	e1 08       	sbc	r14, r1
    1496:	80 e8       	ldi	r24, 0x80	; 128
    1498:	f8 0a       	sbc	r15, r24
    149a:	c8 82       	st	Y, r12
    149c:	d9 82       	std	Y+1, r13	; 0x01
    149e:	ea 82       	std	Y+2, r14	; 0x02
    14a0:	fb 82       	std	Y+3, r15	; 0x03
    14a2:	c6 01       	movw	r24, r12
    14a4:	9f 77       	andi	r25, 0x7F	; 127
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	08 95       	ret

000014bc <rand_r>:
    14bc:	b7 cf       	rjmp	.-146    	; 0x142c <do_rand>

000014be <rand>:
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	b4 cf       	rjmp	.-152    	; 0x142c <do_rand>

000014c4 <srand>:
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	80 93 00 01 	sts	0x0100, r24
    14cc:	90 93 01 01 	sts	0x0101, r25
    14d0:	a0 93 02 01 	sts	0x0102, r26
    14d4:	b0 93 03 01 	sts	0x0103, r27
    14d8:	08 95       	ret

000014da <__divmodsi4>:
    14da:	05 2e       	mov	r0, r21
    14dc:	97 fb       	bst	r25, 7
    14de:	16 f4       	brtc	.+4      	; 0x14e4 <__divmodsi4+0xa>
    14e0:	00 94       	com	r0
    14e2:	0f d0       	rcall	.+30     	; 0x1502 <__negsi2>
    14e4:	57 fd       	sbrc	r21, 7
    14e6:	05 d0       	rcall	.+10     	; 0x14f2 <__divmodsi4_neg2>
    14e8:	24 d0       	rcall	.+72     	; 0x1532 <__udivmodsi4>
    14ea:	07 fc       	sbrc	r0, 7
    14ec:	02 d0       	rcall	.+4      	; 0x14f2 <__divmodsi4_neg2>
    14ee:	46 f4       	brtc	.+16     	; 0x1500 <__divmodsi4_exit>
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <__negsi2>

000014f2 <__divmodsi4_neg2>:
    14f2:	50 95       	com	r21
    14f4:	40 95       	com	r20
    14f6:	30 95       	com	r19
    14f8:	21 95       	neg	r18
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	4f 4f       	sbci	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001500 <__divmodsi4_exit>:
    1500:	08 95       	ret

00001502 <__negsi2>:
    1502:	90 95       	com	r25
    1504:	80 95       	com	r24
    1506:	70 95       	com	r23
    1508:	61 95       	neg	r22
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	08 95       	ret

00001512 <__muluhisi3>:
    1512:	31 d0       	rcall	.+98     	; 0x1576 <__umulhisi3>
    1514:	a5 9f       	mul	r26, r21
    1516:	90 0d       	add	r25, r0
    1518:	b4 9f       	mul	r27, r20
    151a:	90 0d       	add	r25, r0
    151c:	a4 9f       	mul	r26, r20
    151e:	80 0d       	add	r24, r0
    1520:	91 1d       	adc	r25, r1
    1522:	11 24       	eor	r1, r1
    1524:	08 95       	ret

00001526 <__mulshisi3>:
    1526:	b7 ff       	sbrs	r27, 7
    1528:	f4 cf       	rjmp	.-24     	; 0x1512 <__muluhisi3>

0000152a <__mulohisi3>:
    152a:	f3 df       	rcall	.-26     	; 0x1512 <__muluhisi3>
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	08 95       	ret

00001532 <__udivmodsi4>:
    1532:	a1 e2       	ldi	r26, 0x21	; 33
    1534:	1a 2e       	mov	r1, r26
    1536:	aa 1b       	sub	r26, r26
    1538:	bb 1b       	sub	r27, r27
    153a:	fd 01       	movw	r30, r26
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <__udivmodsi4_ep>

0000153e <__udivmodsi4_loop>:
    153e:	aa 1f       	adc	r26, r26
    1540:	bb 1f       	adc	r27, r27
    1542:	ee 1f       	adc	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	a2 17       	cp	r26, r18
    1548:	b3 07       	cpc	r27, r19
    154a:	e4 07       	cpc	r30, r20
    154c:	f5 07       	cpc	r31, r21
    154e:	20 f0       	brcs	.+8      	; 0x1558 <__udivmodsi4_ep>
    1550:	a2 1b       	sub	r26, r18
    1552:	b3 0b       	sbc	r27, r19
    1554:	e4 0b       	sbc	r30, r20
    1556:	f5 0b       	sbc	r31, r21

00001558 <__udivmodsi4_ep>:
    1558:	66 1f       	adc	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	1a 94       	dec	r1
    1562:	69 f7       	brne	.-38     	; 0x153e <__udivmodsi4_loop>
    1564:	60 95       	com	r22
    1566:	70 95       	com	r23
    1568:	80 95       	com	r24
    156a:	90 95       	com	r25
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	bd 01       	movw	r22, r26
    1572:	cf 01       	movw	r24, r30
    1574:	08 95       	ret

00001576 <__umulhisi3>:
    1576:	a2 9f       	mul	r26, r18
    1578:	b0 01       	movw	r22, r0
    157a:	b3 9f       	mul	r27, r19
    157c:	c0 01       	movw	r24, r0
    157e:	a3 9f       	mul	r26, r19
    1580:	70 0d       	add	r23, r0
    1582:	81 1d       	adc	r24, r1
    1584:	11 24       	eor	r1, r1
    1586:	91 1d       	adc	r25, r1
    1588:	b2 9f       	mul	r27, r18
    158a:	70 0d       	add	r23, r0
    158c:	81 1d       	adc	r24, r1
    158e:	11 24       	eor	r1, r1
    1590:	91 1d       	adc	r25, r1
    1592:	08 95       	ret

00001594 <_exit>:
    1594:	f8 94       	cli

00001596 <__stop_program>:
    1596:	ff cf       	rjmp	.-2      	; 0x1596 <__stop_program>
