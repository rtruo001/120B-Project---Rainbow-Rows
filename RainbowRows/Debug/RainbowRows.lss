
RainbowRows.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001126  000011ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080013a  0080013a  000011f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000294  00000000  00000000  00001a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ed  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000538  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047d  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
       2:	00 00       	nop
       4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
       6:	00 00       	nop
       8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
       a:	00 00       	nop
       c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 02       	muls	r31, r18
      8e:	f6 02       	muls	r31, r22
      90:	05 03       	mulsu	r16, r21
      92:	19 03       	fmul	r17, r17
      94:	28 03       	fmul	r18, r16
      96:	3c 03       	fmul	r19, r20
      98:	4b 03       	fmul	r20, r19
      9a:	5f 03       	fmul	r21, r23
      9c:	6e 03       	fmul	r22, r22
      9e:	82 03       	fmuls	r16, r18
      a0:	91 03       	fmuls	r17, r17
      a2:	a5 03       	fmuls	r18, r21
      a4:	b4 03       	fmuls	r19, r20
      a6:	c8 03       	fmulsu	r20, r16
      a8:	d7 03       	fmuls	r21, r23
      aa:	eb 03       	fmulsu	r22, r19
      ac:	fa 03       	fmulsu	r23, r18

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	d0 e4       	ldi	r29, 0x40	; 64
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	e6 e2       	ldi	r30, 0x26	; 38
      c2:	f1 e1       	ldi	r31, 0x11	; 17
      c4:	00 e0       	ldi	r16, 0x00	; 0
      c6:	0b bf       	out	0x3b, r16	; 59
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
      ca:	07 90       	elpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	aa 33       	cpi	r26, 0x3A	; 58
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	aa e3       	ldi	r26, 0x3A	; 58
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	ad 34       	cpi	r26, 0x4D	; 77
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	2a d7       	rcall	.+3668   	; 0xf3a <main>
      e6:	0c 94 91 08 	jmp	0x1122	; 0x1122 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <TimerOn>:
	
	PORTC = column_val; // PORTA displays column pattern
	PORTA = column_sel; // PORTB selects column to display pattern

	return state;
}
      ec:	8b e0       	ldi	r24, 0x0B	; 11
      ee:	80 93 81 00 	sts	0x0081, r24
      f2:	8d e7       	ldi	r24, 0x7D	; 125
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 89 00 	sts	0x0089, r25
      fa:	80 93 88 00 	sts	0x0088, r24
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	80 93 6f 00 	sts	0x006F, r24
     104:	10 92 85 00 	sts	0x0085, r1
     108:	10 92 84 00 	sts	0x0084, r1
     10c:	80 91 35 01 	lds	r24, 0x0135
     110:	90 91 36 01 	lds	r25, 0x0136
     114:	a0 91 37 01 	lds	r26, 0x0137
     118:	b0 91 38 01 	lds	r27, 0x0138
     11c:	80 93 43 01 	sts	0x0143, r24
     120:	90 93 44 01 	sts	0x0144, r25
     124:	a0 93 45 01 	sts	0x0145, r26
     128:	b0 93 46 01 	sts	0x0146, r27
     12c:	8f b7       	in	r24, 0x3f	; 63
     12e:	80 68       	ori	r24, 0x80	; 128
     130:	8f bf       	out	0x3f, r24	; 63
     132:	08 95       	ret

00000134 <__vector_13>:
     134:	1f 92       	push	r1
     136:	0f 92       	push	r0
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	0f 92       	push	r0
     13c:	11 24       	eor	r1, r1
     13e:	8f 93       	push	r24
     140:	9f 93       	push	r25
     142:	af 93       	push	r26
     144:	bf 93       	push	r27
     146:	80 91 43 01 	lds	r24, 0x0143
     14a:	90 91 44 01 	lds	r25, 0x0144
     14e:	a0 91 45 01 	lds	r26, 0x0145
     152:	b0 91 46 01 	lds	r27, 0x0146
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	a1 09       	sbc	r26, r1
     15a:	b1 09       	sbc	r27, r1
     15c:	80 93 43 01 	sts	0x0143, r24
     160:	90 93 44 01 	sts	0x0144, r25
     164:	a0 93 45 01 	sts	0x0145, r26
     168:	b0 93 46 01 	sts	0x0146, r27
     16c:	89 2b       	or	r24, r25
     16e:	8a 2b       	or	r24, r26
     170:	8b 2b       	or	r24, r27
     172:	99 f4       	brne	.+38     	; 0x19a <__vector_13+0x66>
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	80 93 47 01 	sts	0x0147, r24
     17a:	80 91 35 01 	lds	r24, 0x0135
     17e:	90 91 36 01 	lds	r25, 0x0136
     182:	a0 91 37 01 	lds	r26, 0x0137
     186:	b0 91 38 01 	lds	r27, 0x0138
     18a:	80 93 43 01 	sts	0x0143, r24
     18e:	90 93 44 01 	sts	0x0144, r25
     192:	a0 93 45 01 	sts	0x0145, r26
     196:	b0 93 46 01 	sts	0x0146, r27
     19a:	bf 91       	pop	r27
     19c:	af 91       	pop	r26
     19e:	9f 91       	pop	r25
     1a0:	8f 91       	pop	r24
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	0f 90       	pop	r0
     1a8:	1f 90       	pop	r1
     1aa:	18 95       	reti

000001ac <transmit_data>:
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	f8 e0       	ldi	r31, 0x08	; 8
     1ba:	f5 b9       	out	0x05, r31	; 5
     1bc:	e5 b1       	in	r30, 0x05	; 5
     1be:	6b 01       	movw	r12, r22
     1c0:	7c 01       	movw	r14, r24
     1c2:	02 2e       	mov	r0, r18
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <transmit_data+0x22>
     1c6:	f5 94       	asr	r15
     1c8:	e7 94       	ror	r14
     1ca:	d7 94       	ror	r13
     1cc:	c7 94       	ror	r12
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <transmit_data+0x1a>
     1d2:	4c 2d       	mov	r20, r12
     1d4:	41 70       	andi	r20, 0x01	; 1
     1d6:	4e 2b       	or	r20, r30
     1d8:	45 b9       	out	0x05, r20	; 5
     1da:	29 9a       	sbi	0x05, 1	; 5
     1dc:	2f 5f       	subi	r18, 0xFF	; 255
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	20 32       	cpi	r18, 0x20	; 32
     1e2:	31 05       	cpc	r19, r1
     1e4:	51 f7       	brne	.-44     	; 0x1ba <transmit_data+0xe>
     1e6:	2a 9a       	sbi	0x05, 2	; 5
     1e8:	15 b8       	out	0x05, r1	; 5
     1ea:	ff 90       	pop	r15
     1ec:	ef 90       	pop	r14
     1ee:	df 90       	pop	r13
     1f0:	cf 90       	pop	r12
     1f2:	08 95       	ret

000001f4 <NES_Controller>:
     1f4:	10 92 42 01 	sts	0x0142, r1
     1f8:	10 92 41 01 	sts	0x0141, r1
     1fc:	27 e0       	ldi	r18, 0x07	; 7
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <NES_Controller+0xe>
     200:	21 50       	subi	r18, 0x01	; 1
     202:	27 30       	cpi	r18, 0x07	; 7
     204:	c9 f4       	brne	.+50     	; 0x238 <NES_Controller+0x44>
     206:	59 9a       	sbi	0x0b, 1	; 11
     208:	48 9b       	sbis	0x09, 0	; 9
     20a:	0a c0       	rjmp	.+20     	; 0x220 <NES_Controller+0x2c>
     20c:	80 91 41 01 	lds	r24, 0x0141
     210:	90 91 42 01 	lds	r25, 0x0142
     214:	80 68       	ori	r24, 0x80	; 128
     216:	90 93 42 01 	sts	0x0142, r25
     21a:	80 93 41 01 	sts	0x0141, r24
     21e:	0a c0       	rjmp	.+20     	; 0x234 <NES_Controller+0x40>
     220:	80 91 41 01 	lds	r24, 0x0141
     224:	90 91 42 01 	lds	r25, 0x0142
     228:	8f 77       	andi	r24, 0x7F	; 127
     22a:	99 27       	eor	r25, r25
     22c:	90 93 42 01 	sts	0x0142, r25
     230:	80 93 41 01 	sts	0x0141, r24
     234:	1b b8       	out	0x0b, r1	; 11
     236:	e4 cf       	rjmp	.-56     	; 0x200 <NES_Controller+0xc>
     238:	80 91 41 01 	lds	r24, 0x0141
     23c:	90 91 42 01 	lds	r25, 0x0142
     240:	96 95       	lsr	r25
     242:	87 95       	ror	r24
     244:	90 93 42 01 	sts	0x0142, r25
     248:	80 93 41 01 	sts	0x0141, r24
     24c:	5a 9a       	sbi	0x0b, 2	; 11
     24e:	48 9b       	sbis	0x09, 0	; 9
     250:	0a c0       	rjmp	.+20     	; 0x266 <NES_Controller+0x72>
     252:	80 91 41 01 	lds	r24, 0x0141
     256:	90 91 42 01 	lds	r25, 0x0142
     25a:	80 68       	ori	r24, 0x80	; 128
     25c:	90 93 42 01 	sts	0x0142, r25
     260:	80 93 41 01 	sts	0x0141, r24
     264:	0a c0       	rjmp	.+20     	; 0x27a <NES_Controller+0x86>
     266:	80 91 41 01 	lds	r24, 0x0141
     26a:	90 91 42 01 	lds	r25, 0x0142
     26e:	8f 77       	andi	r24, 0x7F	; 127
     270:	99 27       	eor	r25, r25
     272:	90 93 42 01 	sts	0x0142, r25
     276:	80 93 41 01 	sts	0x0141, r24
     27a:	1b b8       	out	0x0b, r1	; 11
     27c:	21 11       	cpse	r18, r1
     27e:	c0 cf       	rjmp	.-128    	; 0x200 <NES_Controller+0xc>
     280:	08 95       	ret

00000282 <Init_LED>:
const unsigned char GREEN_LIGHT = 0;
const unsigned char BLUE_LIGHT = 1;

signed long col_states[8] = {0x01FFFFFF, 0x02FFFFFF, 0x04FFFFFF, 0x08FFFFFF, 0x10FFFFFF, 0x20FFFFFF, 0x40FFFFFF, 0x80FFFFFF};
void Init_LED()
{
     282:	2f 92       	push	r2
     284:	3f 92       	push	r3
     286:	4f 92       	push	r4
     288:	5f 92       	push	r5
     28a:	6f 92       	push	r6
     28c:	7f 92       	push	r7
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	28 97       	sbiw	r28, 0x08	; 8
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
	//Restarts and initializes all the columns to their basic state.
	col_states[0] = 0x01FFFFFF;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	9f ef       	ldi	r25, 0xFF	; 255
     2ba:	af ef       	ldi	r26, 0xFF	; 255
     2bc:	b1 e0       	ldi	r27, 0x01	; 1
     2be:	80 93 13 01 	sts	0x0113, r24
     2c2:	90 93 14 01 	sts	0x0114, r25
     2c6:	a0 93 15 01 	sts	0x0115, r26
     2ca:	b0 93 16 01 	sts	0x0116, r27
	col_states[1] = 0x02FFFFFF;
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	9f ef       	ldi	r25, 0xFF	; 255
     2d2:	af ef       	ldi	r26, 0xFF	; 255
     2d4:	b2 e0       	ldi	r27, 0x02	; 2
     2d6:	80 93 17 01 	sts	0x0117, r24
     2da:	90 93 18 01 	sts	0x0118, r25
     2de:	a0 93 19 01 	sts	0x0119, r26
     2e2:	b0 93 1a 01 	sts	0x011A, r27
	col_states[2] = 0x04FFFFFF;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	9f ef       	ldi	r25, 0xFF	; 255
     2ea:	af ef       	ldi	r26, 0xFF	; 255
     2ec:	b4 e0       	ldi	r27, 0x04	; 4
     2ee:	80 93 1b 01 	sts	0x011B, r24
     2f2:	90 93 1c 01 	sts	0x011C, r25
     2f6:	a0 93 1d 01 	sts	0x011D, r26
     2fa:	b0 93 1e 01 	sts	0x011E, r27
	col_states[3] = 0x08FFFFFF;
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	9f ef       	ldi	r25, 0xFF	; 255
     302:	af ef       	ldi	r26, 0xFF	; 255
     304:	b8 e0       	ldi	r27, 0x08	; 8
     306:	80 93 1f 01 	sts	0x011F, r24
     30a:	90 93 20 01 	sts	0x0120, r25
     30e:	a0 93 21 01 	sts	0x0121, r26
     312:	b0 93 22 01 	sts	0x0122, r27
	col_states[4] = 0x10FFFFFF;
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	9f ef       	ldi	r25, 0xFF	; 255
     31a:	af ef       	ldi	r26, 0xFF	; 255
     31c:	b0 e1       	ldi	r27, 0x10	; 16
     31e:	80 93 23 01 	sts	0x0123, r24
     322:	90 93 24 01 	sts	0x0124, r25
     326:	a0 93 25 01 	sts	0x0125, r26
     32a:	b0 93 26 01 	sts	0x0126, r27
	col_states[5] = 0x20FFFFFF;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	9f ef       	ldi	r25, 0xFF	; 255
     332:	af ef       	ldi	r26, 0xFF	; 255
     334:	b0 e2       	ldi	r27, 0x20	; 32
     336:	80 93 27 01 	sts	0x0127, r24
     33a:	90 93 28 01 	sts	0x0128, r25
     33e:	a0 93 29 01 	sts	0x0129, r26
     342:	b0 93 2a 01 	sts	0x012A, r27
	col_states[6] = 0x40FFFFFF;
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	9f ef       	ldi	r25, 0xFF	; 255
     34a:	af ef       	ldi	r26, 0xFF	; 255
     34c:	b0 e4       	ldi	r27, 0x40	; 64
     34e:	80 93 2b 01 	sts	0x012B, r24
     352:	90 93 2c 01 	sts	0x012C, r25
     356:	a0 93 2d 01 	sts	0x012D, r26
     35a:	b0 93 2e 01 	sts	0x012E, r27
	col_states[7] = 0x80FFFFFF;
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	9f ef       	ldi	r25, 0xFF	; 255
     362:	af ef       	ldi	r26, 0xFF	; 255
     364:	b0 e8       	ldi	r27, 0x80	; 128
     366:	80 93 2f 01 	sts	0x012F, r24
     36a:	90 93 30 01 	sts	0x0130, r25
     36e:	a0 93 31 01 	sts	0x0131, r26
     372:	b0 93 32 01 	sts	0x0132, r27
     376:	0f 2e       	mov	r0, r31
     378:	f3 e1       	ldi	r31, 0x13	; 19
     37a:	2f 2e       	mov	r2, r31
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	3f 2e       	mov	r3, r31
     380:	f0 2d       	mov	r31, r0
	//This variable is initialized as an LED with all columns and rows turned off except the first column.
	signed long var_init_LED = 0x01FFFFFF;
     382:	2f ef       	ldi	r18, 0xFF	; 255
     384:	3f ef       	ldi	r19, 0xFF	; 255
     386:	4f ef       	ldi	r20, 0xFF	; 255
     388:	51 e0       	ldi	r21, 0x01	; 1
     38a:	29 83       	std	Y+1, r18	; 0x01
     38c:	3a 83       	std	Y+2, r19	; 0x02
     38e:	4b 83       	std	Y+3, r20	; 0x03
     390:	5c 83       	std	Y+4, r21	; 0x04
	//The following variables are initialized to which bits would be Red, Green, or Blue.
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
	signed long blue_mask = 0x01FFFEFF;
     392:	0f 2e       	mov	r0, r31
     394:	88 24       	eor	r8, r8
     396:	8a 94       	dec	r8
     398:	fe ef       	ldi	r31, 0xFE	; 254
     39a:	9f 2e       	mov	r9, r31
     39c:	a8 2c       	mov	r10, r8
     39e:	bb 24       	eor	r11, r11
     3a0:	b3 94       	inc	r11
     3a2:	f0 2d       	mov	r31, r0
	col_states[7] = 0x80FFFFFF;
	//This variable is initialized as an LED with all columns and rows turned off except the first column.
	signed long var_init_LED = 0x01FFFFFF;
	//The following variables are initialized to which bits would be Red, Green, or Blue.
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
     3a4:	0f 2e       	mov	r0, r31
     3a6:	cc 24       	eor	r12, r12
     3a8:	ca 94       	dec	r12
     3aa:	dc 2c       	mov	r13, r12
     3ac:	fe ef       	ldi	r31, 0xFE	; 254
     3ae:	ef 2e       	mov	r14, r31
     3b0:	ff 24       	eor	r15, r15
     3b2:	f3 94       	inc	r15
     3b4:	f0 2d       	mov	r31, r0
     3b6:	96 c0       	rjmp	.+300    	; 0x4e4 <Init_LED+0x262>
	for (unsigned char i = 0; i < 8; ++i)
	{
		for (unsigned char j = 0; j < 8; ++j)
		{
			//var_init_LED
			if (seed_randomize >= 10000)
     3b8:	80 91 33 01 	lds	r24, 0x0133
     3bc:	90 91 34 01 	lds	r25, 0x0134
     3c0:	80 31       	cpi	r24, 0x10	; 16
     3c2:	37 e2       	ldi	r19, 0x27	; 39
     3c4:	93 07       	cpc	r25, r19
     3c6:	3c f0       	brlt	.+14     	; 0x3d6 <Init_LED+0x154>
			{
				seed_randomize = 1;
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	50 93 34 01 	sts	0x0134, r21
     3d0:	40 93 33 01 	sts	0x0133, r20
     3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <Init_LED+0x15e>
			}
			else
			{
				++seed_randomize;
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	90 93 34 01 	sts	0x0134, r25
     3dc:	80 93 33 01 	sts	0x0133, r24
			//1 - blue.
			//If red was used, 0 1 and 2 would be generated. 
			//0 - red
			//1 - green
			//2 - blue
			rand_num = rand() % 2;
     3e0:	35 d6       	rcall	.+3178   	; 0x104c <rand>
     3e2:	81 70       	andi	r24, 0x01	; 1
     3e4:	90 78       	andi	r25, 0x80	; 128
     3e6:	99 23       	and	r25, r25
     3e8:	24 f4       	brge	.+8      	; 0x3f2 <Init_LED+0x170>
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	8e 6f       	ori	r24, 0xFE	; 254
     3ee:	9f 6f       	ori	r25, 0xFF	; 255
     3f0:	01 96       	adiw	r24, 0x01	; 1
		//The Red mask would be used if the red color was used in the game.
		//	if (rand_num == RED_LIGHT)
		//	{
		//		col_states[i] = var_init_LED & (col_states[i] & red_mask);
		//	}
			if (rand_num == GREEN_LIGHT)
     3f2:	00 97       	sbiw	r24, 0x00	; 0
     3f4:	b9 f4       	brne	.+46     	; 0x424 <Init_LED+0x1a2>
			{
				col_states[i] = var_init_LED & (col_states[i] & green_mask);
     3f6:	ef 81       	ldd	r30, Y+7	; 0x07
     3f8:	f8 85       	ldd	r31, Y+8	; 0x08
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	a2 81       	ldd	r26, Z+2	; 0x02
     400:	b3 81       	ldd	r27, Z+3	; 0x03
     402:	29 81       	ldd	r18, Y+1	; 0x01
     404:	3a 81       	ldd	r19, Y+2	; 0x02
     406:	4b 81       	ldd	r20, Y+3	; 0x03
     408:	5c 81       	ldd	r21, Y+4	; 0x04
     40a:	82 23       	and	r24, r18
     40c:	93 23       	and	r25, r19
     40e:	a4 23       	and	r26, r20
     410:	b5 23       	and	r27, r21
     412:	8c 21       	and	r24, r12
     414:	9d 21       	and	r25, r13
     416:	ae 21       	and	r26, r14
     418:	bf 21       	and	r27, r15
     41a:	80 83       	st	Z, r24
     41c:	91 83       	std	Z+1, r25	; 0x01
     41e:	a2 83       	std	Z+2, r26	; 0x02
     420:	b3 83       	std	Z+3, r27	; 0x03
     422:	18 c0       	rjmp	.+48     	; 0x454 <Init_LED+0x1d2>
			}
			else if (rand_num == BLUE_LIGHT)
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	b1 f4       	brne	.+44     	; 0x454 <Init_LED+0x1d2>
			{
				col_states[i] = var_init_LED & (col_states[i] & blue_mask);
     428:	ef 81       	ldd	r30, Y+7	; 0x07
     42a:	f8 85       	ldd	r31, Y+8	; 0x08
     42c:	80 81       	ld	r24, Z
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	a2 81       	ldd	r26, Z+2	; 0x02
     432:	b3 81       	ldd	r27, Z+3	; 0x03
     434:	29 81       	ldd	r18, Y+1	; 0x01
     436:	3a 81       	ldd	r19, Y+2	; 0x02
     438:	4b 81       	ldd	r20, Y+3	; 0x03
     43a:	5c 81       	ldd	r21, Y+4	; 0x04
     43c:	82 23       	and	r24, r18
     43e:	93 23       	and	r25, r19
     440:	a4 23       	and	r26, r20
     442:	b5 23       	and	r27, r21
     444:	88 21       	and	r24, r8
     446:	99 21       	and	r25, r9
     448:	aa 21       	and	r26, r10
     44a:	bb 21       	and	r27, r11
     44c:	80 83       	st	Z, r24
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	a2 83       	std	Z+2, r26	; 0x02
     452:	b3 83       	std	Z+3, r27	; 0x03
			}
			
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
     454:	8d 81       	ldd	r24, Y+5	; 0x05
     456:	90 2f       	mov	r25, r16
     458:	a1 2f       	mov	r26, r17
     45a:	b2 2d       	mov	r27, r2
     45c:	cc 0c       	add	r12, r12
     45e:	dd 1c       	adc	r13, r13
     460:	ee 1c       	adc	r14, r14
     462:	ff 1c       	adc	r15, r15
     464:	e8 94       	clt
     466:	c0 f8       	bld	r12, 0
     468:	ff 24       	eor	r15, r15
     46a:	c4 28       	or	r12, r4
     46c:	d5 28       	or	r13, r5
     46e:	e6 28       	or	r14, r6
     470:	f7 28       	or	r15, r7
			blue_mask = (var_init_LED & 0xFF000000) | (((blue_mask << 1) | 0x00000001) & 0x00FFFFFF);
     472:	88 0c       	add	r8, r8
     474:	99 1c       	adc	r9, r9
     476:	aa 1c       	adc	r10, r10
     478:	bb 1c       	adc	r11, r11
     47a:	e8 94       	clt
     47c:	80 f8       	bld	r8, 0
     47e:	bb 24       	eor	r11, r11
     480:	84 28       	or	r8, r4
     482:	95 28       	or	r9, r5
     484:	a6 28       	or	r10, r6
     486:	b7 28       	or	r11, r7
     488:	3a 94       	dec	r3
	signed long blue_mask = 0x01FFFEFF;
	signed short rand_num = 0;
	
	for (unsigned char i = 0; i < 8; ++i)
	{
		for (unsigned char j = 0; j < 8; ++j)
     48a:	09 f0       	breq	.+2      	; 0x48e <Init_LED+0x20c>
     48c:	95 cf       	rjmp	.-214    	; 0x3b8 <Init_LED+0x136>
     48e:	2f 80       	ldd	r2, Y+7	; 0x07
     490:	38 84       	ldd	r3, Y+8	; 0x08
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
			blue_mask = (var_init_LED & 0xFF000000) | (((blue_mask << 1) | 0x00000001) & 0x00FFFFFF);
		}
		var_init_LED = ((var_init_LED & 0xFF000000) << 1) | 0x00FFFFFF;
     492:	88 27       	eor	r24, r24
     494:	99 27       	eor	r25, r25
     496:	aa 27       	eor	r26, r26
     498:	4c 01       	movw	r8, r24
     49a:	5d 01       	movw	r10, r26
     49c:	88 0c       	add	r8, r8
     49e:	99 1c       	adc	r9, r9
     4a0:	aa 1c       	adc	r10, r10
     4a2:	bb 1c       	adc	r11, r11
     4a4:	a5 01       	movw	r20, r10
     4a6:	94 01       	movw	r18, r8
     4a8:	2f 6f       	ori	r18, 0xFF	; 255
     4aa:	3f 6f       	ori	r19, 0xFF	; 255
     4ac:	4f 6f       	ori	r20, 0xFF	; 255
     4ae:	29 83       	std	Y+1, r18	; 0x01
     4b0:	3a 83       	std	Y+2, r19	; 0x02
     4b2:	4b 83       	std	Y+3, r20	; 0x03
     4b4:	5c 83       	std	Y+4, r21	; 0x04
		
	//The Red mask would be used if the red color was used in the game.
	//	red_mask = (var_init_LED & 0xFF000000) | 0x00FFFFFE;
		green_mask = (var_init_LED & 0xFF000000) | 0x00FEFFFF;
     4b6:	88 24       	eor	r8, r8
     4b8:	99 24       	eor	r9, r9
     4ba:	aa 24       	eor	r10, r10
     4bc:	75 01       	movw	r14, r10
     4be:	64 01       	movw	r12, r8
     4c0:	cc 24       	eor	r12, r12
     4c2:	ca 94       	dec	r12
     4c4:	dc 2c       	mov	r13, r12
     4c6:	3e ef       	ldi	r19, 0xFE	; 254
     4c8:	e3 2a       	or	r14, r19
		blue_mask = (var_init_LED & 0xFF000000) | 0x00FFFEFF;
     4ca:	88 24       	eor	r8, r8
     4cc:	8a 94       	dec	r8
     4ce:	4e ef       	ldi	r20, 0xFE	; 254
     4d0:	94 2a       	or	r9, r20
     4d2:	a8 2c       	mov	r10, r8
     4d4:	54 e0       	ldi	r21, 0x04	; 4
     4d6:	25 0e       	add	r2, r21
     4d8:	31 1c       	adc	r3, r1
//	signed long red_mask = 0x01FFFFFE;
	signed long green_mask = 0x01FEFFFF;
	signed long blue_mask = 0x01FFFEFF;
	signed short rand_num = 0;
	
	for (unsigned char i = 0; i < 8; ++i)
     4da:	83 e3       	ldi	r24, 0x33	; 51
     4dc:	28 16       	cp	r2, r24
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	38 06       	cpc	r3, r24
     4e2:	c1 f0       	breq	.+48     	; 0x514 <Init_LED+0x292>
const unsigned char GREEN_LIGHT = 0;
const unsigned char BLUE_LIGHT = 1;

signed long col_states[8] = {0x01FFFFFF, 0x02FFFFFF, 0x04FFFFFF, 0x08FFFFFF, 0x10FFFFFF, 0x20FFFFFF, 0x40FFFFFF, 0x80FFFFFF};
void Init_LED()
{
     4e4:	98 e0       	ldi	r25, 0x08	; 8
     4e6:	9e 83       	std	Y+6, r25	; 0x06
				col_states[i] = var_init_LED & (col_states[i] & blue_mask);
			}
			
		//The Red mask would be used if the red color was used in the game.
		//	red_mask = (var_init_LED & 0xFF000000) | (((red_mask << 1) | 0x00000001) & 0x00FFFFFF);
			green_mask = (var_init_LED & 0xFF000000) | (((green_mask << 1) | 0x00000001) & 0x00FFFFFF);
     4e8:	a9 81       	ldd	r26, Y+1	; 0x01
     4ea:	ad 83       	std	Y+5, r26	; 0x05
     4ec:	0a 81       	ldd	r16, Y+2	; 0x02
     4ee:	1b 81       	ldd	r17, Y+3	; 0x03
     4f0:	bc 81       	ldd	r27, Y+4	; 0x04
     4f2:	49 80       	ldd	r4, Y+1	; 0x01
     4f4:	5a 80       	ldd	r5, Y+2	; 0x02
     4f6:	6b 80       	ldd	r6, Y+3	; 0x03
     4f8:	7c 80       	ldd	r7, Y+4	; 0x04
     4fa:	44 24       	eor	r4, r4
     4fc:	55 24       	eor	r5, r5
     4fe:	66 24       	eor	r6, r6
     500:	68 94       	set
     502:	40 f8       	bld	r4, 0
     504:	c1 01       	movw	r24, r2
     506:	68 94       	set
     508:	33 24       	eor	r3, r3
     50a:	33 f8       	bld	r3, 3
     50c:	98 87       	std	Y+8, r25	; 0x08
     50e:	8f 83       	std	Y+7, r24	; 0x07
     510:	2b 2e       	mov	r2, r27
     512:	52 cf       	rjmp	.-348    	; 0x3b8 <Init_LED+0x136>
	//The Red mask would be used if the red color was used in the game.
	//	red_mask = (var_init_LED & 0xFF000000) | 0x00FFFFFE;
		green_mask = (var_init_LED & 0xFF000000) | 0x00FEFFFF;
		blue_mask = (var_init_LED & 0xFF000000) | 0x00FFFEFF;
	}
}
     514:	28 96       	adiw	r28, 0x08	; 8
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	cf 90       	pop	r12
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	9f 90       	pop	r9
     536:	8f 90       	pop	r8
     538:	7f 90       	pop	r7
     53a:	6f 90       	pop	r6
     53c:	5f 90       	pop	r5
     53e:	4f 90       	pop	r4
     540:	3f 90       	pop	r3
     542:	2f 90       	pop	r2
     544:	08 95       	ret

00000546 <Starting_Game>:
//It will only change to 1 if the user pushes start at the beginning.
unsigned short state_of_game = 0;
void Starting_Game()
{
	//Transitions
	switch(Game_State)
     546:	80 91 4b 01 	lds	r24, 0x014B
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	41 f0       	breq	.+16     	; 0x55e <Starting_Game+0x18>
     54e:	18 f0       	brcs	.+6      	; 0x556 <Starting_Game+0x10>
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	89 f1       	breq	.+98     	; 0x5b6 <Starting_Game+0x70>
     554:	39 c0       	rjmp	.+114    	; 0x5c8 <Starting_Game+0x82>
	{
		case Game_Init:
			Game_State = Game_Wait;
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 4b 01 	sts	0x014B, r24
			break;
     55c:	08 95       	ret
		case Game_Wait:
			if (seed_randomize >= 10000)
     55e:	80 91 33 01 	lds	r24, 0x0133
     562:	90 91 34 01 	lds	r25, 0x0134
     566:	80 31       	cpi	r24, 0x10	; 16
     568:	27 e2       	ldi	r18, 0x27	; 39
     56a:	92 07       	cpc	r25, r18
     56c:	3c f0       	brlt	.+14     	; 0x57c <Starting_Game+0x36>
			{
				seed_randomize = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 34 01 	sts	0x0134, r25
     576:	80 93 33 01 	sts	0x0133, r24
     57a:	05 c0       	rjmp	.+10     	; 0x586 <Starting_Game+0x40>
			}
			else
			{
				++seed_randomize;
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	90 93 34 01 	sts	0x0134, r25
     582:	80 93 33 01 	sts	0x0133, r24
			}
			if ((button & Start_Button) == 0x00)
     586:	80 91 41 01 	lds	r24, 0x0141
     58a:	84 fd       	sbrc	r24, 4
     58c:	10 c0       	rjmp	.+32     	; 0x5ae <Starting_Game+0x68>
			{
				//Here comes the exciting part
				state_of_game = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 40 01 	sts	0x0140, r25
     596:	80 93 3f 01 	sts	0x013F, r24
				//Initializes the seed for the random.
				srand(seed_randomize);
     59a:	80 91 33 01 	lds	r24, 0x0133
     59e:	90 91 34 01 	lds	r25, 0x0134
     5a2:	57 d5       	rcall	.+2734   	; 0x1052 <srand>
				Init_LED();
     5a4:	6e de       	rcall	.-804    	; 0x282 <Init_LED>
				Game_State = Game_Start;
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	80 93 4b 01 	sts	0x014B, r24
     5ac:	08 95       	ret
			}
			else
			{
				Game_State = Game_Wait;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 4b 01 	sts	0x014B, r24
     5b4:	08 95       	ret
			}
			break;
		case Game_Start:
			if (state_of_game == 0)
     5b6:	80 91 3f 01 	lds	r24, 0x013F
     5ba:	90 91 40 01 	lds	r25, 0x0140
     5be:	89 2b       	or	r24, r25
     5c0:	29 f4       	brne	.+10     	; 0x5cc <Starting_Game+0x86>
			{
				Game_State = Game_Init;
     5c2:	10 92 4b 01 	sts	0x014B, r1
     5c6:	08 95       	ret
			}
			break;
		default:
			Game_State = Game_Init;
     5c8:	10 92 4b 01 	sts	0x014B, r1
     5cc:	08 95       	ret

000005ce <LED_Matrix>:
	
void LED_Matrix()
{
	//Transitions
	//Goes from state column on, to column off, to the next column on. The cycle continues.
	switch(LED_State)
     5ce:	80 91 48 01 	lds	r24, 0x0148
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	81 31       	cpi	r24, 0x11	; 17
     5d6:	91 05       	cpc	r25, r1
     5d8:	08 f0       	brcs	.+2      	; 0x5dc <LED_Matrix+0xe>
     5da:	10 c1       	rjmp	.+544    	; 0x7fc <LED_Matrix+0x22e>
     5dc:	fc 01       	movw	r30, r24
     5de:	ea 5b       	subi	r30, 0xBA	; 186
     5e0:	ff 4f       	sbci	r31, 0xFF	; 255
     5e2:	e5 c4       	rjmp	.+2506   	; 0xfae <__tablejump2__>
	{
		case LED_Init:
			LED_State = col0;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 48 01 	sts	0x0148, r24
			break;
     5ea:	0b c1       	rjmp	.+534    	; 0x802 <LED_Matrix+0x234>
		case col0:
			LED_State = col0_off;
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	80 93 48 01 	sts	0x0148, r24
			display_lights = col_states[7];
			break;
			
		//Turns column of the LED's off.
		case col0_off:
			display_lights = 0x00FFFFFFFF;
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	9f ef       	ldi	r25, 0xFF	; 255
     5f6:	dc 01       	movw	r26, r24
     5f8:	80 93 3b 01 	sts	0x013B, r24
     5fc:	90 93 3c 01 	sts	0x013C, r25
     600:	a0 93 3d 01 	sts	0x013D, r26
     604:	b0 93 3e 01 	sts	0x013E, r27
			break;
     608:	08 95       	ret
			break;
		case col0:
			LED_State = col0_off;
			break;
		case col0_off:
			LED_State = col1;
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	80 93 48 01 	sts	0x0148, r24
			break;
		case col0:
			display_lights = col_states[0];
			break;
		case col1:
			display_lights = col_states[1];
     610:	80 91 17 01 	lds	r24, 0x0117
     614:	90 91 18 01 	lds	r25, 0x0118
     618:	a0 91 19 01 	lds	r26, 0x0119
     61c:	b0 91 1a 01 	lds	r27, 0x011A
     620:	80 93 3b 01 	sts	0x013B, r24
     624:	90 93 3c 01 	sts	0x013C, r25
     628:	a0 93 3d 01 	sts	0x013D, r26
     62c:	b0 93 3e 01 	sts	0x013E, r27
			break;
     630:	08 95       	ret
			break;
		case col0_off:
			LED_State = col1;
			break;
		case col1:
			LED_State = col1_off;
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	80 93 48 01 	sts	0x0148, r24
		//Turns column of the LED's off.
		case col0_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col1_off:
			display_lights = 0x00FFFFFFFF;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	dc 01       	movw	r26, r24
     63e:	80 93 3b 01 	sts	0x013B, r24
     642:	90 93 3c 01 	sts	0x013C, r25
     646:	a0 93 3d 01 	sts	0x013D, r26
     64a:	b0 93 3e 01 	sts	0x013E, r27
			break;
     64e:	08 95       	ret
			break;
		case col1:
			LED_State = col1_off;
			break;
		case col1_off:
			LED_State = col2;
     650:	85 e0       	ldi	r24, 0x05	; 5
     652:	80 93 48 01 	sts	0x0148, r24
			break;
		case col1:
			display_lights = col_states[1];
			break;
		case col2:
			display_lights = col_states[2];
     656:	80 91 1b 01 	lds	r24, 0x011B
     65a:	90 91 1c 01 	lds	r25, 0x011C
     65e:	a0 91 1d 01 	lds	r26, 0x011D
     662:	b0 91 1e 01 	lds	r27, 0x011E
     666:	80 93 3b 01 	sts	0x013B, r24
     66a:	90 93 3c 01 	sts	0x013C, r25
     66e:	a0 93 3d 01 	sts	0x013D, r26
     672:	b0 93 3e 01 	sts	0x013E, r27
			break;
     676:	08 95       	ret
			break;
		case col1_off:
			LED_State = col2;
			break;
		case col2:
			LED_State = col2_off;
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	80 93 48 01 	sts	0x0148, r24
			break;
		case col1_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col2_off:
			display_lights = 0x00FFFFFFFF;
     67e:	8f ef       	ldi	r24, 0xFF	; 255
     680:	9f ef       	ldi	r25, 0xFF	; 255
     682:	dc 01       	movw	r26, r24
     684:	80 93 3b 01 	sts	0x013B, r24
     688:	90 93 3c 01 	sts	0x013C, r25
     68c:	a0 93 3d 01 	sts	0x013D, r26
     690:	b0 93 3e 01 	sts	0x013E, r27
			break;
     694:	08 95       	ret
			break;
		case col2:
			LED_State = col2_off;
			break;
		case col2_off:
			LED_State = col3;
     696:	87 e0       	ldi	r24, 0x07	; 7
     698:	80 93 48 01 	sts	0x0148, r24
			break;
		case col2:
			display_lights = col_states[2];
			break;
		case col3:
			display_lights = col_states[3];
     69c:	80 91 1f 01 	lds	r24, 0x011F
     6a0:	90 91 20 01 	lds	r25, 0x0120
     6a4:	a0 91 21 01 	lds	r26, 0x0121
     6a8:	b0 91 22 01 	lds	r27, 0x0122
     6ac:	80 93 3b 01 	sts	0x013B, r24
     6b0:	90 93 3c 01 	sts	0x013C, r25
     6b4:	a0 93 3d 01 	sts	0x013D, r26
     6b8:	b0 93 3e 01 	sts	0x013E, r27
			break;
     6bc:	08 95       	ret
			break;
		case col2_off:
			LED_State = col3;
			break;
		case col3:
			LED_State = col3_off;
     6be:	88 e0       	ldi	r24, 0x08	; 8
     6c0:	80 93 48 01 	sts	0x0148, r24
			break;
		case col2_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col3_off:
			display_lights = 0x00FFFFFFFF;
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	9f ef       	ldi	r25, 0xFF	; 255
     6c8:	dc 01       	movw	r26, r24
     6ca:	80 93 3b 01 	sts	0x013B, r24
     6ce:	90 93 3c 01 	sts	0x013C, r25
     6d2:	a0 93 3d 01 	sts	0x013D, r26
     6d6:	b0 93 3e 01 	sts	0x013E, r27
			break;
     6da:	08 95       	ret
			break;
		case col3:
			LED_State = col3_off;
			break;
		case col3_off:
			LED_State = col4;
     6dc:	89 e0       	ldi	r24, 0x09	; 9
     6de:	80 93 48 01 	sts	0x0148, r24
			break;
		case col3:
			display_lights = col_states[3];
			break;
		case col4:
			display_lights = col_states[4];
     6e2:	80 91 23 01 	lds	r24, 0x0123
     6e6:	90 91 24 01 	lds	r25, 0x0124
     6ea:	a0 91 25 01 	lds	r26, 0x0125
     6ee:	b0 91 26 01 	lds	r27, 0x0126
     6f2:	80 93 3b 01 	sts	0x013B, r24
     6f6:	90 93 3c 01 	sts	0x013C, r25
     6fa:	a0 93 3d 01 	sts	0x013D, r26
     6fe:	b0 93 3e 01 	sts	0x013E, r27
			break;
     702:	08 95       	ret
			break;
		case col3_off:
			LED_State = col4;
			break;
		case col4:
			LED_State = col4_off;
     704:	8a e0       	ldi	r24, 0x0A	; 10
     706:	80 93 48 01 	sts	0x0148, r24
			break;
		case col3_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col4_off:
			display_lights = 0x00FFFFFFFF;
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	9f ef       	ldi	r25, 0xFF	; 255
     70e:	dc 01       	movw	r26, r24
     710:	80 93 3b 01 	sts	0x013B, r24
     714:	90 93 3c 01 	sts	0x013C, r25
     718:	a0 93 3d 01 	sts	0x013D, r26
     71c:	b0 93 3e 01 	sts	0x013E, r27
			break;
     720:	08 95       	ret
			break;
		case col4:
			LED_State = col4_off;
			break;
		case col4_off:
			LED_State = col5;
     722:	8b e0       	ldi	r24, 0x0B	; 11
     724:	80 93 48 01 	sts	0x0148, r24
			break;
		case col4:
			display_lights = col_states[4];
			break;
		case col5:
			display_lights = col_states[5];
     728:	80 91 27 01 	lds	r24, 0x0127
     72c:	90 91 28 01 	lds	r25, 0x0128
     730:	a0 91 29 01 	lds	r26, 0x0129
     734:	b0 91 2a 01 	lds	r27, 0x012A
     738:	80 93 3b 01 	sts	0x013B, r24
     73c:	90 93 3c 01 	sts	0x013C, r25
     740:	a0 93 3d 01 	sts	0x013D, r26
     744:	b0 93 3e 01 	sts	0x013E, r27
			break;
     748:	08 95       	ret
			break;
		case col4_off:
			LED_State = col5;
			break;
		case col5:
			LED_State = col5_off;
     74a:	8c e0       	ldi	r24, 0x0C	; 12
     74c:	80 93 48 01 	sts	0x0148, r24
			break;
		case col4_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col5_off:
			display_lights = 0x00FFFFFFFF;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	9f ef       	ldi	r25, 0xFF	; 255
     754:	dc 01       	movw	r26, r24
     756:	80 93 3b 01 	sts	0x013B, r24
     75a:	90 93 3c 01 	sts	0x013C, r25
     75e:	a0 93 3d 01 	sts	0x013D, r26
     762:	b0 93 3e 01 	sts	0x013E, r27
			break;
     766:	08 95       	ret
			break;
		case col5:
			LED_State = col5_off;
			break;
		case col5_off:
			LED_State = col6;
     768:	8d e0       	ldi	r24, 0x0D	; 13
     76a:	80 93 48 01 	sts	0x0148, r24
			break;
		case col5:
			display_lights = col_states[5];
			break;
		case col6:
			display_lights = col_states[6];
     76e:	80 91 2b 01 	lds	r24, 0x012B
     772:	90 91 2c 01 	lds	r25, 0x012C
     776:	a0 91 2d 01 	lds	r26, 0x012D
     77a:	b0 91 2e 01 	lds	r27, 0x012E
     77e:	80 93 3b 01 	sts	0x013B, r24
     782:	90 93 3c 01 	sts	0x013C, r25
     786:	a0 93 3d 01 	sts	0x013D, r26
     78a:	b0 93 3e 01 	sts	0x013E, r27
			break;
     78e:	08 95       	ret
			break;
		case col5_off:
			LED_State = col6;
			break;
		case col6:
			LED_State = col6_off;
     790:	8e e0       	ldi	r24, 0x0E	; 14
     792:	80 93 48 01 	sts	0x0148, r24
			break;
		case col5_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col6_off:
			display_lights = 0x00FFFFFFFF;
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	9f ef       	ldi	r25, 0xFF	; 255
     79a:	dc 01       	movw	r26, r24
     79c:	80 93 3b 01 	sts	0x013B, r24
     7a0:	90 93 3c 01 	sts	0x013C, r25
     7a4:	a0 93 3d 01 	sts	0x013D, r26
     7a8:	b0 93 3e 01 	sts	0x013E, r27
			break;
     7ac:	08 95       	ret
			break;
		case col6:
			LED_State = col6_off;
			break;
		case col6_off:
			LED_State = col7;
     7ae:	8f e0       	ldi	r24, 0x0F	; 15
     7b0:	80 93 48 01 	sts	0x0148, r24
			break;
		case col6:
			display_lights = col_states[6];
			break;
		case col7:
			display_lights = col_states[7];
     7b4:	80 91 2f 01 	lds	r24, 0x012F
     7b8:	90 91 30 01 	lds	r25, 0x0130
     7bc:	a0 91 31 01 	lds	r26, 0x0131
     7c0:	b0 91 32 01 	lds	r27, 0x0132
     7c4:	80 93 3b 01 	sts	0x013B, r24
     7c8:	90 93 3c 01 	sts	0x013C, r25
     7cc:	a0 93 3d 01 	sts	0x013D, r26
     7d0:	b0 93 3e 01 	sts	0x013E, r27
			break;
     7d4:	08 95       	ret
			break;
		case col6_off:
			LED_State = col7;
			break;
		case col7:
			LED_State = col7_off;
     7d6:	80 e1       	ldi	r24, 0x10	; 16
     7d8:	80 93 48 01 	sts	0x0148, r24
			break;
		case col6_off:
			display_lights = 0x00FFFFFFFF;
			break;
		case col7_off:
			display_lights = 0x00FFFFFFFF;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	dc 01       	movw	r26, r24
     7e2:	80 93 3b 01 	sts	0x013B, r24
     7e6:	90 93 3c 01 	sts	0x013C, r25
     7ea:	a0 93 3d 01 	sts	0x013D, r26
     7ee:	b0 93 3e 01 	sts	0x013E, r27
			break;
     7f2:	08 95       	ret
			break;
		case col7:
			LED_State = col7_off;
			break;
		case col7_off:
			LED_State = col0;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 48 01 	sts	0x0148, r24
			break;
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <LED_Matrix+0x234>
		default:
			LED_State = LED_Init;
     7fc:	10 92 48 01 	sts	0x0148, r1
     800:	08 95       	ret
	switch(LED_State)
	{
		case LED_Init:
			break;
		case col0:
			display_lights = col_states[0];
     802:	80 91 13 01 	lds	r24, 0x0113
     806:	90 91 14 01 	lds	r25, 0x0114
     80a:	a0 91 15 01 	lds	r26, 0x0115
     80e:	b0 91 16 01 	lds	r27, 0x0116
     812:	80 93 3b 01 	sts	0x013B, r24
     816:	90 93 3c 01 	sts	0x013C, r25
     81a:	a0 93 3d 01 	sts	0x013D, r26
     81e:	b0 93 3e 01 	sts	0x013E, r27
     822:	08 95       	ret

00000824 <Player_Cursor>:
signed long cursor_green_mask = 0x01010000;
signed long	cursor_blue_mask = 0x01000100;
unsigned char cursor_color = -1;
enum Cursor_States{Cursor_Init, Wait_For_Buttons, Up_State, Down_State, Left_State, Right_State} Cursor_State;
void Player_Cursor()
{
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
	//Transitions
	switch(Cursor_State)
     828:	80 91 49 01 	lds	r24, 0x0149
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	09 f4       	brne	.+2      	; 0x832 <Player_Cursor+0xe>
     830:	06 c2       	rjmp	.+1036   	; 0xc3e <Player_Cursor+0x41a>
     832:	30 f4       	brcc	.+12     	; 0x840 <Player_Cursor+0x1c>
     834:	88 23       	and	r24, r24
     836:	69 f0       	breq	.+26     	; 0x852 <Player_Cursor+0x2e>
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	09 f4       	brne	.+2      	; 0x83e <Player_Cursor+0x1a>
     83c:	42 c0       	rjmp	.+132    	; 0x8c2 <Player_Cursor+0x9e>
     83e:	0f c2       	rjmp	.+1054   	; 0xc5e <Player_Cursor+0x43a>
     840:	84 30       	cpi	r24, 0x04	; 4
     842:	09 f4       	brne	.+2      	; 0x846 <Player_Cursor+0x22>
     844:	ec c1       	rjmp	.+984    	; 0xc1e <Player_Cursor+0x3fa>
     846:	08 f4       	brcc	.+2      	; 0x84a <Player_Cursor+0x26>
     848:	02 c2       	rjmp	.+1028   	; 0xc4e <Player_Cursor+0x42a>
     84a:	85 30       	cpi	r24, 0x05	; 5
     84c:	09 f4       	brne	.+2      	; 0x850 <Player_Cursor+0x2c>
     84e:	ef c1       	rjmp	.+990    	; 0xc2e <Player_Cursor+0x40a>
     850:	06 c2       	rjmp	.+1036   	; 0xc5e <Player_Cursor+0x43a>
	{
		case Cursor_Init:
			if ((col_states[x] & cursor_green_mask) == 0x01000000)
     852:	e0 91 3a 01 	lds	r30, 0x013A
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ed 5e       	subi	r30, 0xED	; 237
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	80 81       	ld	r24, Z
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	a2 81       	ldd	r26, Z+2	; 0x02
     86a:	b3 81       	ldd	r27, Z+3	; 0x03
     86c:	40 91 0d 01 	lds	r20, 0x010D
     870:	50 91 0e 01 	lds	r21, 0x010E
     874:	60 91 0f 01 	lds	r22, 0x010F
     878:	70 91 10 01 	lds	r23, 0x0110
     87c:	48 23       	and	r20, r24
     87e:	59 23       	and	r21, r25
     880:	6a 23       	and	r22, r26
     882:	7b 23       	and	r23, r27
     884:	41 15       	cp	r20, r1
     886:	51 05       	cpc	r21, r1
     888:	61 05       	cpc	r22, r1
     88a:	71 40       	sbci	r23, 0x01	; 1
     88c:	19 f4       	brne	.+6      	; 0x894 <Player_Cursor+0x70>
			{
				cursor_color = GREEN_LIGHT;
     88e:	10 92 08 01 	sts	0x0108, r1
     892:	13 c0       	rjmp	.+38     	; 0x8ba <Player_Cursor+0x96>
			}
			else if ((col_states[x] & cursor_blue_mask) == 0x01000000)
     894:	40 91 09 01 	lds	r20, 0x0109
     898:	50 91 0a 01 	lds	r21, 0x010A
     89c:	60 91 0b 01 	lds	r22, 0x010B
     8a0:	70 91 0c 01 	lds	r23, 0x010C
     8a4:	84 23       	and	r24, r20
     8a6:	95 23       	and	r25, r21
     8a8:	a6 23       	and	r26, r22
     8aa:	b7 23       	and	r27, r23
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 40       	sbci	r27, 0x01	; 1
     8b2:	19 f4       	brne	.+6      	; 0x8ba <Player_Cursor+0x96>
			{
				cursor_color = BLUE_LIGHT;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 08 01 	sts	0x0108, r24
			}
			Cursor_State = Wait_For_Buttons;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 49 01 	sts	0x0149, r24
			break;
     8c0:	d5 c1       	rjmp	.+938    	; 0xc6c <Player_Cursor+0x448>
		case Wait_For_Buttons:
			if ((button & Left_Button) == 0x00)
     8c2:	80 91 41 01 	lds	r24, 0x0141
     8c6:	87 fd       	sbrc	r24, 7
     8c8:	78 c0       	rjmp	.+240    	; 0x9ba <Player_Cursor+0x196>
			{
				if (x > 0)
     8ca:	20 91 3a 01 	lds	r18, 0x013A
     8ce:	22 23       	and	r18, r18
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <Player_Cursor+0xb0>
     8d2:	cc c1       	rjmp	.+920    	; 0xc6c <Player_Cursor+0x448>
				{
					Cursor_State = Left_State;
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	80 93 49 01 	sts	0x0149, r24
					--x;
     8da:	21 50       	subi	r18, 0x01	; 1
     8dc:	20 93 3a 01 	sts	0x013A, r18
					if (cursor_color == GREEN_LIGHT)
     8e0:	80 91 08 01 	lds	r24, 0x0108
     8e4:	81 11       	cpse	r24, r1
     8e6:	33 c0       	rjmp	.+102    	; 0x94e <Player_Cursor+0x12a>
					{
						if ((col_states[x] & 0x00010000) != 0)
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ed 5e       	subi	r30, 0xED	; 237
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	a2 81       	ldd	r26, Z+2	; 0x02
     8fe:	b3 81       	ldd	r27, Z+3	; 0x03
     900:	a0 ff       	sbrs	r26, 0
     902:	b0 c1       	rjmp	.+864    	; 0xc64 <Player_Cursor+0x440>
						{
							col_states[x+1] = (col_states[x+1] | 0x00010000) & 0xFFFFFEFF;
     904:	f9 01       	movw	r30, r18
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	e9 5e       	subi	r30, 0xE9	; 233
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	a2 81       	ldd	r26, Z+2	; 0x02
     918:	b3 81       	ldd	r27, Z+3	; 0x03
     91a:	9e 7f       	andi	r25, 0xFE	; 254
     91c:	ae 7f       	andi	r26, 0xFE	; 254
     91e:	a1 60       	ori	r26, 0x01	; 1
     920:	80 83       	st	Z, r24
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	a2 83       	std	Z+2, r26	; 0x02
     926:	b3 83       	std	Z+3, r27	; 0x03
							col_states[x] = (col_states[x] | 0x00000100) & 0xFFFEFFFF;
     928:	f9 01       	movw	r30, r18
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ed 5e       	subi	r30, 0xED	; 237
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	a2 81       	ldd	r26, Z+2	; 0x02
     93c:	b3 81       	ldd	r27, Z+3	; 0x03
     93e:	9e 7f       	andi	r25, 0xFE	; 254
     940:	ae 7f       	andi	r26, 0xFE	; 254
     942:	91 60       	ori	r25, 0x01	; 1
     944:	80 83       	st	Z, r24
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	a2 83       	std	Z+2, r26	; 0x02
     94a:	b3 83       	std	Z+3, r27	; 0x03
     94c:	8b c1       	rjmp	.+790    	; 0xc64 <Player_Cursor+0x440>
						}
					}
					else if (cursor_color == BLUE_LIGHT)
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	09 f0       	breq	.+2      	; 0x954 <Player_Cursor+0x130>
     952:	88 c1       	rjmp	.+784    	; 0xc64 <Player_Cursor+0x440>
					{
						if ((col_states[x] & 0x00000100) != 0)
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	f9 01       	movw	r30, r18
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	ed 5e       	subi	r30, 0xED	; 237
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	a2 81       	ldd	r26, Z+2	; 0x02
     96a:	b3 81       	ldd	r27, Z+3	; 0x03
     96c:	90 ff       	sbrs	r25, 0
     96e:	7a c1       	rjmp	.+756    	; 0xc64 <Player_Cursor+0x440>
						{
							col_states[x+1] = (col_states[x+1] | 0x00000100) & 0xFFFEFFFF;
     970:	f9 01       	movw	r30, r18
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	e9 5e       	subi	r30, 0xE9	; 233
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	a2 81       	ldd	r26, Z+2	; 0x02
     984:	b3 81       	ldd	r27, Z+3	; 0x03
     986:	9e 7f       	andi	r25, 0xFE	; 254
     988:	ae 7f       	andi	r26, 0xFE	; 254
     98a:	91 60       	ori	r25, 0x01	; 1
     98c:	80 83       	st	Z, r24
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	a2 83       	std	Z+2, r26	; 0x02
     992:	b3 83       	std	Z+3, r27	; 0x03
							col_states[x] = (col_states[x] | 0x00010000) & 0xFFFFFEFF;
     994:	f9 01       	movw	r30, r18
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	ed 5e       	subi	r30, 0xED	; 237
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	a2 81       	ldd	r26, Z+2	; 0x02
     9a8:	b3 81       	ldd	r27, Z+3	; 0x03
     9aa:	9e 7f       	andi	r25, 0xFE	; 254
     9ac:	ae 7f       	andi	r26, 0xFE	; 254
     9ae:	a1 60       	ori	r26, 0x01	; 1
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
     9b8:	55 c1       	rjmp	.+682    	; 0xc64 <Player_Cursor+0x440>
						}
					}
				}
			}
			else if ((button & Right_Button) == 0x00)
     9ba:	80 fd       	sbrc	r24, 0
     9bc:	78 c0       	rjmp	.+240    	; 0xaae <Player_Cursor+0x28a>
			{
				if (x < 7)
     9be:	20 91 3a 01 	lds	r18, 0x013A
     9c2:	27 30       	cpi	r18, 0x07	; 7
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <Player_Cursor+0x1a4>
     9c6:	52 c1       	rjmp	.+676    	; 0xc6c <Player_Cursor+0x448>
				{
					Cursor_State = Right_State;
     9c8:	85 e0       	ldi	r24, 0x05	; 5
     9ca:	80 93 49 01 	sts	0x0149, r24
					++x;
     9ce:	2f 5f       	subi	r18, 0xFF	; 255
     9d0:	20 93 3a 01 	sts	0x013A, r18
					if (cursor_color == GREEN_LIGHT)
     9d4:	80 91 08 01 	lds	r24, 0x0108
     9d8:	81 11       	cpse	r24, r1
     9da:	33 c0       	rjmp	.+102    	; 0xa42 <Player_Cursor+0x21e>
					{
						if ((col_states[x] & 0x00010000) != 0)
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	f9 01       	movw	r30, r18
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	ed 5e       	subi	r30, 0xED	; 237
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	a2 81       	ldd	r26, Z+2	; 0x02
     9f2:	b3 81       	ldd	r27, Z+3	; 0x03
     9f4:	a0 ff       	sbrs	r26, 0
     9f6:	36 c1       	rjmp	.+620    	; 0xc64 <Player_Cursor+0x440>
						{
							col_states[x-1] = (col_states[x-1] | 0x00010000) & 0xFFFFFEFF;
     9f8:	f9 01       	movw	r30, r18
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e1 5f       	subi	r30, 0xF1	; 241
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	a2 81       	ldd	r26, Z+2	; 0x02
     a0c:	b3 81       	ldd	r27, Z+3	; 0x03
     a0e:	9e 7f       	andi	r25, 0xFE	; 254
     a10:	ae 7f       	andi	r26, 0xFE	; 254
     a12:	a1 60       	ori	r26, 0x01	; 1
     a14:	80 83       	st	Z, r24
     a16:	91 83       	std	Z+1, r25	; 0x01
     a18:	a2 83       	std	Z+2, r26	; 0x02
     a1a:	b3 83       	std	Z+3, r27	; 0x03
							col_states[x] = (col_states[x] | 0x00000100) & 0xFFFEFFFF;
     a1c:	f9 01       	movw	r30, r18
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ed 5e       	subi	r30, 0xED	; 237
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	a2 81       	ldd	r26, Z+2	; 0x02
     a30:	b3 81       	ldd	r27, Z+3	; 0x03
     a32:	9e 7f       	andi	r25, 0xFE	; 254
     a34:	ae 7f       	andi	r26, 0xFE	; 254
     a36:	91 60       	ori	r25, 0x01	; 1
     a38:	80 83       	st	Z, r24
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	a2 83       	std	Z+2, r26	; 0x02
     a3e:	b3 83       	std	Z+3, r27	; 0x03
     a40:	11 c1       	rjmp	.+546    	; 0xc64 <Player_Cursor+0x440>
						}
					}
					else if (cursor_color == BLUE_LIGHT)
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	09 f0       	breq	.+2      	; 0xa48 <Player_Cursor+0x224>
     a46:	0e c1       	rjmp	.+540    	; 0xc64 <Player_Cursor+0x440>
					{
						if ((col_states[x] & 0x00000100) != 0)
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	f9 01       	movw	r30, r18
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ed 5e       	subi	r30, 0xED	; 237
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	a2 81       	ldd	r26, Z+2	; 0x02
     a5e:	b3 81       	ldd	r27, Z+3	; 0x03
     a60:	90 ff       	sbrs	r25, 0
     a62:	00 c1       	rjmp	.+512    	; 0xc64 <Player_Cursor+0x440>
						{
							col_states[x-1] = (col_states[x-1] | 0x00000100) & 0xFFFEFFFF;
     a64:	f9 01       	movw	r30, r18
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	e1 5f       	subi	r30, 0xF1	; 241
     a70:	fe 4f       	sbci	r31, 0xFE	; 254
     a72:	80 81       	ld	r24, Z
     a74:	91 81       	ldd	r25, Z+1	; 0x01
     a76:	a2 81       	ldd	r26, Z+2	; 0x02
     a78:	b3 81       	ldd	r27, Z+3	; 0x03
     a7a:	9e 7f       	andi	r25, 0xFE	; 254
     a7c:	ae 7f       	andi	r26, 0xFE	; 254
     a7e:	91 60       	ori	r25, 0x01	; 1
     a80:	80 83       	st	Z, r24
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	a2 83       	std	Z+2, r26	; 0x02
     a86:	b3 83       	std	Z+3, r27	; 0x03
							col_states[x] = (col_states[x] | 0x00010000) & 0xFFFFFEFF;
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	f9 01       	movw	r30, r18
     a92:	ed 5e       	subi	r30, 0xED	; 237
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	a2 81       	ldd	r26, Z+2	; 0x02
     a9c:	b3 81       	ldd	r27, Z+3	; 0x03
     a9e:	9e 7f       	andi	r25, 0xFE	; 254
     aa0:	ae 7f       	andi	r26, 0xFE	; 254
     aa2:	a1 60       	ori	r26, 0x01	; 1
     aa4:	80 83       	st	Z, r24
     aa6:	91 83       	std	Z+1, r25	; 0x01
     aa8:	a2 83       	std	Z+2, r26	; 0x02
     aaa:	b3 83       	std	Z+3, r27	; 0x03
     aac:	db c0       	rjmp	.+438    	; 0xc64 <Player_Cursor+0x440>
						}
					}
				}
			}
			else if ((button & Up_Button) == 0x00)
     aae:	85 fd       	sbrc	r24, 5
     ab0:	58 c0       	rjmp	.+176    	; 0xb62 <Player_Cursor+0x33e>
			{
				if (y < 0x80)
     ab2:	80 91 11 01 	lds	r24, 0x0111
     ab6:	90 91 12 01 	lds	r25, 0x0112
     aba:	80 38       	cpi	r24, 0x80	; 128
     abc:	91 05       	cpc	r25, r1
     abe:	08 f0       	brcs	.+2      	; 0xac2 <Player_Cursor+0x29e>
     ac0:	d5 c0       	rjmp	.+426    	; 0xc6c <Player_Cursor+0x448>
				{
					y = y << 1;
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	90 93 12 01 	sts	0x0112, r25
     aca:	80 93 11 01 	sts	0x0111, r24
					cursor_green_mask = ((cursor_green_mask & 0xFF00FFFF) | ((cursor_green_mask << 1) | 0x00010000)) | ((cursor_green_mask << 1) & 0xFF000000); 
     ace:	40 91 0d 01 	lds	r20, 0x010D
     ad2:	50 91 0e 01 	lds	r21, 0x010E
     ad6:	60 91 0f 01 	lds	r22, 0x010F
     ada:	70 91 10 01 	lds	r23, 0x0110
     ade:	db 01       	movw	r26, r22
     ae0:	ca 01       	movw	r24, r20
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	66 27       	eor	r22, r22
     aec:	48 2b       	or	r20, r24
     aee:	59 2b       	or	r21, r25
     af0:	6a 2b       	or	r22, r26
     af2:	7b 2b       	or	r23, r27
     af4:	61 60       	ori	r22, 0x01	; 1
     af6:	88 27       	eor	r24, r24
     af8:	99 27       	eor	r25, r25
     afa:	aa 27       	eor	r26, r26
     afc:	84 2b       	or	r24, r20
     afe:	95 2b       	or	r25, r21
     b00:	a6 2b       	or	r26, r22
     b02:	b7 2b       	or	r27, r23
     b04:	80 93 0d 01 	sts	0x010D, r24
     b08:	90 93 0e 01 	sts	0x010E, r25
     b0c:	a0 93 0f 01 	sts	0x010F, r26
     b10:	b0 93 10 01 	sts	0x0110, r27
					cursor_blue_mask = ((cursor_blue_mask & 0xFFFF00FF) | ((cursor_blue_mask << 1) | 0x00000100)) | ((cursor_blue_mask << 1) & 0xFF000000);
     b14:	40 91 09 01 	lds	r20, 0x0109
     b18:	50 91 0a 01 	lds	r21, 0x010A
     b1c:	60 91 0b 01 	lds	r22, 0x010B
     b20:	70 91 0c 01 	lds	r23, 0x010C
     b24:	db 01       	movw	r26, r22
     b26:	ca 01       	movw	r24, r20
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	aa 1f       	adc	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	55 27       	eor	r21, r21
     b32:	48 2b       	or	r20, r24
     b34:	59 2b       	or	r21, r25
     b36:	6a 2b       	or	r22, r26
     b38:	7b 2b       	or	r23, r27
     b3a:	51 60       	ori	r21, 0x01	; 1
     b3c:	88 27       	eor	r24, r24
     b3e:	99 27       	eor	r25, r25
     b40:	aa 27       	eor	r26, r26
     b42:	84 2b       	or	r24, r20
     b44:	95 2b       	or	r25, r21
     b46:	a6 2b       	or	r26, r22
     b48:	b7 2b       	or	r27, r23
     b4a:	80 93 09 01 	sts	0x0109, r24
     b4e:	90 93 0a 01 	sts	0x010A, r25
     b52:	a0 93 0b 01 	sts	0x010B, r26
     b56:	b0 93 0c 01 	sts	0x010C, r27
					Cursor_State = Up_State;
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	80 93 49 01 	sts	0x0149, r24
     b60:	99 c0       	rjmp	.+306    	; 0xc94 <Player_Cursor+0x470>
				}
			}
			else if ((button & Down_Button) == 0x00)
     b62:	86 fd       	sbrc	r24, 6
     b64:	83 c0       	rjmp	.+262    	; 0xc6c <Player_Cursor+0x448>
			{
				if (y > 0x01)
     b66:	80 91 11 01 	lds	r24, 0x0111
     b6a:	90 91 12 01 	lds	r25, 0x0112
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	91 05       	cpc	r25, r1
     b72:	08 f4       	brcc	.+2      	; 0xb76 <Player_Cursor+0x352>
     b74:	7b c0       	rjmp	.+246    	; 0xc6c <Player_Cursor+0x448>
				{
					Cursor_State = Down_State;
     b76:	23 e0       	ldi	r18, 0x03	; 3
     b78:	20 93 49 01 	sts	0x0149, r18
					y = y >> 1;
     b7c:	96 95       	lsr	r25
     b7e:	87 95       	ror	r24
     b80:	90 93 12 01 	sts	0x0112, r25
     b84:	80 93 11 01 	sts	0x0111, r24
					cursor_green_mask = ((cursor_green_mask & 0xFF00FFFF) | ((cursor_green_mask >> 1) | 0x00800000)) | ((cursor_green_mask >> 1) & 0xFF000000);
     b88:	80 91 0d 01 	lds	r24, 0x010D
     b8c:	90 91 0e 01 	lds	r25, 0x010E
     b90:	a0 91 0f 01 	lds	r26, 0x010F
     b94:	b0 91 10 01 	lds	r27, 0x0110
     b98:	ac 01       	movw	r20, r24
     b9a:	bd 01       	movw	r22, r26
     b9c:	75 95       	asr	r23
     b9e:	67 95       	ror	r22
     ba0:	57 95       	ror	r21
     ba2:	47 95       	ror	r20
     ba4:	aa 27       	eor	r26, r26
     ba6:	84 2b       	or	r24, r20
     ba8:	95 2b       	or	r25, r21
     baa:	a6 2b       	or	r26, r22
     bac:	b7 2b       	or	r27, r23
     bae:	a0 68       	ori	r26, 0x80	; 128
     bb0:	44 27       	eor	r20, r20
     bb2:	55 27       	eor	r21, r21
     bb4:	66 27       	eor	r22, r22
     bb6:	84 2b       	or	r24, r20
     bb8:	95 2b       	or	r25, r21
     bba:	a6 2b       	or	r26, r22
     bbc:	b7 2b       	or	r27, r23
     bbe:	80 93 0d 01 	sts	0x010D, r24
     bc2:	90 93 0e 01 	sts	0x010E, r25
     bc6:	a0 93 0f 01 	sts	0x010F, r26
     bca:	b0 93 10 01 	sts	0x0110, r27
					cursor_blue_mask = ((cursor_blue_mask & 0xFFFF00FF) | ((cursor_blue_mask >> 1) | 0x00008000)) | ((cursor_green_mask >> 1) & 0xFF000000);
     bce:	40 91 09 01 	lds	r20, 0x0109
     bd2:	50 91 0a 01 	lds	r21, 0x010A
     bd6:	60 91 0b 01 	lds	r22, 0x010B
     bda:	70 91 0c 01 	lds	r23, 0x010C
     bde:	8a 01       	movw	r16, r20
     be0:	9b 01       	movw	r18, r22
     be2:	11 27       	eor	r17, r17
     be4:	75 95       	asr	r23
     be6:	67 95       	ror	r22
     be8:	57 95       	ror	r21
     bea:	47 95       	ror	r20
     bec:	40 2b       	or	r20, r16
     bee:	51 2b       	or	r21, r17
     bf0:	62 2b       	or	r22, r18
     bf2:	73 2b       	or	r23, r19
     bf4:	50 68       	ori	r21, 0x80	; 128
     bf6:	b5 95       	asr	r27
     bf8:	a7 95       	ror	r26
     bfa:	97 95       	ror	r25
     bfc:	87 95       	ror	r24
     bfe:	88 27       	eor	r24, r24
     c00:	99 27       	eor	r25, r25
     c02:	aa 27       	eor	r26, r26
     c04:	84 2b       	or	r24, r20
     c06:	95 2b       	or	r25, r21
     c08:	a6 2b       	or	r26, r22
     c0a:	b7 2b       	or	r27, r23
     c0c:	80 93 09 01 	sts	0x0109, r24
     c10:	90 93 0a 01 	sts	0x010A, r25
     c14:	a0 93 0b 01 	sts	0x010B, r26
     c18:	b0 93 0c 01 	sts	0x010C, r27
     c1c:	23 c0       	rjmp	.+70     	; 0xc64 <Player_Cursor+0x440>
			{
				Cursor_State = Wait_For_Buttons;
			}
			break;
		case Left_State:
			if ((button & Left_Button) != 0x00)
     c1e:	80 91 41 01 	lds	r24, 0x0141
     c22:	87 ff       	sbrs	r24, 7
     c24:	37 c0       	rjmp	.+110    	; 0xc94 <Player_Cursor+0x470>
			{
				Cursor_State = Wait_For_Buttons;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 49 01 	sts	0x0149, r24
     c2c:	1f c0       	rjmp	.+62     	; 0xc6c <Player_Cursor+0x448>
			{
				Cursor_State = Left_State;
			}
			break;
		case Right_State:
			if ((button & Right_Button) == 0x00)
     c2e:	80 91 41 01 	lds	r24, 0x0141
     c32:	80 ff       	sbrs	r24, 0
     c34:	2f c0       	rjmp	.+94     	; 0xc94 <Player_Cursor+0x470>
			{
				Cursor_State = Right_State;
			}
			else
			{
				Cursor_State = Wait_For_Buttons;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 49 01 	sts	0x0149, r24
     c3c:	17 c0       	rjmp	.+46     	; 0xc6c <Player_Cursor+0x448>
			}
			break;
		case Up_State:
			if ((button & Up_Button) != 0x00)
     c3e:	80 91 41 01 	lds	r24, 0x0141
     c42:	85 ff       	sbrs	r24, 5
     c44:	27 c0       	rjmp	.+78     	; 0xc94 <Player_Cursor+0x470>
			{
				Cursor_State = Wait_For_Buttons;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 49 01 	sts	0x0149, r24
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <Player_Cursor+0x448>
			{
				Cursor_State = Up_State;
			}
			break;
		case Down_State:
			if ((button & Down_Button) != 0x00)
     c4e:	80 91 41 01 	lds	r24, 0x0141
     c52:	86 ff       	sbrs	r24, 6
     c54:	1f c0       	rjmp	.+62     	; 0xc94 <Player_Cursor+0x470>
			{
				Cursor_State = Wait_For_Buttons;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 49 01 	sts	0x0149, r24
     c5c:	07 c0       	rjmp	.+14     	; 0xc6c <Player_Cursor+0x448>
			{
				Cursor_State = Down_State;
			}
			break;
		default:
			Cursor_State = Cursor_Init;
     c5e:	10 92 49 01 	sts	0x0149, r1
			break;
     c62:	18 c0       	rjmp	.+48     	; 0xc94 <Player_Cursor+0x470>
	}
	
	//Actions
	switch(Cursor_State)
     c64:	80 91 49 01 	lds	r24, 0x0149
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	a1 f4       	brne	.+40     	; 0xc94 <Player_Cursor+0x470>
	{
		case Cursor_Init:
			break;
		case Wait_For_Buttons:
			if (seed_randomize >= 10000)
     c6c:	80 91 33 01 	lds	r24, 0x0133
     c70:	90 91 34 01 	lds	r25, 0x0134
     c74:	80 31       	cpi	r24, 0x10	; 16
     c76:	27 e2       	ldi	r18, 0x27	; 39
     c78:	92 07       	cpc	r25, r18
     c7a:	3c f0       	brlt	.+14     	; 0xc8a <Player_Cursor+0x466>
			{
				//Restarts the seed to 1 for randomizing
				seed_randomize = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 34 01 	sts	0x0134, r25
     c84:	80 93 33 01 	sts	0x0133, r24
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <Player_Cursor+0x470>
			}
			else
			{
				++seed_randomize;
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 34 01 	sts	0x0134, r25
     c90:	80 93 33 01 	sts	0x0133, r24
		case Down_State:
			break;
		default:
			break;
	}
}
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <Cursor_blinking>:
unsigned short blink_count = 175;
enum Blink_States {Blink_Init, Light_On, Light_Off} Blink_State;
void Cursor_blinking()
{
	//Transitions
	switch(Blink_State)
     c9a:	80 91 4c 01 	lds	r24, 0x014C
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <Cursor_blinking+0x18>
     ca2:	18 f0       	brcs	.+6      	; 0xcaa <Cursor_blinking+0x10>
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	01 f1       	breq	.+64     	; 0xce8 <Cursor_blinking+0x4e>
     ca8:	3a c0       	rjmp	.+116    	; 0xd1e <Cursor_blinking+0x84>
	{
		case Blink_Init:
			Blink_State = Light_On;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 4c 01 	sts	0x014C, r24
			break;
     cb0:	37 c1       	rjmp	.+622    	; 0xf20 <Cursor_blinking+0x286>
		case Light_On:
			if (blink_count <= 0)
     cb2:	80 91 04 01 	lds	r24, 0x0104
     cb6:	90 91 05 01 	lds	r25, 0x0105
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	61 f4       	brne	.+24     	; 0xcd6 <Cursor_blinking+0x3c>
			{
				blink_count = BLINK_TIME;
     cbe:	80 91 06 01 	lds	r24, 0x0106
     cc2:	90 91 07 01 	lds	r25, 0x0107
     cc6:	90 93 05 01 	sts	0x0105, r25
     cca:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_Off;
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	80 93 4c 01 	sts	0x014C, r24
     cd4:	18 c1       	rjmp	.+560    	; 0xf06 <Cursor_blinking+0x26c>
			}
			else
			{
				--blink_count;
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	90 93 05 01 	sts	0x0105, r25
     cdc:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_On;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 4c 01 	sts	0x014C, r24
     ce6:	1c c1       	rjmp	.+568    	; 0xf20 <Cursor_blinking+0x286>
			}
			break;
		case Light_Off:
			if (blink_count <= 0)
     ce8:	80 91 04 01 	lds	r24, 0x0104
     cec:	90 91 05 01 	lds	r25, 0x0105
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	61 f4       	brne	.+24     	; 0xd0c <Cursor_blinking+0x72>
			{
				blink_count = BLINK_TIME;
     cf4:	80 91 06 01 	lds	r24, 0x0106
     cf8:	90 91 07 01 	lds	r25, 0x0107
     cfc:	90 93 05 01 	sts	0x0105, r25
     d00:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_On;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 4c 01 	sts	0x014C, r24
     d0a:	0a c1       	rjmp	.+532    	; 0xf20 <Cursor_blinking+0x286>
			}
			else
			{
				--blink_count;
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	90 93 05 01 	sts	0x0105, r25
     d12:	80 93 04 01 	sts	0x0104, r24
				Blink_State = Light_Off;
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	80 93 4c 01 	sts	0x014C, r24
     d1c:	f4 c0       	rjmp	.+488    	; 0xf06 <Cursor_blinking+0x26c>
			}
			break;
		default:
			Blink_State = Blink_Init;
     d1e:	10 92 4c 01 	sts	0x014C, r1
     d22:	08 95       	ret
		case Blink_Init:
			break;
		case Light_On:
			if (blink_count == BLINK_TIME)
			{
				if (cursor_color == GREEN_LIGHT)
     d24:	80 91 08 01 	lds	r24, 0x0108
     d28:	81 11       	cpse	r24, r1
     d2a:	23 c0       	rjmp	.+70     	; 0xd72 <Cursor_blinking+0xd8>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_green_mask & 0x00FFFFFF));
     d2c:	e0 91 3a 01 	lds	r30, 0x013A
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	ee 0f       	add	r30, r30
     d38:	ff 1f       	adc	r31, r31
     d3a:	ed 5e       	subi	r30, 0xED	; 237
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	40 81       	ld	r20, Z
     d40:	51 81       	ldd	r21, Z+1	; 0x01
     d42:	62 81       	ldd	r22, Z+2	; 0x02
     d44:	73 81       	ldd	r23, Z+3	; 0x03
     d46:	80 91 0d 01 	lds	r24, 0x010D
     d4a:	90 91 0e 01 	lds	r25, 0x010E
     d4e:	a0 91 0f 01 	lds	r26, 0x010F
     d52:	b0 91 10 01 	lds	r27, 0x0110
     d56:	80 95       	com	r24
     d58:	90 95       	com	r25
     d5a:	a0 95       	com	r26
     d5c:	b0 95       	com	r27
     d5e:	bf 6f       	ori	r27, 0xFF	; 255
     d60:	84 23       	and	r24, r20
     d62:	95 23       	and	r25, r21
     d64:	a6 23       	and	r26, r22
     d66:	b7 23       	and	r27, r23
     d68:	80 83       	st	Z, r24
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	a2 83       	std	Z+2, r26	; 0x02
     d6e:	b3 83       	std	Z+3, r27	; 0x03
     d70:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	09 f0       	breq	.+2      	; 0xd78 <Cursor_blinking+0xde>
     d76:	e0 c0       	rjmp	.+448    	; 0xf38 <Cursor_blinking+0x29e>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
     d78:	e0 91 3a 01 	lds	r30, 0x013A
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ed 5e       	subi	r30, 0xED	; 237
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	62 81       	ldd	r22, Z+2	; 0x02
     d90:	73 81       	ldd	r23, Z+3	; 0x03
     d92:	80 91 09 01 	lds	r24, 0x0109
     d96:	90 91 0a 01 	lds	r25, 0x010A
     d9a:	a0 91 0b 01 	lds	r26, 0x010B
     d9e:	b0 91 0c 01 	lds	r27, 0x010C
     da2:	80 95       	com	r24
     da4:	90 95       	com	r25
     da6:	a0 95       	com	r26
     da8:	b0 95       	com	r27
     daa:	bf 6f       	ori	r27, 0xFF	; 255
     dac:	84 23       	and	r24, r20
     dae:	95 23       	and	r25, r21
     db0:	a6 23       	and	r26, r22
     db2:	b7 23       	and	r27, r23
     db4:	80 83       	st	Z, r24
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	a2 83       	std	Z+2, r26	; 0x02
     dba:	b3 83       	std	Z+3, r27	; 0x03
     dbc:	08 95       	ret
			}
			break;
		case Light_Off:
			if (blink_count == BLINK_TIME)
			{
				if (cursor_color == GREEN_LIGHT)
     dbe:	80 91 08 01 	lds	r24, 0x0108
     dc2:	81 11       	cpse	r24, r1
     dc4:	1f c0       	rjmp	.+62     	; 0xe04 <Cursor_blinking+0x16a>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] | (cursor_green_mask & 0x00FFFFFF));
     dc6:	e0 91 3a 01 	lds	r30, 0x013A
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ed 5e       	subi	r30, 0xED	; 237
     dd6:	fe 4f       	sbci	r31, 0xFE	; 254
     dd8:	40 81       	ld	r20, Z
     dda:	51 81       	ldd	r21, Z+1	; 0x01
     ddc:	62 81       	ldd	r22, Z+2	; 0x02
     dde:	73 81       	ldd	r23, Z+3	; 0x03
     de0:	80 91 0d 01 	lds	r24, 0x010D
     de4:	90 91 0e 01 	lds	r25, 0x010E
     de8:	a0 91 0f 01 	lds	r26, 0x010F
     dec:	b0 91 10 01 	lds	r27, 0x0110
     df0:	bb 27       	eor	r27, r27
     df2:	84 2b       	or	r24, r20
     df4:	95 2b       	or	r25, r21
     df6:	a6 2b       	or	r26, r22
     df8:	b7 2b       	or	r27, r23
     dfa:	80 83       	st	Z, r24
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	a2 83       	std	Z+2, r26	; 0x02
     e00:	b3 83       	std	Z+3, r27	; 0x03
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <Cursor_blinking+0x1aa>
				}
				else if (cursor_color == BLUE_LIGHT)
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	f1 f4       	brne	.+60     	; 0xe44 <Cursor_blinking+0x1aa>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] | (cursor_blue_mask & 0x00FFFFFF));
     e08:	e0 91 3a 01 	lds	r30, 0x013A
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	ed 5e       	subi	r30, 0xED	; 237
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	40 81       	ld	r20, Z
     e1c:	51 81       	ldd	r21, Z+1	; 0x01
     e1e:	62 81       	ldd	r22, Z+2	; 0x02
     e20:	73 81       	ldd	r23, Z+3	; 0x03
     e22:	80 91 09 01 	lds	r24, 0x0109
     e26:	90 91 0a 01 	lds	r25, 0x010A
     e2a:	a0 91 0b 01 	lds	r26, 0x010B
     e2e:	b0 91 0c 01 	lds	r27, 0x010C
     e32:	bb 27       	eor	r27, r27
     e34:	84 2b       	or	r24, r20
     e36:	95 2b       	or	r25, r21
     e38:	a6 2b       	or	r26, r22
     e3a:	b7 2b       	or	r27, r23
     e3c:	80 83       	st	Z, r24
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	a2 83       	std	Z+2, r26	; 0x02
     e42:	b3 83       	std	Z+3, r27	; 0x03
				}	
			}	
			if (((button & Left_Button) == 0x00 || 
     e44:	80 91 41 01 	lds	r24, 0x0141
     e48:	90 91 42 01 	lds	r25, 0x0142
     e4c:	9c 01       	movw	r18, r24
     e4e:	21 78       	andi	r18, 0x81	; 129
     e50:	33 27       	eor	r19, r19
     e52:	21 38       	cpi	r18, 0x81	; 129
     e54:	31 05       	cpc	r19, r1
     e56:	31 f4       	brne	.+12     	; 0xe64 <Cursor_blinking+0x1ca>
     e58:	80 76       	andi	r24, 0x60	; 96
     e5a:	99 27       	eor	r25, r25
				 (button & Right_Button) == 0x00 || 
				 (button & Up_Button) == 0x00 || 
     e5c:	80 36       	cpi	r24, 0x60	; 96
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <Cursor_blinking+0x1ca>
     e62:	6a c0       	rjmp	.+212    	; 0xf38 <Cursor_blinking+0x29e>
				 (button & Down_Button) == 0x00) && Cursor_State == Wait_For_Buttons)
     e64:	80 91 49 01 	lds	r24, 0x0149
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <Cursor_blinking+0x1d4>
     e6c:	65 c0       	rjmp	.+202    	; 0xf38 <Cursor_blinking+0x29e>
			{
				
				if (cursor_color == GREEN_LIGHT)
     e6e:	80 91 08 01 	lds	r24, 0x0108
     e72:	81 11       	cpse	r24, r1
     e74:	23 c0       	rjmp	.+70     	; 0xebc <Cursor_blinking+0x222>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_green_mask & 0x00FFFFFF));
     e76:	e0 91 3a 01 	lds	r30, 0x013A
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	ee 0f       	add	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ed 5e       	subi	r30, 0xED	; 237
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	40 81       	ld	r20, Z
     e8a:	51 81       	ldd	r21, Z+1	; 0x01
     e8c:	62 81       	ldd	r22, Z+2	; 0x02
     e8e:	73 81       	ldd	r23, Z+3	; 0x03
     e90:	80 91 0d 01 	lds	r24, 0x010D
     e94:	90 91 0e 01 	lds	r25, 0x010E
     e98:	a0 91 0f 01 	lds	r26, 0x010F
     e9c:	b0 91 10 01 	lds	r27, 0x0110
     ea0:	80 95       	com	r24
     ea2:	90 95       	com	r25
     ea4:	a0 95       	com	r26
     ea6:	b0 95       	com	r27
     ea8:	bf 6f       	ori	r27, 0xFF	; 255
     eaa:	84 23       	and	r24, r20
     eac:	95 23       	and	r25, r21
     eae:	a6 23       	and	r26, r22
     eb0:	b7 23       	and	r27, r23
     eb2:	80 83       	st	Z, r24
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	a2 83       	std	Z+2, r26	; 0x02
     eb8:	b3 83       	std	Z+3, r27	; 0x03
     eba:	08 95       	ret
				}
				else if (cursor_color == BLUE_LIGHT)
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	e1 f5       	brne	.+120    	; 0xf38 <Cursor_blinking+0x29e>
				{
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
     ec0:	e0 91 3a 01 	lds	r30, 0x013A
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ed 5e       	subi	r30, 0xED	; 237
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	40 81       	ld	r20, Z
     ed4:	51 81       	ldd	r21, Z+1	; 0x01
     ed6:	62 81       	ldd	r22, Z+2	; 0x02
     ed8:	73 81       	ldd	r23, Z+3	; 0x03
     eda:	80 91 09 01 	lds	r24, 0x0109
     ede:	90 91 0a 01 	lds	r25, 0x010A
     ee2:	a0 91 0b 01 	lds	r26, 0x010B
     ee6:	b0 91 0c 01 	lds	r27, 0x010C
     eea:	80 95       	com	r24
     eec:	90 95       	com	r25
     eee:	a0 95       	com	r26
     ef0:	b0 95       	com	r27
     ef2:	bf 6f       	ori	r27, 0xFF	; 255
     ef4:	84 23       	and	r24, r20
     ef6:	95 23       	and	r25, r21
     ef8:	a6 23       	and	r26, r22
     efa:	b7 23       	and	r27, r23
     efc:	80 83       	st	Z, r24
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	a2 83       	std	Z+2, r26	; 0x02
     f02:	b3 83       	std	Z+3, r27	; 0x03
     f04:	08 95       	ret
					col_states[x] = (col_states[x] & 0xFF000000) | (col_states[x] & (~cursor_blue_mask & 0x00FFFFFF));
				}
			}
			break;
		case Light_Off:
			if (blink_count == BLINK_TIME)
     f06:	20 91 04 01 	lds	r18, 0x0104
     f0a:	30 91 05 01 	lds	r19, 0x0105
     f0e:	80 91 06 01 	lds	r24, 0x0106
     f12:	90 91 07 01 	lds	r25, 0x0107
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	09 f0       	breq	.+2      	; 0xf1e <Cursor_blinking+0x284>
     f1c:	93 cf       	rjmp	.-218    	; 0xe44 <Cursor_blinking+0x1aa>
     f1e:	4f cf       	rjmp	.-354    	; 0xdbe <Cursor_blinking+0x124>
	switch(Blink_State)
	{
		case Blink_Init:
			break;
		case Light_On:
			if (blink_count == BLINK_TIME)
     f20:	20 91 04 01 	lds	r18, 0x0104
     f24:	30 91 05 01 	lds	r19, 0x0105
     f28:	80 91 06 01 	lds	r24, 0x0106
     f2c:	90 91 07 01 	lds	r25, 0x0107
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	09 f4       	brne	.+2      	; 0xf38 <Cursor_blinking+0x29e>
     f36:	f6 ce       	rjmp	.-532    	; 0xd24 <Cursor_blinking+0x8a>
     f38:	08 95       	ret

00000f3a <main>:
PS: Green mostly overpowers the other colors.
************************************************************************************/
int main(void)
{
	//DDRA = 0xFF; PORTA = 0x00;
	DDRB = 0xFF; PORTB = 0x00;
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	84 b9       	out	0x04, r24	; 4
     f3e:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xFE; PORTD = 0x01;
     f40:	8e ef       	ldi	r24, 0xFE	; 254
     f42:	8a b9       	out	0x0a, r24	; 10
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	8b b9       	out	0x0b, r24	; 11
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	80 93 35 01 	sts	0x0135, r24
     f54:	90 93 36 01 	sts	0x0136, r25
     f58:	a0 93 37 01 	sts	0x0137, r26
     f5c:	b0 93 38 01 	sts	0x0138, r27
	_avr_timer_cntcurr = _avr_timer_M;
     f60:	80 93 43 01 	sts	0x0143, r24
     f64:	90 93 44 01 	sts	0x0144, r25
     f68:	a0 93 45 01 	sts	0x0145, r26
     f6c:	b0 93 46 01 	sts	0x0146, r27
	//signed long lights = 0x0067BBDC;
	//unsigned char add = -1;
	//unsigned char LED = 0xFF;
	
	TimerSet(1);
	TimerOn();
     f70:	bd d8       	rcall	.-3718   	; 0xec <TimerOn>
	//int state = sm1_display;
	LED_State = LED_Init;
     f72:	10 92 48 01 	sts	0x0148, r1
		
		IF GAME END
		state_of_game = 0;
		
		*/
		NES_Controller();
     f76:	3e d9       	rcall	.-3460   	; 0x1f4 <NES_Controller>
		if (state_of_game == 0)
     f78:	80 91 3f 01 	lds	r24, 0x013F
     f7c:	90 91 40 01 	lds	r25, 0x0140
     f80:	89 2b       	or	r24, r25
     f82:	11 f4       	brne	.+4      	; 0xf88 <main+0x4e>
		{
			Starting_Game();
     f84:	e0 da       	rcall	.-2624   	; 0x546 <Starting_Game>
     f86:	0c c0       	rjmp	.+24     	; 0xfa0 <main+0x66>
		}
		else
		{
			LED_Matrix();
     f88:	22 db       	rcall	.-2492   	; 0x5ce <LED_Matrix>
			Cursor_blinking();
     f8a:	87 de       	rcall	.-754    	; 0xc9a <Cursor_blinking>
			Player_Cursor();
     f8c:	4b dc       	rcall	.-1898   	; 0x824 <Player_Cursor>
			transmit_data(display_lights & 0xFFFFFFFF);
     f8e:	60 91 3b 01 	lds	r22, 0x013B
     f92:	70 91 3c 01 	lds	r23, 0x013C
     f96:	80 91 3d 01 	lds	r24, 0x013D
     f9a:	90 91 3e 01 	lds	r25, 0x013E
     f9e:	06 d9       	rcall	.-3572   	; 0x1ac <transmit_data>
		}
		while (!TimerFlag);
     fa0:	80 91 47 01 	lds	r24, 0x0147
     fa4:	88 23       	and	r24, r24
     fa6:	e1 f3       	breq	.-8      	; 0xfa0 <main+0x66>
		TimerFlag = 0;
     fa8:	10 92 47 01 	sts	0x0147, r1
		
	}
     fac:	e4 cf       	rjmp	.-56     	; 0xf76 <main+0x3c>

00000fae <__tablejump2__>:
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31

00000fb2 <__tablejump__>:
     fb2:	05 90       	lpm	r0, Z+
     fb4:	f4 91       	lpm	r31, Z
     fb6:	e0 2d       	mov	r30, r0
     fb8:	09 94       	ijmp

00000fba <do_rand>:
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	68 81       	ld	r22, Y
     fd2:	79 81       	ldd	r23, Y+1	; 0x01
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	81 05       	cpc	r24, r1
     fde:	91 05       	cpc	r25, r1
     fe0:	21 f4       	brne	.+8      	; 0xfea <do_rand+0x30>
     fe2:	64 e2       	ldi	r22, 0x24	; 36
     fe4:	79 ed       	ldi	r23, 0xD9	; 217
     fe6:	8b e5       	ldi	r24, 0x5B	; 91
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	2d e1       	ldi	r18, 0x1D	; 29
     fec:	33 ef       	ldi	r19, 0xF3	; 243
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	3a d0       	rcall	.+116    	; 0x1068 <__divmodsi4>
     ff4:	49 01       	movw	r8, r18
     ff6:	5a 01       	movw	r10, r20
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	a7 ea       	ldi	r26, 0xA7	; 167
     ffe:	b1 e4       	ldi	r27, 0x41	; 65
    1000:	4f d0       	rcall	.+158    	; 0x10a0 <__muluhisi3>
    1002:	6b 01       	movw	r12, r22
    1004:	7c 01       	movw	r14, r24
    1006:	ac ee       	ldi	r26, 0xEC	; 236
    1008:	b4 ef       	ldi	r27, 0xF4	; 244
    100a:	a5 01       	movw	r20, r10
    100c:	94 01       	movw	r18, r8
    100e:	54 d0       	rcall	.+168    	; 0x10b8 <__mulohisi3>
    1010:	c6 0e       	add	r12, r22
    1012:	d7 1e       	adc	r13, r23
    1014:	e8 1e       	adc	r14, r24
    1016:	f9 1e       	adc	r15, r25
    1018:	f7 fe       	sbrs	r15, 7
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <do_rand+0x6e>
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	c8 1a       	sub	r12, r24
    1020:	d1 08       	sbc	r13, r1
    1022:	e1 08       	sbc	r14, r1
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	f8 0a       	sbc	r15, r24
    1028:	c8 82       	st	Y, r12
    102a:	d9 82       	std	Y+1, r13	; 0x01
    102c:	ea 82       	std	Y+2, r14	; 0x02
    102e:	fb 82       	std	Y+3, r15	; 0x03
    1030:	c6 01       	movw	r24, r12
    1032:	9f 77       	andi	r25, 0x7F	; 127
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	9f 90       	pop	r9
    1046:	8f 90       	pop	r8
    1048:	08 95       	ret

0000104a <rand_r>:
    104a:	b7 cf       	rjmp	.-146    	; 0xfba <do_rand>

0000104c <rand>:
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	b4 cf       	rjmp	.-152    	; 0xfba <do_rand>

00001052 <srand>:
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	80 93 00 01 	sts	0x0100, r24
    105a:	90 93 01 01 	sts	0x0101, r25
    105e:	a0 93 02 01 	sts	0x0102, r26
    1062:	b0 93 03 01 	sts	0x0103, r27
    1066:	08 95       	ret

00001068 <__divmodsi4>:
    1068:	05 2e       	mov	r0, r21
    106a:	97 fb       	bst	r25, 7
    106c:	16 f4       	brtc	.+4      	; 0x1072 <__divmodsi4+0xa>
    106e:	00 94       	com	r0
    1070:	0f d0       	rcall	.+30     	; 0x1090 <__negsi2>
    1072:	57 fd       	sbrc	r21, 7
    1074:	05 d0       	rcall	.+10     	; 0x1080 <__divmodsi4_neg2>
    1076:	24 d0       	rcall	.+72     	; 0x10c0 <__udivmodsi4>
    1078:	07 fc       	sbrc	r0, 7
    107a:	02 d0       	rcall	.+4      	; 0x1080 <__divmodsi4_neg2>
    107c:	46 f4       	brtc	.+16     	; 0x108e <__divmodsi4_exit>
    107e:	08 c0       	rjmp	.+16     	; 0x1090 <__negsi2>

00001080 <__divmodsi4_neg2>:
    1080:	50 95       	com	r21
    1082:	40 95       	com	r20
    1084:	30 95       	com	r19
    1086:	21 95       	neg	r18
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	4f 4f       	sbci	r20, 0xFF	; 255
    108c:	5f 4f       	sbci	r21, 0xFF	; 255

0000108e <__divmodsi4_exit>:
    108e:	08 95       	ret

00001090 <__negsi2>:
    1090:	90 95       	com	r25
    1092:	80 95       	com	r24
    1094:	70 95       	com	r23
    1096:	61 95       	neg	r22
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	8f 4f       	sbci	r24, 0xFF	; 255
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	08 95       	ret

000010a0 <__muluhisi3>:
    10a0:	31 d0       	rcall	.+98     	; 0x1104 <__umulhisi3>
    10a2:	a5 9f       	mul	r26, r21
    10a4:	90 0d       	add	r25, r0
    10a6:	b4 9f       	mul	r27, r20
    10a8:	90 0d       	add	r25, r0
    10aa:	a4 9f       	mul	r26, r20
    10ac:	80 0d       	add	r24, r0
    10ae:	91 1d       	adc	r25, r1
    10b0:	11 24       	eor	r1, r1
    10b2:	08 95       	ret

000010b4 <__mulshisi3>:
    10b4:	b7 ff       	sbrs	r27, 7
    10b6:	f4 cf       	rjmp	.-24     	; 0x10a0 <__muluhisi3>

000010b8 <__mulohisi3>:
    10b8:	f3 df       	rcall	.-26     	; 0x10a0 <__muluhisi3>
    10ba:	82 1b       	sub	r24, r18
    10bc:	93 0b       	sbc	r25, r19
    10be:	08 95       	ret

000010c0 <__udivmodsi4>:
    10c0:	a1 e2       	ldi	r26, 0x21	; 33
    10c2:	1a 2e       	mov	r1, r26
    10c4:	aa 1b       	sub	r26, r26
    10c6:	bb 1b       	sub	r27, r27
    10c8:	fd 01       	movw	r30, r26
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <__udivmodsi4_ep>

000010cc <__udivmodsi4_loop>:
    10cc:	aa 1f       	adc	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	ee 1f       	adc	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	a2 17       	cp	r26, r18
    10d6:	b3 07       	cpc	r27, r19
    10d8:	e4 07       	cpc	r30, r20
    10da:	f5 07       	cpc	r31, r21
    10dc:	20 f0       	brcs	.+8      	; 0x10e6 <__udivmodsi4_ep>
    10de:	a2 1b       	sub	r26, r18
    10e0:	b3 0b       	sbc	r27, r19
    10e2:	e4 0b       	sbc	r30, r20
    10e4:	f5 0b       	sbc	r31, r21

000010e6 <__udivmodsi4_ep>:
    10e6:	66 1f       	adc	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	1a 94       	dec	r1
    10f0:	69 f7       	brne	.-38     	; 0x10cc <__udivmodsi4_loop>
    10f2:	60 95       	com	r22
    10f4:	70 95       	com	r23
    10f6:	80 95       	com	r24
    10f8:	90 95       	com	r25
    10fa:	9b 01       	movw	r18, r22
    10fc:	ac 01       	movw	r20, r24
    10fe:	bd 01       	movw	r22, r26
    1100:	cf 01       	movw	r24, r30
    1102:	08 95       	ret

00001104 <__umulhisi3>:
    1104:	a2 9f       	mul	r26, r18
    1106:	b0 01       	movw	r22, r0
    1108:	b3 9f       	mul	r27, r19
    110a:	c0 01       	movw	r24, r0
    110c:	a3 9f       	mul	r26, r19
    110e:	70 0d       	add	r23, r0
    1110:	81 1d       	adc	r24, r1
    1112:	11 24       	eor	r1, r1
    1114:	91 1d       	adc	r25, r1
    1116:	b2 9f       	mul	r27, r18
    1118:	70 0d       	add	r23, r0
    111a:	81 1d       	adc	r24, r1
    111c:	11 24       	eor	r1, r1
    111e:	91 1d       	adc	r25, r1
    1120:	08 95       	ret

00001122 <_exit>:
    1122:	f8 94       	cli

00001124 <__stop_program>:
    1124:	ff cf       	rjmp	.-2      	; 0x1124 <__stop_program>
